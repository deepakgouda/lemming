/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.8.7: (ygot: v0.29.11)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/state/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/config/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "neighbor-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet).NeighborSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSet (leaf): References a defined neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborSet (leaf): References a defined neighbor set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/neighbor-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-neighbor-set/*/neighbor-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) NeighborSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet_NeighborSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "neighbor-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchNeighborSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/state/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/config/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet).PrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSet (leaf): References a defined prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PrefixSet (leaf): References a defined prefix set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/prefix-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-prefix-set/*/prefix-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) PrefixSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet_PrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchPrefixSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_MatchSetOptionsRestrictedType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_MatchSetOptionsRestrictedType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/state/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/config/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "tag-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet).TagSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny struct {
	*ygnmi.NodePath
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation.  This leaf only supports matching on ANY
// member of the set or inverting the match.  Matching on ALL is
// not supported
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): References a defined tag set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TagSet (leaf): References a defined tag set
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/tag-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-tag-set/*/tag-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) TagSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet_TagSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "tag-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchTagSet",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}
