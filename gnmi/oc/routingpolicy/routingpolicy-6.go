/*
Package routingpolicy is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.10.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package routingpolicy

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny struct {
	*ygnmi.NodePath
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiSafiIn (leaf-list): List of address families which the NLRI may be
// within
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/afi-safi-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/afi-safi-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AfiSafiIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AfiSafiInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-safi-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-length"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AsPathLength (container): Value and comparison operations for conditions based on the
// length of the AS path in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "as-path-length"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) AsPathLength() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"as-path-length"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunityCount (container): Value and comparison operations for conditions based on the
// number of communities in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "community-count"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunityCount() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"community-count"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CommunitySet (leaf): References a defined community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) CommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExtCommunitySet (leaf): References a defined extended community set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/ext-community-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/ext-community-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) ExtCommunitySet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_ExtCommunitySetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ext-community-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalPrefEq (leaf): Condition to check if the local pref attribute is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/local-pref-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/local-pref-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) LocalPrefEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_LocalPrefEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-pref-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchAsPathSet (container): Match a referenced as-path set according to the logic
// defined in the match-set-options leaf
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "match-as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MatchAsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"match-as-path-set"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "med-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MedEq (leaf): Condition to check if the received MED value is equal to
// the specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/med-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/med-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) MedEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MedEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "med-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopIn (leaf-list): List of next hop addresses to check for in the route
// update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/next-hop-in"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/next-hop-in"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) NextHopIn() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_NextHopInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OriginEq (leaf): Condition to check if the route origin is equal to the
// specified value
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/origin-eq"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/origin-eq"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) OriginEq() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_OriginEqPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "origin-eq"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteType (leaf): Condition to check the route type in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteType (leaf): Condition to check the route type in the route update
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/route-type"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/*/route-type"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) RouteType() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_RouteTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditionsPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny struct {
	*ygnmi.NodePath
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_OperatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/as-path-length/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLengthPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_AsPathLength",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_ATTRIBUTE_COMPARISON](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "operator"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_ATTRIBUTE_COMPARISON, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Operator
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/state/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/config/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny struct {
	*ygnmi.NodePath
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Operator (leaf): type of comparison to be performed
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/operator"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/operator"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Operator() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_OperatorPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "operator"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): value to compare with the community count
//
//	Defining module:      "openconfig-policy-types"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/value"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/community-count/*/value"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Value() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCountPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_CommunityCount",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "as-path-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).AsPathSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "state/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/state/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-bgp-policy"
//	Path from parent:     "config/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/config/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_MatchSetOptionsType](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "match-set-options"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_MatchSetOptionsType, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet).MatchSetOptions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath struct {
	*ygnmi.NodePath
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny struct {
	*ygnmi.NodePath
}

// AsPathSet (leaf): References a defined AS path set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AsPathSet (leaf): References a defined AS path set
//
//	Defining module:      "openconfig-bgp-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/as-path-set"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/as-path-set"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) AsPathSet() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_AsPathSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "as-path-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchSetOptions (leaf): Optional parameter that governs the behaviour of the
// match operation
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "*/match-set-options"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/bgp-conditions/match-as-path-set/*/match-set-options"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) MatchSetOptions() *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny {
	ps := &RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet_MatchSetOptionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "match-set-options"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) State() ygnmi.SingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewSingletonQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) State() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPath) Config() ygnmi.ConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewConfigQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSetPathAny) Config() ygnmi.WildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet] {
	return ygnmi.NewWildcardQuery[*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_BgpConditions_MatchAsPathSet",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/interface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/interface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath represents the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-routing-policy/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface YANG schema element.
type RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/state/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-routing-policy"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/routing-policy/policy-definitions/policy-definition/statements/statement/conditions/match-interface/config/subinterface"
func (n *RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.RoutingPolicy_PolicyDefinition_Statement_Conditions_MatchInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
