/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.10.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny struct {
	*ygnmi.NodePath
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustInterval (leaf): time in seconds between adjustments to
// LSP bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustInterval() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjustThreshold (leaf): percentage difference between the LSP's
// specified bandwidth and its current bandwidth
// allocation -- if the difference is greater than the
// specified percentage, auto-bandwidth adjustment is
// triggered
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) AdjustThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "adjust-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls auto-bandwidth on the
// lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IntervalHighBw (leaf): The maximum measured bandwidth during the current
// auto-bandwidth adjust interval expressed in kilobits
// per second.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) IntervalHighBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxBw (leaf): set the maximum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MaxBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "max-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinBw (leaf): set the minimum bandwidth in Kbps for an
// auto-bandwidth LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/*/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) MinBw() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "min-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Overflow (container): configuration of MPLS overflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "overflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Overflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"overflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "underflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Underflow (container): configuration of MPLS underflow bandwidth
// adjustement for the LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "underflow"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Underflow() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"underflow"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).OverflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables mpls lsp bandwidth overflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverflowThreshold (leaf): bandwidth percentage change to trigger
// an overflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/overflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) OverflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_OverflowThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive overflow sample
// events needed to trigger an overflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/overflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow_TriggerEventCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_OverflowPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Overflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "trigger-event-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).TriggerEventCount
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/state/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/config/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "underflow-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow).UnderflowThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): enables bandwidth underflow
// adjustment on the lsp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Enabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TriggerEventCount (leaf): number of consecutive underflow sample
// events needed to trigger an underflow adjustment
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/trigger-event-count"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/trigger-event-count"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) TriggerEventCount() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_TriggerEventCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "trigger-event-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnderflowThreshold (leaf): bandwidth percentage change to trigger
// and underflow event
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/underflow-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/underflow/*/underflow-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) UnderflowThreshold() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow_UnderflowThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "underflow-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_UnderflowPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_Underflow",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Bytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bytes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Bytes
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"current-path-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).CurrentPathTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"current-path-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).CurrentPathTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).NextReoptimizationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).NextReoptimizationTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"online-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).OnlineTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"online-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).OnlineTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Packets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).Packets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).PathChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).PathChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).StateChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state-changes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters).StateChanges
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny struct {
	*ygnmi.NodePath
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bytes (leaf): Number of bytes that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bytes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/bytes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Bytes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_BytesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bytes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CurrentPathTime (leaf): Indicates the time the LSP switched onto its
// current path. The value is reset upon a LSP path
// change.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "current-path-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/current-path-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) CurrentPathTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_CurrentPathTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"current-path-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextReoptimizationTime (leaf): Indicates the next scheduled time the LSP
// will be reoptimized.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-reoptimization-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/next-reoptimization-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) NextReoptimizationTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_NextReoptimizationTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-reoptimization-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OnlineTime (leaf): Indication of the time the label switched path
// transitioned to an Oper Up or in-service state.
//
// The value is the timestamp in nanoseconds relative to
// the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "online-time"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/online-time"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) OnlineTime() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_OnlineTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"online-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Packets (leaf): Number of pacets that have been forwarded over the
// label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/packets"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) Packets() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PacketsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathChanges (leaf): Number of path changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathChanges (leaf): Number of path changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/path-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) PathChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_PathChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StateChanges (leaf): Number of state changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StateChanges (leaf): Number of state changes for the label switched path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-changes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters/state-changes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) StateChanges() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters_StateChangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-changes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/state/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/config/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "record-route-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).RecordRouteEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny struct {
	*ygnmi.NodePath
}

// Destination (leaf): P2P tunnel destination address
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Destination (leaf): P2P tunnel destination address
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/destination"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Destination() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_DestinationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PPrimaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path", "p2p-primary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PPrimaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PPrimaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-primary-path/p2p-primary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PPrimaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-primary-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathAny (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PSecondaryPath (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths", "p2p-secondary-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) P2PSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PSecondaryPathMap (list): List of p2p primary paths for a tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-secondary-paths/p2p-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) P2PSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRouteEnabled (leaf): Enables recording a path on an LSP using the record route object (RRO)
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/record-route-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/*/record-route-enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) RecordRouteEnabled() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_RecordRouteEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "record-route-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath) State() ygnmi.SingletonQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath) Config() ygnmi.ConfigQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath) State() ygnmi.SingletonQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewSingletonQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny) State() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath) Config() ygnmi.ConfigQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewConfigQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny) Config() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathAny (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": "*"},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
//
//	SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPath (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
//
//	SecondaryPath: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPath(SecondaryPath string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths", "candidate-secondary-path"},
			map[string]interface{}{"secondary-path": SecondaryPath},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathMap (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CandidateSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CandidateSecondaryPathMap (list): List of secondary paths which may be utilised when the
// current primary path is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "candidate-secondary-paths/candidate-secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CandidateSecondaryPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"candidate-secondary-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CspfTiebreakerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_ExplicitPathNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathComputationServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathControlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_RetryTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_SpfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_UseCspfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PPrimaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-primary-path"},
			PostRelPath: []string{"openconfig-network-instance:p2p-primary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny struct {
	*ygnmi.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroupsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).Priority
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/config/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "secondary-path"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath).SecondaryPath
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): Indicates the current active path option that has
// been selected of the candidate secondary paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/state/active"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Active() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): The priority of the specified secondary path option. Higher
// priority options are less preferable - such that a secondary
// path reference with a priority of 0 is the most preferred
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Priority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secondary-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SecondaryPath (leaf): A reference to the secondary path that should be utilised
// when the containing primary path option is in use
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/secondary-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/candidate-secondary-paths/candidate-secondary-path/*/secondary-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) SecondaryPath() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath_SecondaryPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "secondary-path"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_CandidateSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).CandidateSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:candidate-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:candidate-secondary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-primary-path/p2p-primary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraintPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PPrimaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).AssociatedRsvpSessions
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath) State() ygnmi.SingletonQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath) Config() ygnmi.ConfigQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_CspfTieBreaking] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_CspfTieBreaking](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cspf-tiebreaker"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_CspfTieBreaking, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).CspfTiebreaker
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-path-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).ExplicitPathName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_COMPUTATION_METHOD](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-method"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_COMPUTATION_METHOD, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationMethod
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-computation-server"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathComputationServer
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath) State() ygnmi.SingletonQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewSingletonQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny) State() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath) Config() ygnmi.ConfigQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewConfigQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny) Config() ygnmi.WildcardQuery[oc.E_Pcep_LspControlType] {
	return ygnmi.NewWildcardQuery[oc.E_Pcep_LspControlType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-control"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Pcep_LspControlType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathControl
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "retry-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).RetryTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).SpfMetric
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/config/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "use-cspf"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).UseCspf
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroups (container): Top-level container for include/exclude constraints for
// link affinities
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "admin-groups"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AdminGroups() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedRsvpSessions (leaf-list): If the signalling protocol specified for this path is
// RSVP-TE, this leaf-list provides a reference to the associated
// sessions within the RSVP-TE protocol sessions list, such
// that details of the signaling can be retrieved. More than
// one session may exist during re-signalling such as
// make-before-break.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-rsvp-sessions"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/associated-rsvp-sessions"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) AssociatedRsvpSessions() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AssociatedRsvpSessionsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "associated-rsvp-sessions"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfMetric (leaf): The IGP metric of the path currently used by the LSP.
// This value is used to represent the metric of the path
// used by the LSP following the execution of the CSPF
// algorithm and signalling of the LSP.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cspf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/cspf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "cspf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CspfTiebreaker (leaf): Determine the tie-breaking method to choose between
// equally desirable paths during CSPF computation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cspf-tiebreaker"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/cspf-tiebreaker"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) CspfTiebreaker() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_CspfTiebreakerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cspf-tiebreaker"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitPathName (leaf): reference to a defined path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-path-name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/explicit-path-name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) ExplicitPathName() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_ExplicitPathNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-path-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): Path name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationMethod (leaf): The method used for computing the path, either
// locally computed, queried from a server or not
// computed at all (explicitly configured).
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-method"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-method"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationMethod() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationMethodPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-method"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathComputationServer (leaf): Reference to the address of a previously configured
// external path computation server.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-computation-server"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-computation-server"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathComputationServer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathComputationServerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-computation-server"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathControl (leaf): Set the LSP path control mode as PCE_DELEGATED
// PCC_CONTROLLED or PCC_REPORT_ONLY information
// state to the PCE.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-control"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/path-control"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathControl() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathControlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-control"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintAny (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": "*"},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraint (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
//
//	Type: oc.E_MplsTypes_PATH_METRIC_TYPE
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraint(Type oc.E_MplsTypes_PATH_METRIC_TYPE) *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints", "path-metric-bound-constraint"},
			map[string]interface{}{"type": Type},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathMetricBoundConstraintMap (list): A list of metric bounds that are applied as constraints to the LSP.
// It act as a logical AND, hence all of them must be satisfied.
// If not, it will return an error.
// Constraints within this list may be applicable to either
// the local CSPF process (where data is available to the local device)
// or be communicated to a PCE for calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-metric-bound-constraints/path-metric-bound-constraint"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) PathMetricBoundConstraintMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-metric-bound-constraints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this path. The lower the
// number higher the preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RetryTimer (leaf): sets the time between attempts to establish the
// LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/retry-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/retry-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) RetryTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_RetryTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "retry-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpfMetric (leaf): The IGP metric of the shortest path to the LSP destination.
// This value is used to compare the current metric of the
// constrained path to the shortest path that is available in
// the network topology.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/spf-metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/state/spf-metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) SpfMetric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_SpfMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "spf-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UseCspf (leaf): Flag to enable CSPF for locally computed LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/use-cspf"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/*/use-cspf"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) UseCspf() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_UseCspfPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "use-cspf"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes).P2PSecondaryPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:p2p-secondary-paths"},
			PostRelPath: []string{"openconfig-network-instance:p2p-secondary-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "exclude-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).ExcludeGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-all-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAllGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/state/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/config/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "include-any-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups).IncludeAnyGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny struct {
	*ygnmi.NodePath
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExcludeGroup (leaf-list): list of references to named admin-groups to exclude in
// path calculation.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exclude-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/exclude-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) ExcludeGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_ExcludeGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exclude-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAllGroup (leaf-list): list of references to named admin-groups of which all must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-all-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-all-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAllGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAllGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-all-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncludeAnyGroup (leaf-list): list of references to named admin-groups of which one must
// be included
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/include-any-group"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/admin-groups/*/include-any-group"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) IncludeAnyGroup() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups_IncludeAnyGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "include-any-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroupsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_AdminGroups",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).MetricUpperBound
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny struct {
	*ygnmi.NodePath
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricUpperBound (leaf): Upper bound on end-to-end path metric. A zero indicate
// an unbounded upper limit for the specific metric-type.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/metric-upper-bound"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) MetricUpperBound() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_MetricUpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Identifies an entry in the list of metric-types
// bound for the TE path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes/p2p-secondary-paths/p2p-secondary-path/path-metric-bound-constraints/path-metric-bound-constraint/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraintPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsTypes_PATH_METRIC_TYPE]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath_PathMetricBoundConstraint, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath).PathMetricBoundConstraint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributes_P2PSecondaryPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-metric-bound-constraints"},
			PostRelPath: []string{"openconfig-network-instance:path-metric-bound-constraint"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/state/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/config/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLspPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLspPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLspPathMapAny struct {
	*ygnmi.NodePath
}

// Egress (container): Static LSPs for which the router is an
//
//	 egress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "egress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Egress (container): Static LSPs for which the router is an
//
//	 egress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "egress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Egress() *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"egress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ingress (container): Static LSPs for which the router is an
//
//	 ingress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "ingress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ingress (container): Static LSPs for which the router is an
//
//	 ingress node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "ingress"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Ingress() *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ingress"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): name to identify the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/*/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): name to identify the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/*/name"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Name() *NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transit (container): Static LSPs for which the router is an
//
//	 transit node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "transit"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transit (container): Static LSPs for which the router is an
//
//	 transit node
//		Defining module:      "openconfig-mpls-static"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "transit"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit"
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Transit() *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transit"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps_StaticLsp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp](
		"NetworkInstance_Mpls_Lsps",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_StaticLsp, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps).StaticLsp
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-lsps"},
			PostRelPath: []string{"openconfig-network-instance:static-lsp"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/egress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Egress_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_EgressPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Egress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Egress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/ingress/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Ingress_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_IngressPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Ingress](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Ingress",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "incoming-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).IncomingLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/state/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/config/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "push-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit).PushLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit YANG schema element.
type NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny struct {
	*ygnmi.NodePath
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IncomingLabel (leaf): label value on the incoming packet
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/incoming-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/incoming-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) IncomingLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_IncomingLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "incoming-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): next hop IP address for the LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/next-hop"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) NextHop() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PushLabel (leaf): label value to push at the current hop for the
// LSP
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/push-label"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp/transit/*/push-label"
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) PushLabel() *NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLsp_Transit_PushLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "push-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_StaticLsp_TransitPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_StaticLsp_Transit](
		"NetworkInstance_Mpls_Lsps_StaticLsp_Transit",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny struct {
	*ygnmi.NodePath
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	 the LSP
//		Defining module:      "openconfig-mpls-igp"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "path-setup-protocol"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathSetupProtocol (container): select and configure the signaling method for
//
//	 the LSP
//		Defining module:      "openconfig-mpls-igp"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "path-setup-protocol"
//		Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny) PathSetupProtocol() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-setup-protocol"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny struct {
	*ygnmi.NodePath
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ldp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ldp (container): LDP signaling setup for IGP-congruent LSPs
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ldp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp"
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny) Ldp() *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocolPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/unconstrained-path/path-setup-protocol/ldp YANG schema element.
type NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_LdpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp](
		"NetworkInstance_Mpls_Lsps_UnconstrainedPath_PathSetupProtocol_Ldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocolsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocolsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols YANG schema element.
type NetworkInstance_Mpls_SignalingProtocolsPathAny struct {
	*ygnmi.NodePath
}

// Ldp (container): LDP global signaling configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ldp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_LdpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ldp (container): LDP global signaling configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ldp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) Ldp() *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_LdpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ldp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rsvp-te"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RsvpTe (container): RSVP-TE global signaling protocol configuration
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rsvp-te"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) RsvpTe() *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rsvp-te"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): MPLS-specific Segment Routing configuration and operational state
// parameters
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing"
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) SegmentRouting() *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols](
		"NetworkInstance_Mpls_SignalingProtocols",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols](
		"NetworkInstance_Mpls_SignalingProtocols",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocolsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols](
		"NetworkInstance_Mpls_SignalingProtocols",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocolsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols](
		"NetworkInstance_Mpls_SignalingProtocols",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_LdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_LdpPathAny struct {
	*ygnmi.NodePath
}

// Global (container): Platform wide LDP configuration and state
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): Platform wide LDP configuration and state
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Global() *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAttributes (container): Container including attributes for LDP-enabled
// interfaces
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) InterfaceAttributes() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": "*", "label-space-id": "*"},
			n,
		),
	}
	return ps
}

// WithLsrId sets NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny's key "lsr-id" to the specified value.
// LsrId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) WithLsrId(LsrId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	ygnmi.ModifyKey(n.NodePath, "lsr-id", LsrId)
	return n
}

// WithLabelSpaceId sets NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny's key "label-space-id" to the specified value.
// LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) WithLabelSpaceId(LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	ygnmi.ModifyKey(n.NodePath, "label-space-id", LabelSpaceId)
	return n
}

// Neighbor (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
//
//	LsrId: string
//	LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
//
//	LsrId: string
//	LabelSpaceId: uint16
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Neighbor(LsrId string, LabelSpaceId uint16) *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"lsr-id": LsrId, "label-space-id": LabelSpaceId},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) NeighborMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of LDP neighbors and their attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) NeighborMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targeted"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Targeted (container): Top container for targeted LDP state and configuration
// attributes.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targeted"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted"
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Targeted() *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targeted"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_LdpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny struct {
	*ygnmi.NodePath
}

// Authentication (container): Global LDP authentication
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Global LDP authentication
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GracefulRestart (container): Top container for LDP graceful-restart attributes
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "graceful-restart"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) GracefulRestart() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"graceful-restart"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LsrId (leaf): Global label switch router identifier
// configuration.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/*/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsr-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LsrId (leaf): Global label switch router identifier
// configuration.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/*/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_LsrIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsr-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_AuthenticationKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables LDP authentication on the node.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables LDP authentication on the node.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ForwardingHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "forwarding-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ForwardingHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ForwardingHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "forwarding-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ForwardingHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).HelperEnable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "helper-enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).HelperEnable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).HelperEnable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "helper-enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).HelperEnable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reconnect-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ReconnectTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reconnect-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ReconnectTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reconnect-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ReconnectTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reconnect-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).ReconnectTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/config/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingHoldtime (leaf): Time that defines the interval for keeping the
// node in recovery mode.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) ForwardingHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ForwardingHoldtime (leaf): Time that defines the interval for keeping the
// node in recovery mode.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/forwarding-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/forwarding-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) ForwardingHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ForwardingHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "forwarding-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperEnable (leaf): Enables the graceful restart helper for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) HelperEnable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelperEnable (leaf): Enables the graceful restart helper for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/helper-enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/helper-enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) HelperEnable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_HelperEnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "helper-enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReconnectTime (leaf): Interval for which the remote LDP peers
// will wait for the local node to reconnect after a
// failure
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) ReconnectTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reconnect-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReconnectTime (leaf): Interval for which the remote LDP peers
// will wait for the local node to reconnect after a
// failure
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reconnect-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/reconnect-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) ReconnectTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_ReconnectTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reconnect-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecoveryTime (leaf): Interval used to specify the time for the remote
// peer to maintain the MPLS forwarding state after
// the local node has succesfully reconnected
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recovery-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecoveryTime (leaf): Interval used to specify the time for the remote
// peer to maintain the MPLS forwarding state after
// the local node has succesfully reconnected
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/global/graceful-restart/*/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart_RecoveryTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recovery-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Global_GracefulRestart",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny struct {
	*ygnmi.NodePath
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceAny (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of per-interface LDP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AddressFamilyAny (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// AddressFamilyAny (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// AddressFamily (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
//
//	AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// AddressFamily (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
//
//	AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// AddressFamilyMap (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) AddressFamilyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressFamilyMap (list): List for attributes related to address-families for LDP.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) AddressFamilyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Interface specific LDP statistics and counters
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) Counters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Interface specific LDP statistics and counters
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) Counters() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/config/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewConfigQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/config/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/*/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/*/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/address-families/address-family/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamilyPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_Counters",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/interface-attributes/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_InterfaceAttributes_Interface_InterfaceRef",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/enable-downstream-on-demand YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/enable-downstream-on-demand YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-downstream-on-demand"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).EnableDownstreamOnDemand
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable-downstream-on-demand"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).EnableDownstreamOnDemand
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-downstream-on-demand"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).EnableDownstreamOnDemand
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable-downstream-on-demand"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).EnableDownstreamOnDemand
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-space-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LabelSpaceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-space-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LabelSpaceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-space-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LabelSpaceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-space-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LabelSpaceId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/config/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lsr-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).LsrId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_LabelAdvertisementMode] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_LabelAdvertisementMode](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-label-advertisement-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_LabelAdvertisementMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).NegotiatedLabelAdvertisementMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_LabelAdvertisementMode] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_LabelAdvertisementMode](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated-label-advertisement-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_LabelAdvertisementMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).NegotiatedLabelAdvertisementMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_LabelAdvertisementMode] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_LabelAdvertisementMode](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-label-advertisement-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_LabelAdvertisementMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).PeerLabelAdvertisementMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_LabelAdvertisementMode] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_LabelAdvertisementMode](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-label-advertisement-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_LabelAdvertisementMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).PeerLabelAdvertisementMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-state"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_Neighbor_SessionState] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_Neighbor_SessionState](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_Neighbor_SessionState, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-state"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_Neighbor_SessionState] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_Neighbor_SessionState](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_Neighbor_SessionState, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).SessionState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Authentication (container): Global LDP authentication
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Global LDP authentication
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EnableDownstreamOnDemand (leaf): If this leaf is set to true, LDP downstream on demand is enabled in
// the LDP session and the router advertises DoD to the peer. If the peer
// also adverstises DoD, then downstream on demand is used in the session,
// otherwise downstream unsolicited is used.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) EnableDownstreamOnDemand() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-downstream-on-demand"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EnableDownstreamOnDemand (leaf): If this leaf is set to true, LDP downstream on demand is enabled in
// the LDP session and the router advertises DoD to the peer. If the peer
// also adverstises DoD, then downstream on demand is used in the session,
// otherwise downstream unsolicited is used.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable-downstream-on-demand"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/enable-downstream-on-demand"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) EnableDownstreamOnDemand() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_EnableDownstreamOnDemandPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable-downstream-on-demand"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloAdjacencyAny (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacencyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": "*"},
			n,
		),
	}
	return ps
}

// HelloAdjacencyAny (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacencyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": "*", "local-address": "*"},
			n,
		),
	}
	return ps
}

// WithRemoteAddress sets NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny's key "remote-address" to the specified value.
// RemoteAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) WithRemoteAddress(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	ygnmi.ModifyKey(n.NodePath, "remote-address", RemoteAddress)
	return n
}

// WithLocalAddress sets NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny's key "local-address" to the specified value.
// LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) WithLocalAddress(LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	ygnmi.ModifyKey(n.NodePath, "local-address", LocalAddress)
	return n
}

// HelloAdjacency (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
//
//	RemoteAddress: string
//	LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": LocalAddress},
			n,
		),
	}
	return ps
}

// HelloAdjacency (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
//
//	RemoteAddress: string
//	LocalAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacency(RemoteAddress string, LocalAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies", "hello-adjacency"},
			map[string]interface{}{"remote-address": RemoteAddress, "local-address": LocalAddress},
			n,
		),
	}
	return ps
}

// HelloAdjacencyMap (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) HelloAdjacencyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloAdjacencyMap (list): List of hello adjacencies for a given LDP
// neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-adjacencies/hello-adjacency"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) HelloAdjacencyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-adjacencies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelSpaceId (leaf): Label space ID of the neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) LabelSpaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-space-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelSpaceId (leaf): Label space ID of the neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-space-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/label-space-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) LabelSpaceId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LabelSpaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-space-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LsrId (leaf): Neighbor label switch router identifier.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsr-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LsrId (leaf): Neighbor label switch router identifier.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lsr-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/*/lsr-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) LsrId() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_LsrIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lsr-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedLabelAdvertisementMode (leaf): This leaf shows the Label Advertisement Mode negotiated based on local
// and remote preferences. If DoD is enabled and the peer also adverstises DoD,
// then downstream is negotiated. Otherwise, downstream unsolicited is used.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) NegotiatedLabelAdvertisementMode() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-label-advertisement-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NegotiatedLabelAdvertisementMode (leaf): This leaf shows the Label Advertisement Mode negotiated based on local
// and remote preferences. If DoD is enabled and the peer also adverstises DoD,
// then downstream is negotiated. Otherwise, downstream unsolicited is used.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/negotiated-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) NegotiatedLabelAdvertisementMode() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_NegotiatedLabelAdvertisementModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated-label-advertisement-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerLabelAdvertisementMode (leaf): This leaf shows the Label Advertisement Mode which is advertised by the peer.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) PeerLabelAdvertisementMode() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-label-advertisement-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerLabelAdvertisementMode (leaf): This leaf shows the Label Advertisement Mode which is advertised by the peer.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-label-advertisement-mode"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/peer-label-advertisement-mode"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) PeerLabelAdvertisementMode() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_PeerLabelAdvertisementModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-label-advertisement-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational status of the LDP session,
// based on the state machine for session
// negotiation behavior.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-state"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) SessionState() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionState (leaf): Operational status of the LDP session,
// based on the state machine for session
// negotiation behavior.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-state"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/state/session-state"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) SessionState() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_SessionStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_NeighborPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationKey (leaf): authenticate LDP signaling
// messages
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_AuthenticationKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables LDP authentication on the node.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables LDP authentication on the node.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_Authentication",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_MplsLdpAdjacencyType] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_MplsLdpAdjacencyType](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAdjacencyType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_MplsLdpAdjacencyType] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_MplsLdpAdjacencyType](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAdjacencyType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).AdjacencyType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-dropped"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).HelloDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-dropped"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-dropped"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).HelloDropped
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-received"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).HelloReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-received"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).HelloReceived
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/last-clear"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/last-clear"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "last-clear"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LastClear
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote-address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote-address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMapAny struct {
	*ygnmi.NodePath
}

// AdjacencyType (leaf): This attributes defines if the LDP
// adjacency is from a direct link or from
// targeted discovery.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) AdjacencyType() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdjacencyType (leaf): This attributes defines if the LDP
// adjacency is from a direct link or from
// targeted discovery.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacency-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/adjacency-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) AdjacencyType() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_AdjacencyTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacency-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloDropped (leaf): Number of Hello messaged dropped by the device
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-dropped"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloDropped() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloDropped (leaf): Number of Hello messaged dropped by the device
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-dropped"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-dropped"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloDropped() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloDroppedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-dropped"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (container): Specifies the time the sending LSR will
// maintain its record of Hellos from the
// receiving LSR
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloHoldtime (container): Specifies the time the sending LSR will
// maintain its record of Hellos from the
// receiving LSR
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hello-holdtime"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloReceived (leaf): Number of Hello messaged received by the device
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-received"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) HelloReceived() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloReceived (leaf): Number of Hello messaged received by the device
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-received"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/hello-received"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) HelloReceived() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters
// were cleared expressed relative to the Unix Epoch
// (January 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/last-clear"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) LastClear() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LastClear (leaf): Timestamp of the last time the interface counters
// were cleared expressed relative to the Unix Epoch
// (January 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/last-clear"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/state/last-clear"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) LastClear() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LastClearPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "last-clear"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAddress (leaf): Within the LDP adjacency, this attribute
// shows the local address.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/*/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAddress (leaf): Within the LDP adjacency, this attribute
// shows the local address.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/*/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_LocalAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Within the LDP adjacency, this attribute
// shows the neighbor address.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/*/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Within the LDP adjacency, this attribute
// shows the neighbor address.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/*/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_RemoteAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).HelloAdjacency
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:hello-adjacencies"},
			PostRelPath: []string{"openconfig-network-instance:hello-adjacency"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacencyPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_Key]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor).HelloAdjacency
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:hello-adjacencies"},
			PostRelPath: []string{"openconfig-network-instance:hello-adjacency"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacent"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).Adjacent
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacent"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjacent"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).Adjacent
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-expiration"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-expiration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).HelloExpiration
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-expiration"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-expiration"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).HelloExpiration
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).Negotiated
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "negotiated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).Negotiated
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hello"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hello"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).NextHello
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hello"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hello"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime).NextHello
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny struct {
	*ygnmi.NodePath
}

// Adjacent (leaf): Hello holdtime attribute learned from the
// LDP neighbor
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacent"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) Adjacent() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Adjacent (leaf): Hello holdtime attribute learned from the
// LDP neighbor
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjacent"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/adjacent"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) Adjacent() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_AdjacentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "adjacent"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloExpiration (leaf): Expiration time for the hello holdtime.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-expiration"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) HelloExpiration() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-expiration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloExpiration (leaf): Expiration time for the hello holdtime.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-expiration"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/hello-expiration"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) HelloExpiration() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_HelloExpirationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "hello-expiration"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Negotiated (leaf): Hello holdtime attribute negotiated between
// the LDP neighbor and the local router.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) Negotiated() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Negotiated (leaf): Hello holdtime attribute negotiated between
// the LDP neighbor and the local router.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/negotiated"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/negotiated"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) Negotiated() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NegotiatedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "negotiated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHello (leaf): Time when the next LDP hello will be sent to
// the adjacent neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hello"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) NextHello() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hello"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHello (leaf): Time when the next LDP hello will be sent to
// the adjacent neighbor.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hello"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/hello-holdtime/state/next-hello"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) NextHello() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime_NextHelloPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hello"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtimePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_HelloHoldtime",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/neighbors/neighbor/hello-adjacencies/hello-adjacency/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Neighbor_HelloAdjacency_InterfaceRef",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloAccept
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloAccept
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloAccept
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-accept"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloAccept
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny struct {
	*ygnmi.NodePath
}

// AddressFamilyAny (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// AddressFamilyAny (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) AddressFamilyAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": "*"},
			n,
		),
	}
	return ps
}

// AddressFamily (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
//
//	AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// AddressFamily (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
//
//	AfiName: oc.E_MplsLdp_MplsLdpAfi
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) AddressFamily(AfiName oc.E_MplsLdp_MplsLdpAfi) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families", "address-family"},
			map[string]interface{}{"afi-name": AfiName},
			n,
		),
	}
	return ps
}

// AddressFamilyMap (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) AddressFamilyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AddressFamilyMap (list): List of address families for targeted LDP
// configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address-families/address-family"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) AddressFamilyMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"address-families"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HelloAccept (leaf): Enables or disables the acceptance of targeted LDP
// hello messages.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloAccept() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloAccept (leaf): Enables or disables the acceptance of targeted LDP
// hello messages.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-accept"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-accept"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloAccept() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloAcceptPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-accept"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_TargetedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath) State() ygnmi.SingletonQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewSingletonQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/state/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny) State() ygnmi.WildcardQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/config/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath) Config() ygnmi.ConfigQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewConfigQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/config/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsLdp_MplsLdpAfi] {
	return ygnmi.NewWildcardQuery[oc.E_MplsLdp_MplsLdpAfi](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "afi-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsLdp_MplsLdpAfi, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).AfiName
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny struct {
	*ygnmi.NodePath
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/*/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AfiName (leaf): Adress-family name atttibute (IPv4, IPv6).
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/afi-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/*/afi-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) AfiName() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_AfiNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "afi-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetAny (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) TargetAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": "*"},
			n,
		),
	}
	return ps
}

// TargetAny (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) TargetAny() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": "*"},
			n,
		),
	}
	return ps
}

// Target (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
//
//	RemoteAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) Target(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": RemoteAddress},
			n,
		),
	}
	return ps
}

// Target (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
//
//	RemoteAddress: string
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) Target(RemoteAddress string) *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"remote-address": RemoteAddress},
			n,
		),
	}
	return ps
}

// TargetMap (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) TargetMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetMap (list): List of LDP targets configuration
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) TargetMap() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap) State() ygnmi.SingletonQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewSingletonQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMap) Config() ygnmi.ConfigQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewConfigQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamilyPathMapAny) Config() ygnmi.WildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily] {
	return ygnmi.NewWildcardQuery[map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_MplsLdp_MplsLdpAfi]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted).AddressFamily
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:address-families"},
			PostRelPath: []string{"openconfig-network-instance:address-family"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-holdtime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloHoldtime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).LocalAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/state/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/config/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target).RemoteAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny struct {
	*ygnmi.NodePath
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this leaf is
// defined is enabled, when set to false it is explicitly disabled.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/enabled"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) Enabled() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloHoldtime (leaf): Defines the time for which a neighbor adjacency will
// be kept by the router while it waits for a new link
// Hello message.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-holdtime"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/hello-holdtime"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) HelloHoldtime() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloHoldtimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-holdtime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): Defines the interval for sending Hello messages on
// each link LDP adjacency.
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAddress (leaf): Local IP address of the LDP adjacency
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalAddress (leaf): Local IP address of the LDP adjacency
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/local-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) LocalAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_LocalAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Neighbor address of the targeted LDP adjacency
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteAddress (leaf): Neighbor address of the targeted LDP adjacency
//
//	Defining module:      "openconfig-mpls-ldp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/ldp/targeted/address-families/address-family/targets/target/*/remote-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) RemoteAddress() *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target_RemoteAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_TargetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target](
		"NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily_Target, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_Ldp_Targeted_AddressFamily)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny struct {
	*ygnmi.NodePath
}

// Global (container): Platform wide RSVP configuration and state
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Global() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): Platform wide RSVP configuration and state
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Global() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of per-interface RSVP configurations.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// NeighborAny (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) NeighborAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": "*"},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
//
//	Address: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Neighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// Neighbor (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
//
//	Address: string
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Neighbor(Address string) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors", "neighbor"},
			map[string]interface{}{"address": Address},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) NeighborMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NeighborMap (list): List of RSVP neighbors of the local system
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "neighbors/neighbor"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) NeighborMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"neighbors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SessionAny (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) SessionAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": "*"},
			n,
		),
	}
	return ps
}

// SessionAny (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) SessionAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": "*"},
			n,
		),
	}
	return ps
}

// Session (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
//
//	LocalIndex: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Session(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": LocalIndex},
			n,
		),
	}
	return ps
}

// Session (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
//
//	LocalIndex: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Session(LocalIndex uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions", "session"},
			map[string]interface{}{"local-index": LocalIndex},
			n,
		),
	}
	return ps
}

// SessionMap (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) SessionMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SessionMap (list): List of RSVP sessions
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sessions/session"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) SessionMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sessions"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
