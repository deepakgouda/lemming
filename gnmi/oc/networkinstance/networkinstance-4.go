/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.8.7: (ygot: v0.29.11)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/lemming/gnmi/oc/netinstbgp"
	"github.com/openconfig/lemming/gnmi/oc/netinstisis"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny struct {
	*ygnmi.NodePath
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/*/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Exp (leaf): The value of the MPLS EXP (experimental) or Traffic Class bits that the
// SID statistics relate to. Packets received with a MPLS label value
// equal to the SID's MPLS label and EXP bits equal to the this value
// should be counted towards the associated ingress statistics. Packets
// that are forwarded to the destination MPLS label corresponding to the
// SID should be counted towards this value. In the egress direction, where
// forwarding follows a SID value that requires PHP at the local node,
// packets should still be counted towards the egress counters.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/*/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) Exp() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "exp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).ForwardingClass
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:forwarding-classes"},
			PostRelPath: []string{"openconfig-network-instance:forwarding-class"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).ForwardingClass
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:forwarding-classes"},
			PostRelPath: []string{"openconfig-network-instance:forwarding-class"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributesPathAny struct {
	*ygnmi.NodePath
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
	return ps
}

// AdminGroupAny (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroupAny() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": "*"},
			n,
		),
	}
	return ps
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
//
//	AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
	return ps
}

// AdminGroup (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
//
//	AdminGroupName: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroup(AdminGroupName string) *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups", "admin-group"},
			map[string]interface{}{"admin-group-name": AdminGroupName},
			n,
		),
	}
	return ps
}

// AdminGroupMap (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) AdminGroupMap() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AdminGroupMap (list): configuration of value to name mapping
// for mpls affinities/admin-groups
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-admin-groups/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) AdminGroupMap() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls-admin-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgAny (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// SrlgAny (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) SrlgAny() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Srlg (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
//
//	Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Srlg (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
//
//	Name: string
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) Srlg(Name string) *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs", "srlg"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// SrlgMap (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) SrlgMap() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgMap (list): List of shared risk link groups
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "srlgs/srlg"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) SrlgMap() *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"srlgs"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-lsp-timers"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeLspTimers (container): Definition for delays associated with setup
// and cleanup of TE LSPs
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-lsp-timers"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers"
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) TeLspTimers() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-lsp-timers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).AdminGroupName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/state/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/config/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bit-position"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup).BitPosition
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroupName (leaf): name for mpls admin-group
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminGroupName (leaf): name for mpls admin-group
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group-name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/admin-group-name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) AdminGroupName() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_AdminGroupNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bit-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BitPosition (leaf): bit-position value for mpls admin-group. The value
// for the admin group is an integer that represents one
// of the bit positions in the admin-group bitmask. Values
// between 0 and 31 are interpreted as the original limit
// of 32 admin groups. Values >=32 are interpreted as
// extended admin group values as per RFC7308.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bit-position"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/mpls-admin-groups/admin-group/*/bit-position"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) BitPosition() *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup_BitPositionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bit-position"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_AdminGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_AdminGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).AdminGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls-admin-groups"},
			PostRelPath: []string{"openconfig-network-instance:admin-group"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cost"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Cost
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_MplsSrlgFloodingType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsSrlgFloodingType](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flooding-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsSrlgFloodingType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).FloodingType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/state/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/config/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "value"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).Value
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny struct {
	*ygnmi.NodePath
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cost"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Cost (leaf): The cost of the SRLG to the computation
// algorithm
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cost"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/cost"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Cost() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_CostPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cost"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flooding-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodingType (leaf): The type of SRLG, either flooded in the IGP or
// statically configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flooding-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/flooding-type"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) FloodingType() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_FloodingTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flooding-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
	return ps
}

// MembersListAny (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersListAny() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": "*"},
			n,
		),
	}
	return ps
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
//
//	FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
	return ps
}

// MembersList (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
//
//	FromAddress: string
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersList(FromAddress string) *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members", "members-list"},
			map[string]interface{}{"from-address": FromAddress},
			n,
		),
	}
	return ps
}

// MembersListMap (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) MembersListMap() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MembersListMap (list): List of SRLG members, which are expressed
// as IP address endpoints of links contained in the
// SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-srlg-members/members-list"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) MembersListMap() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-srlg-members"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): SRLG group identifier
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): SRLG group identifier
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/name"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Name() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): group ID for the SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Value (leaf): group ID for the SRLG
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/value"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/*/value"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Value() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_ValuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "value"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_SrlgPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg](
		"NetworkInstance_Mpls_TeGlobalAttributes",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes).Srlg
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:srlgs"},
			PostRelPath: []string{"openconfig-network-instance:srlg"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "from-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).FromAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/state/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/config/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "to-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList).ToAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny struct {
	*ygnmi.NodePath
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "from-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FromAddress (leaf): IP address of the a-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/from-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/from-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) FromAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_FromAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "from-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "to-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ToAddress (leaf): IP address of the z-side of the SRLG link
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/to-address"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/srlgs/srlg/static-srlg-members/members-list/*/to-address"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) ToAddress() *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList_ToAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "to-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersListPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList](
		"NetworkInstance_Mpls_TeGlobalAttributes_Srlg",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg_MembersList, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg).MembersList
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_Srlg) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-srlg-members"},
			PostRelPath: []string{"openconfig-network-instance:members-list"},
		},
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "cleanup-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).CleanupDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "install-delay"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).InstallDelay
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers YANG schema element.
type NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny struct {
	*ygnmi.NodePath
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CleanupDelay (leaf): delay the removal of old te lsp for a specified
// amount of time
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/cleanup-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/cleanup-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) CleanupDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_CleanupDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "cleanup-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InstallDelay (leaf): delay the use of newly installed te lsp for a
// specified amount of time.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/install-delay"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/install-delay"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) InstallDelay() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_InstallDelayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "install-delay"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes/te-lsp-timers/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers_ReoptimizeTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers](
		"NetworkInstance_Mpls_TeGlobalAttributes_TeLspTimers",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwardingPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwardingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding YANG schema element.
type NetworkInstance_PolicyForwardingPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPath) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPathAny) InterfaceAny() *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPath) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePath {
	ps := &NetworkInstance_PolicyForwarding_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Interface(InterfaceId string) *NetworkInstance_PolicyForwarding_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPath) InterfaceMap() *NetworkInstance_PolicyForwarding_InterfacePathMap {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Configuration and operationals state relating to the
// relationship between interfaces and policy-based forwarding
// rules.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface"
func (n *NetworkInstance_PolicyForwardingPathAny) InterfaceMap() *NetworkInstance_PolicyForwarding_InterfacePathMapAny {
	ps := &NetworkInstance_PolicyForwarding_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
	return ps
}

// PathSelectionGroupAny (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroupAny() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": "*"},
			n,
		),
	}
	return ps
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
//
//	GroupId: string
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
	return ps
}

// PathSelectionGroup (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
//
//	GroupId: string
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroup(GroupId string) *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups", "path-selection-group"},
			map[string]interface{}{"group-id": GroupId},
			n,
		),
	}
	return ps
}

// PathSelectionGroupMap (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPath) PathSelectionGroupMap() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PathSelectionGroupMap (list): A path selection group is a set of forwarding resources,
// which are grouped as eligible paths for a particular
// policy-based forwarding rule. A policy rule may select a
// path-selection-group as the egress for a particular type of
// traffic (e.g., DSCP value). The system then utilises its
// standard forwarding lookup mechanism to select from the
// paths that are specified within the group - for IP packets,
// the destination IP address is used such that the packet is
// routed to the entity within the path-selection-group that
// corresponds to the next-hop for the destination IP address
// of the packet; for L2 packets, the selection is based on the
// destination MAC address. If multiple paths within the
// selection group are eligible to be used for forwarding,
// the packets are load-balanced between them according to
// the system's usual load balancing logic.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-selection-groups/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group"
func (n *NetworkInstance_PolicyForwardingPathAny) PathSelectionGroupMap() *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-selection-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPath) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPathAny) PolicyAny() *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
//
//	PolicyId: string
func (n *NetworkInstance_PolicyForwardingPath) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPath {
	ps := &NetworkInstance_PolicyForwarding_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
	return ps
}

// Policy (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
//
//	PolicyId: string
func (n *NetworkInstance_PolicyForwardingPathAny) Policy(PolicyId string) *NetworkInstance_PolicyForwarding_PolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"policy-id": PolicyId},
			n,
		),
	}
	return ps
}

// PolicyMap (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPath) PolicyMap() *NetworkInstance_PolicyForwarding_PolicyPathMap {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): A forwarding policy is defined to have a set of match
// criteria, allowing particular fields of a packet's header to
// be matched, and a set of forwarding actions which determines
// how the local system should forward the packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policies/policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy"
func (n *NetworkInstance_PolicyForwardingPathAny) PolicyMap() *NetworkInstance_PolicyForwarding_PolicyPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwardingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-forwarding-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyForwardingPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "apply-vrf-selection-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).ApplyVrfSelectionPolicy
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/state/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/config/interface-id"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface YANG schema element.
type NetworkInstance_PolicyForwarding_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyForwardingPolicy (leaf): The policy to be applied on the interface. Packets ingress on
// the referenced interface should be compared to the match
// criteria within the specified policy, and in the case that
// these criteria are met, the forwarding actions specified
// applied. These policies should be applied following quality of
// service classification, and ACL actions if such entities are
// referenced by the corresponding interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-forwarding-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-forwarding-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyForwardingPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyForwardingPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-forwarding-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface.
// The referenced Interface must be resolved using the Interface
// and Sub-interface leaves.
//
// The referenced policy MUST be of the type VRF_SELECTION_POLICY.
// The VRF selection policy may coexist with a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ApplyVrfSelectionPolicy (leaf): Apply the specific VRF selection policy on the interface.
// The referenced Interface must be resolved using the Interface
// and Sub-interface leaves.
//
// The referenced policy MUST be of the type VRF_SELECTION_POLICY.
// The VRF selection policy may coexist with a policy-forwarding policy.
//
// The policy specified in this leaf is used to specifically choose the L3VRF network
// instance that is used for specific input criteria of packets.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/apply-vrf-selection-policy"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/apply-vrf-selection-policy"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) ApplyVrfSelectionPolicy() *NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_ApplyVrfSelectionPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "apply-vrf-selection-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-pf-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/*/interface-id"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceId() *NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePath) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref"
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) InterfaceRef() *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Interface](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_PolicyForwarding_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Interface_InterfaceRef](
		"NetworkInstance_PolicyForwarding_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "group-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).GroupId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/state/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/config/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-lsp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup).MplsLsp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_PathSelectionGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny struct {
	*ygnmi.NodePath
}

// GroupId (leaf): A unique name for the path-selection-group
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupId (leaf): A unique name for the path-selection-group
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/group-id"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) GroupId() *NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_GroupIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLsp (leaf-list): A set of MPLS constrained-path LSPs which should be
// considered for the policy forwarding next-hop. In order to
// select between the LSPs within the path-selection-group, the
// system should determine which LSP provides the best path to
// the next-hop for the routed packet.
//
//	Defining module:      "openconfig-pf-path-groups"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-lsp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/path-selection-groups/path-selection-group/*/mpls-lsp"
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) MplsLsp() *NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny {
	ps := &NetworkInstance_PolicyForwarding_PathSelectionGroup_MplsLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-lsp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding_PathSelectionGroup",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PathSelectionGroupPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_PathSelectionGroup, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).PathSelectionGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:path-selection-groups"},
			PostRelPath: []string{"openconfig-network-instance:path-selection-group"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/policy-id"
func (n *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "policy-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).PolicyId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePath) State() ygnmi.SingletonQuery[oc.E_Policy_Type] {
	return ygnmi.NewSingletonQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Policy_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePath) Config() ygnmi.ConfigQuery[oc.E_Policy_Type] {
	return ygnmi.NewConfigQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Policy_Type] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Type](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Type, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_PolicyPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_PolicyPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy YANG schema element.
type NetworkInstance_PolicyForwarding_PolicyPathMapAny struct {
	*ygnmi.NodePath
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_PolicyIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyId (leaf): A unique name identifying the forwarding policy. This name is
// used when applying the policy to a particular interface.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/policy-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/policy-id"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) PolicyId() *NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_PolicyIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "policy-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// RuleAny (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) RuleAny() *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": "*"},
			n,
		),
	}
	return ps
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
//
//	SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// Rule (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
//
//	SequenceId: uint32
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Rule(SequenceId uint32) *NetworkInstance_PolicyForwarding_Policy_RulePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules", "rule"},
			map[string]interface{}{"sequence-id": SequenceId},
			n,
		),
	}
	return ps
}

// RuleMap (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) RuleMap() *NetworkInstance_PolicyForwarding_Policy_RulePathMap {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RuleMap (list): A match rule for the policy. In the case that multiple
// criteria are specified within a single rule, all criteria
// must be met for the rule to be applied to a packet.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rules/rule"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) RuleMap() *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_RulePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rules"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Type() *NetworkInstance_PolicyForwarding_Policy_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of the policy. By default policies are generally usable for policy-based
// routing, and have no restrictions on their implementation. Where there are alternate
// policy types, this leaf specifies that a policy is expected to conform with a subset
// of the functionality as described in the specified type.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/*/type"
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Type() *NetworkInstance_PolicyForwarding_Policy_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_PolicyPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy](
		"NetworkInstance_PolicyForwarding",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding).Policy
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policies"},
			PostRelPath: []string{"openconfig-network-instance:policy"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).MatchedPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/config/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/config/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sequence-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule).SequenceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_RulePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_RulePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_RulePathMapAny struct {
	*ygnmi.NodePath
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "action"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Action (container): The forwarding policy action to be applied for
// packets matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "action"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Action() *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"action"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4 (container): Top level container for IPv4 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6 (container): Top-level container for IPv6 match field data
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Ipv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2 (container): Ethernet header fields
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) L2() *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MatchedOctets (leaf): Bytes matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedOctets (leaf): Bytes matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-octets"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-octets"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedOctets() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPkts (leaf): Number of packets matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MatchedPkts (leaf): Number of packets matched by the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/matched-pkts"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/state/matched-pkts"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) MatchedPkts() *NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_MatchedPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "matched-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Unique sequence number for the policy rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/*/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SequenceId (leaf): Unique sequence number for the policy rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sequence-id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/*/sequence-id"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) SequenceId() *NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_SequenceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sequence-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Transport (container): Transport fields container
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transport"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport"
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Transport() *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transport"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy_Rule",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_RulePathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule](
		"NetworkInstance_PolicyForwarding_Policy",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_PolicyForwarding_Policy_Rule, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy).Rule
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:rules"},
			PostRelPath: []string{"openconfig-network-instance:rule"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapFallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gre"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGre
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-gue"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateGue
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "decapsulate-mpls-in-udp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).DecapsulateMplsInUdp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).NextHop
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "path-selection-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PathSelectionGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/state/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/config/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "post-decap-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action).PostDecapNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny struct {
	*ygnmi.NodePath
}

// DecapFallbackNetworkInstance (leaf): This leaf has to be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used as a
// fallback instance for lookup when
// ../decap-network-instance produces no match for the packet.
// NI specified by this leaf might contain different mixed next hop
// actions (e.g. next hop IP, decapsulation, redirect to another NI,
// etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapFallbackNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapFallbackNetworkInstance (leaf): This leaf has to be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used as a
// fallback instance for lookup when
// ../decap-network-instance produces no match for the packet.
// NI specified by this leaf might contain different mixed next hop
// actions (e.g. next hop IP, decapsulation, redirect to another NI,
// etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decap-fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-fallback-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapFallbackNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapFallbackNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapNetworkInstance (leaf): This leaf is mutually exclusive with ../network-instance.
// This leaf should be used along with
// ../decap-fallback-network-instance and ../post-decap-network-instance.
// This leaf is normally used with NIs (network instances) that are
// populated by SDN controllers (e.g. via gRIBI), where we want:
//   - The decapsulation decision to be controlled by the
//     controllers.
//   - The new header after decapsulation is to be looked up in
//     another NI, and the NI is chosen by fields (e.g. source IP,
//     DSCP, etc) that are not used for route resolution.
//
// When this leaf is set, packets matching the match criteria for
// the forwarding rule should be looked up in the specified NI.
// It is expected that the NI should only contain routes that have
// next hop action as decapsulation.
//   - If there is a match, the packet should be decapsulated.
//     The route lookup on the new header should happen in the
//     ../post-decap-network-instance.
//   - If there is no match, the packet should be looked up in the
//     NI set by ../decap-fallback-network-instance.
//     Defining module:      "openconfig-pf-forwarding-policies"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "*/decap-network-instance"
//     Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapNetworkInstance (leaf): This leaf is mutually exclusive with ../network-instance.
// This leaf should be used along with
// ../decap-fallback-network-instance and ../post-decap-network-instance.
// This leaf is normally used with NIs (network instances) that are
// populated by SDN controllers (e.g. via gRIBI), where we want:
//   - The decapsulation decision to be controlled by the
//     controllers.
//   - The new header after decapsulation is to be looked up in
//     another NI, and the NI is chosen by fields (e.g. source IP,
//     DSCP, etc) that are not used for route resolution.
//
// When this leaf is set, packets matching the match criteria for
// the forwarding rule should be looked up in the specified NI.
// It is expected that the NI should only contain routes that have
// next hop action as decapsulation.
//   - If there is a match, the packet should be decapsulated.
//     The route lookup on the new header should happen in the
//     ../post-decap-network-instance.
//   - If there is no match, the packet should be looked up in the
//     NI set by ../decap-fallback-network-instance.
//     Defining module:      "openconfig-pf-forwarding-policies"
//     Instantiating module: "openconfig-network-instance"
//     Path from parent:     "*/decap-network-instance"
//     Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGre (leaf): When this leaf is set to true, the local system should remove
// the GRE header from the packet matching the rule. Following
// the decapsulation it should subsequently forward the
// encapsulated packet according to the relevant lookup (e.g., if
// the encapsulated packet is IP, the packet should be routed
// according to the IP destination).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGrePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gre"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateGue (leaf): When this leaf is set to true, the local system should remove
// the Generic UDP Encapsulation (GUE) header from the packet matching
// the rule. Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying IPv4 or IPv6 header.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-gue"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-gue"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateGue() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateGuePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-gue"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DecapsulateMplsInUdp (leaf): When this leaf is set to true, the local system should remove
// the UDP header from the packet matching the rule.
// Following the decapsulation it should subsequently forward the
// encapsulated packet according to the underlying MPLS label.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/decapsulate-mpls-in-udp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/decapsulate-mpls-in-udp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) DecapsulateMplsInUdp() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DecapsulateMplsInUdpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "decapsulate-mpls-in-udp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When this leaf is set to true, the local system should drop
// packets that match the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/discard"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) Discard() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_DiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EncapsulateGre (container): Packets matching the policy rule should be GRE encapsulated
// towards the set of targets defined within the target list. Where
// more than one target is specified, or the target subnet expands
// to more than one endpoint, packets should be load-balanced across
// the destination addresses within the subnets.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulate-gre"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) EncapsulateGre() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulate-gre"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NetworkInstance (leaf): This leaf is mutually exclusive with ../decap-network-instance.
// When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NetworkInstance (leaf): This leaf is mutually exclusive with ../decap-network-instance.
// When this leaf is set, packets matching the match criteria
// for the forwarding rule should be looked up in the
// network-instance that is referenced rather than the
// network-instance with which the interface is associated.
// Such configuration allows policy-routing into multiple
// sub-topologies from a single ingress access interface, or
// different send and receive contexts for a particular
// interface (sometimes referred to as half-duplex VRF).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): When an IP next-hop is specified in the next-hop field,
// packets matching the match criteria for the forwarding rule
// should be forwarded to the next-hop IP address, bypassing any
// lookup on the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/next-hop"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/next-hop"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) NextHop() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathSelectionGroup (leaf): When path-selection-group is set, packets matching the
// match criteria for the forwarding rule should be forwarded
// only via one of the paths that is specified within the
// referenced path-selection-group. The next-hop of the packet
// within the routing context should be used to determine between
// multiple paths that are specified within the group.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/path-selection-group"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/path-selection-group"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) PathSelectionGroup() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PathSelectionGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "path-selection-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostDecapNetworkInstance (leaf): This leaf can only be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used for lookup
// on the new header after ../decap-network-instance does decap for
// the matched packet. NI specified by this leaf might contain different
// mixed next hop actions (e.g. next hop IP, decapsulation,
// redirect to another NI, etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) PostDecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PostDecapNetworkInstance (leaf): This leaf can only be set when ../decap-network-instance is set.
// When this leaf is set, the specified NI should be used for lookup
// on the new header after ../decap-network-instance does decap for
// the matched packet. NI specified by this leaf might contain different
// mixed next hop actions (e.g. next hop IP, decapsulation,
// redirect to another NI, etc).
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/post-decap-network-instance"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/*/post-decap-network-instance"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) PostDecapNetworkInstance() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_PostDecapNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "post-decap-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_ActionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/state/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/config/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/config/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifying-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).IdentifyingPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny struct {
	*ygnmi.NodePath
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/*/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IdentifyingPrefix (leaf): An IP prefix that can be used to identify the group of
// GRE endpoints that are being encapsulated towards. Systems
// that require an IP identifier for the tunnel set
// should use this prefix as the next-hop identifier.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifying-prefix"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/*/identifying-prefix"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) IdentifyingPrefix() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_IdentifyingPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifying-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// TargetAny (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) TargetAny() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
//
//	Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Target (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
//
//	Id: string
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) Target(Id string) *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets", "target"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// TargetMap (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) TargetMap() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TargetMap (list): Each target specified within this list should be treated as a
// endpoint to which packets should be GRE encapsulated. Where the
// set of destinations described within a single entry expands to
// more than one destination IP address, packets should be load
// shared across the destination using the local system's ECMP hashing
// mechanisms.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "targets/target"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) TargetMap() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"targets"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGrePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Destination
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-ttl"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).IpTtl
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/state/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/config/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny struct {
	*ygnmi.NodePath
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Destination (leaf): The set of destination addresses that should be encapsulated towards.
// Where a subnet is specified, each address within the subnet should be
// treated as an independent destination for encapsulated traffic. Packets
// should be distributed with ECMP across the set of tunnel destination
// addresses.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/destination"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Destination() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_DestinationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the target.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the target.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/id"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Id() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpTtl (leaf): The TTL that should be specified in the IP header of the GRE packet
// encapsulating the packet matching the rule.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-ttl"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/ip-ttl"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) IpTtl() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_IpTtlPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-ttl"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): The source IP address that should be used when encapsulating
// packets from the local system.
//
//	Defining module:      "openconfig-pf-forwarding-policies"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/action/encapsulate-gre/targets/target/*/source"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Source() *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_TargetPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre_Target, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre).Target
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Action_EncapsulateGre)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:targets"},
			PostRelPath: []string{"openconfig-network-instance:target"},
		},
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv4 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Icmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv4 (container): Top container for ICMPv4 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv4"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Icmpv4() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv4"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv4 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv4 address prefix Set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv4Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv4Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv4Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMPv4 code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv4 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv4/icmpv4/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv4_Icmpv4",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DestinationFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Dscp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "dscp-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).DscpSet
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-limit"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).HopLimit
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Length
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Protocol_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).Protocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-address-prefix-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceAddressPrefixSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/state/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/config/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-flow-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6).SourceFlowLabel
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the destination address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationFlowLabel (leaf): Destination IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/destination-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DestinationFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DestinationFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf): Value of diffserv codepoint.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Dscp() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DscpSet (leaf-list): A list of DSCP values to be matched for incoming packets. AN OR match should
// be performed, such that a packet must match one of the values defined in this
// list. If the field is left empty then any DSCP value matches unless the 'dscp'
// leaf is specified. It is not valid to specify both 'dscp' and 'dscp-set together.'
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/dscp-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/dscp-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) DscpSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_DscpSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "dscp-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopLimit (leaf): The IP packet's hop limit -- known as TTL (in hops) in
// IPv4 packets, and hop limit in IPv6
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-limit"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/hop-limit"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) HopLimit() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_HopLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-limit"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Icmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Icmpv6 (container): Top container for ICMPv6 filtering
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "icmpv6"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Icmpv6() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"icmpv6"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Length (leaf): In the IPv4 header field, this field is known as the Total
// Length.  Total Length is the length of the datagram, measured
// in octets, including internet header and data.
// In the IPv6 header field, this field is known as the Payload
// Length, which is the length of the IPv6 payload, i.e., the rest
// of the packet following the IPv6 header, in octets.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/length"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/length"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Length() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_LengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protocol (leaf): The protocol carried in the IP packet, expressed either
// as its IP protocol number, or by a defined identity.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protocol"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/protocol"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Protocol() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Source IPv6 address prefix.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceAddress() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddressPrefixSet (leaf): Reference to a IPv6 address prefix set
// to match the source address
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-address-prefix-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-address-prefix-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceAddressPrefixSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceAddressPrefixSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-address-prefix-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceFlowLabel (leaf): Source IPv6 Flow label.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-flow-label"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/*/source-flow-label"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) SourceFlowLabel() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_SourceFlowLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-flow-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_CODE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_CODE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "code"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_CODE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Code
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath) State() ygnmi.SingletonQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/state/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny) State() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath) Config() ygnmi.ConfigQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/config/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_Icmpv6Types_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_Icmpv6Types_TYPE](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Icmpv6Types_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny struct {
	*ygnmi.NodePath
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Code (leaf): ICMP code to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/code"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/code"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Code() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_CodePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "code"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): ICMPv6 type to be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/ipv6/icmpv6/*/type"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Type() *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Ipv6_Icmpv6",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).DestinationMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ethertype"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2_Ethertype_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).Ethertype
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/state/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/config/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-mac-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2).SourceMacMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2Path represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2 YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny struct {
	*ygnmi.NodePath
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMac (leaf): Destination IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationMacMask (leaf): Destination IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/destination-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) DestinationMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_DestinationMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ethertype (leaf): Ethertype field to match in Ethernet packets
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ethertype"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/ethertype"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) Ethertype() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_EthertypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ethertype"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMac (leaf): Source IEEE 802 MAC address.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMac() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceMacMask (leaf): Source IEEE 802 MAC address mask.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-mac-mask"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/l2/*/source-mac-mask"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) SourceMacMask() *NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_L2_SourceMacMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-mac-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_L2PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_L2](
		"NetworkInstance_PolicyForwarding_Policy_Rule_L2",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath) State() ygnmi.SingletonQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny) State() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath) Config() ygnmi.ConfigQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewConfigQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_BuiltinDetail] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_BuiltinDetail](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "builtin-detail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_BuiltinDetail, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).BuiltinDetail
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "destination-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DestinationPortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath) State() ygnmi.SingletonQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_DetailMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_DetailMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "detail-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_DetailMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).DetailMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath) State() ygnmi.SingletonQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewSingletonQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny) State() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath) Config() ygnmi.ConfigQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewConfigQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny) Config() ygnmi.WildcardQuery[oc.E_Transport_ExplicitDetailMatchMode] {
	return ygnmi.NewWildcardQuery[oc.E_Transport_ExplicitDetailMatchMode](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-detail-match-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Transport_ExplicitDetailMatchMode, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitDetailMatchMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath) State() ygnmi.SingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewSingletonQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny) State() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath) Config() ygnmi.ConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewConfigQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny) Config() ygnmi.WildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS] {
	return ygnmi.NewWildcardQuery[[]oc.E_PacketMatchTypes_TCP_FLAGS](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "explicit-tcp-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_PacketMatchTypes_TCP_FLAGS, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).ExplicitTcpFlags
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePort_Union, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePort
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/state/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/config/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-port-set"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport).SourcePortSet
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath represents the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport YANG schema element.
type NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny struct {
	*ygnmi.NodePath
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) BuiltinDetail() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BuiltinDetail (leaf): Specifies a built-in (alias) for a match condition that matches
// multiple flags, or specifies particular logic as to the flag matches
// to be implemented. This leaf is only valid when the detail-match-mode
// leaf is BUILTIN.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/builtin-detail"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/builtin-detail"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) BuiltinDetail() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_BuiltinDetailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "builtin-detail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPort (leaf): Destination port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DestinationPort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DestinationPortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationPortSet (leaf): Reference to a port set
// to match the destination port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/destination-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/destination-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DestinationPortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DestinationPortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "destination-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) DetailMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetailMode (leaf): Mode that is used for matching detailed fields at the transport
// layer. When EXPLICIT is specified, the implementation should
// match based on the explicit flags that are specified in the
// corresponding leaf. When BUILTIN is specified, the implementation
// must expand the contents of the corresponding leaf to the flags
// and/or fields that match the pre-defined built-in values.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/detail-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/detail-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) DetailMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_DetailModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "detail-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) ExplicitDetailMatchMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitDetailMatchMode (leaf): Specifies how the contents of the explicit-details-flags list
// are to be treated. ANY implies that any of the flags may match,
// where ALL indicates that all the flags must be matched.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-detail-match-mode"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-detail-match-mode"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) ExplicitDetailMatchMode() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitDetailMatchModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-detail-match-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) ExplicitTcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitTcpFlags (leaf-list): An explicit list of the TCP flags that are to be matched. The
// mechanism for the match is specified by the explicit-detail-match-mode
// leaf.
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/explicit-tcp-flags"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/explicit-tcp-flags"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) ExplicitTcpFlags() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_ExplicitTcpFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "explicit-tcp-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePort (leaf): Source port or range
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) SourcePort() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) SourcePortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourcePortSet (leaf): Reference to a port set
// to match the source port
//
//	Defining module:      "openconfig-packet-match"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-port-set"
//	Path from root:       "/network-instances/network-instance/policy-forwarding/policies/policy/rules/rule/transport/*/source-port-set"
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) SourcePortSet() *NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny {
	ps := &NetworkInstance_PolicyForwarding_Policy_Rule_Transport_SourcePortSetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-port-set"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_PolicyForwarding_Policy_Rule_TransportPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_PolicyForwarding_Policy_Rule_Transport](
		"NetworkInstance_PolicyForwarding_Policy_Rule_Transport",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_DefaultMetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_DefaultMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/default-metric YANG schema element.
type NetworkInstance_Protocol_DefaultMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/default-metric"
func (n *NetworkInstance_Protocol_DefaultMetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).DefaultMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/enabled YANG schema element.
type NetworkInstance_Protocol_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_Protocol_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/enabled"
func (n *NetworkInstance_Protocol_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/enabled"
func (n *NetworkInstance_Protocol_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/enabled"
func (n *NetworkInstance_Protocol_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_IdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_IdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/identifier YANG schema element.
type NetworkInstance_Protocol_IdentifierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_Protocol_IdentifierPath) State() ygnmi.SingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/identifier"
func (n *NetworkInstance_Protocol_IdentifierPathAny) State() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/identifier"
func (n *NetworkInstance_Protocol_IdentifierPath) Config() ygnmi.ConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/identifier"
func (n *NetworkInstance_Protocol_IdentifierPathAny) Config() ygnmi.WildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE](
		"NetworkInstance_Protocol",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_NamePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/name YANG schema element.
type NetworkInstance_Protocol_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/state/name YANG schema element.
type NetworkInstance_Protocol_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/name"
func (n *NetworkInstance_Protocol_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/state/name"
func (n *NetworkInstance_Protocol_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/name"
func (n *NetworkInstance_Protocol_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/config/name"
func (n *NetworkInstance_Protocol_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_ProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ProtocolPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ProtocolPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol YANG schema element.
type NetworkInstance_ProtocolPathMapAny struct {
	*ygnmi.NodePath
}

// AggregateAny (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
func (n *NetworkInstance_ProtocolPath) AggregateAny() *NetworkInstance_Protocol_AggregatePathAny {
	ps := &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// AggregateAny (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
func (n *NetworkInstance_ProtocolPathAny) AggregateAny() *NetworkInstance_Protocol_AggregatePathAny {
	ps := &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Aggregate (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
//
//	Prefix: string
func (n *NetworkInstance_ProtocolPath) Aggregate(Prefix string) *NetworkInstance_Protocol_AggregatePath {
	ps := &NetworkInstance_Protocol_AggregatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Aggregate (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
//
//	Prefix: string
func (n *NetworkInstance_ProtocolPathAny) Aggregate(Prefix string) *NetworkInstance_Protocol_AggregatePathAny {
	ps := &NetworkInstance_Protocol_AggregatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates", "aggregate"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// AggregateMap (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
func (n *NetworkInstance_ProtocolPath) AggregateMap() *NetworkInstance_Protocol_AggregatePathMap {
	ps := &NetworkInstance_Protocol_AggregatePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AggregateMap (list): List of aggregates
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-aggregates/aggregate"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate"
func (n *NetworkInstance_ProtocolPathAny) AggregateMap() *NetworkInstance_Protocol_AggregatePathMapAny {
	ps := &NetworkInstance_Protocol_AggregatePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local-aggregates"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bgp (container): Top-level configuration and state for the BGP router
//
//	Defining module:      "openconfig-bgp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp"
func (n *NetworkInstance_ProtocolPath) Bgp() *netinstbgp.NetworkInstance_Protocol_BgpPath {
	ps := &netinstbgp.NetworkInstance_Protocol_BgpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bgp (container): Top-level configuration and state for the BGP router
//
//	Defining module:      "openconfig-bgp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bgp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/bgp"
func (n *NetworkInstance_ProtocolPathAny) Bgp() *netinstbgp.NetworkInstance_Protocol_BgpPathAny {
	ps := &netinstbgp.NetworkInstance_Protocol_BgpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bgp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// DefaultMetric (leaf): The default metric within the RIB for entries that are
// installed by this protocol instance. This value may
// be overridden by protocol specific configuration options.
// The lower the metric specified the more preferable the RIB
// entry is to be selected for use within the network instance.
// Where multiple entries have the same metric value then these
// equal cost paths should be treated according to the specified
// ECMP path selection behaviour for the instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/default-metric"
func (n *NetworkInstance_ProtocolPath) DefaultMetric() *NetworkInstance_Protocol_DefaultMetricPath {
	ps := &NetworkInstance_Protocol_DefaultMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultMetric (leaf): The default metric within the RIB for entries that are
// installed by this protocol instance. This value may
// be overridden by protocol specific configuration options.
// The lower the metric specified the more preferable the RIB
// entry is to be selected for use within the network instance.
// Where multiple entries have the same metric value then these
// equal cost paths should be treated according to the specified
// ECMP path selection behaviour for the instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/default-metric"
func (n *NetworkInstance_ProtocolPathAny) DefaultMetric() *NetworkInstance_Protocol_DefaultMetricPathAny {
	ps := &NetworkInstance_Protocol_DefaultMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): A boolean value indicating whether the local protocol
// instance is enabled.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/enabled"
func (n *NetworkInstance_ProtocolPath) Enabled() *NetworkInstance_Protocol_EnabledPath {
	ps := &NetworkInstance_Protocol_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): A boolean value indicating whether the local protocol
// instance is enabled.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/enabled"
func (n *NetworkInstance_ProtocolPathAny) Enabled() *NetworkInstance_Protocol_EnabledPathAny {
	ps := &NetworkInstance_Protocol_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Identifier (leaf): The protocol identifier for the instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/identifier"
func (n *NetworkInstance_ProtocolPath) Identifier() *NetworkInstance_Protocol_IdentifierPath {
	ps := &NetworkInstance_Protocol_IdentifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Identifier (leaf): The protocol identifier for the instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/identifier"
func (n *NetworkInstance_ProtocolPathAny) Identifier() *NetworkInstance_Protocol_IdentifierPathAny {
	ps := &NetworkInstance_Protocol_IdentifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Igmp (container): Top-level IGMP configuration and operational state.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp"
func (n *NetworkInstance_ProtocolPath) Igmp() *NetworkInstance_Protocol_IgmpPath {
	ps := &NetworkInstance_Protocol_IgmpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igmp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Igmp (container): Top-level IGMP configuration and operational state.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igmp"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp"
func (n *NetworkInstance_ProtocolPathAny) Igmp() *NetworkInstance_Protocol_IgmpPathAny {
	ps := &NetworkInstance_Protocol_IgmpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igmp"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Isis (container): This container defines top-level ISIS configuration and state
// information.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "isis"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis"
func (n *NetworkInstance_ProtocolPath) Isis() *netinstisis.NetworkInstance_Protocol_IsisPath {
	ps := &netinstisis.NetworkInstance_Protocol_IsisPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Isis (container): This container defines top-level ISIS configuration and state
// information.
//
//	Defining module:      "openconfig-isis"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "isis"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/isis"
func (n *NetworkInstance_ProtocolPathAny) Isis() *netinstisis.NetworkInstance_Protocol_IsisPathAny {
	ps := &netinstisis.NetworkInstance_Protocol_IsisPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"isis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): A unique name for the protocol instance.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support single protocol instances, the
// default value is recommended for consistency and uniqueness
// per protocol instance.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/name"
func (n *NetworkInstance_ProtocolPath) Name() *NetworkInstance_Protocol_NamePath {
	ps := &NetworkInstance_Protocol_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A unique name for the protocol instance.
//
// If the operator does not designate a name for the protocol
// instance (e.g. config), the implementation should use the
// name of 'DEFAULT' (e.g. state).  In addition, for
// implementations that support single protocol instances, the
// default value is recommended for consistency and uniqueness
// per protocol instance.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/*/name"
func (n *NetworkInstance_ProtocolPathAny) Name() *NetworkInstance_Protocol_NamePathAny {
	ps := &NetworkInstance_Protocol_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ospfv2 (container): Top-level configuration and operational state for
// Open Shortest Path First (OSPF) v2
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ospfv2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2"
func (n *NetworkInstance_ProtocolPath) Ospfv2() *NetworkInstance_Protocol_Ospfv2Path {
	ps := &NetworkInstance_Protocol_Ospfv2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospfv2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ospfv2 (container): Top-level configuration and operational state for
// Open Shortest Path First (OSPF) v2
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ospfv2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2"
func (n *NetworkInstance_ProtocolPathAny) Ospfv2() *NetworkInstance_Protocol_Ospfv2PathAny {
	ps := &NetworkInstance_Protocol_Ospfv2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ospfv2"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pcep (container): Top-level PCEP configuration and operational state.
//
//	Defining module:      "openconfig-pcep"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pcep"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pcep"
func (n *NetworkInstance_ProtocolPath) Pcep() *NetworkInstance_Protocol_PcepPath {
	ps := &NetworkInstance_Protocol_PcepPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pcep"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pcep (container): Top-level PCEP configuration and operational state.
//
//	Defining module:      "openconfig-pcep"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pcep"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pcep"
func (n *NetworkInstance_ProtocolPathAny) Pcep() *NetworkInstance_Protocol_PcepPathAny {
	ps := &NetworkInstance_Protocol_PcepPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pcep"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pim (container): Top-level PIM configuration and operational state.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pim"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim"
func (n *NetworkInstance_ProtocolPath) Pim() *NetworkInstance_Protocol_PimPath {
	ps := &NetworkInstance_Protocol_PimPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pim"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Pim (container): Top-level PIM configuration and operational state.
//
//	Defining module:      "openconfig-pim"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pim"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/pim"
func (n *NetworkInstance_ProtocolPathAny) Pim() *NetworkInstance_Protocol_PimPathAny {
	ps := &NetworkInstance_Protocol_PimPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pim"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticAny (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
func (n *NetworkInstance_ProtocolPath) StaticAny() *NetworkInstance_Protocol_StaticPathAny {
	ps := &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// StaticAny (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
func (n *NetworkInstance_ProtocolPathAny) StaticAny() *NetworkInstance_Protocol_StaticPathAny {
	ps := &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Static (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
//
//	Prefix: string
func (n *NetworkInstance_ProtocolPath) Static(Prefix string) *NetworkInstance_Protocol_StaticPath {
	ps := &NetworkInstance_Protocol_StaticPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Static (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
//
//	Prefix: string
func (n *NetworkInstance_ProtocolPathAny) Static(Prefix string) *NetworkInstance_Protocol_StaticPathAny {
	ps := &NetworkInstance_Protocol_StaticPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes", "static"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// StaticMap (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
func (n *NetworkInstance_ProtocolPath) StaticMap() *NetworkInstance_Protocol_StaticPathMap {
	ps := &NetworkInstance_Protocol_StaticPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticMap (list): List of locally configured static routes
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-routes/static"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/static-routes/static"
func (n *NetworkInstance_ProtocolPathAny) StaticMap() *NetworkInstance_Protocol_StaticPathMapAny {
	ps := &NetworkInstance_Protocol_StaticPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-routes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol](
		"NetworkInstance_Protocol",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol](
		"NetworkInstance_Protocol",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:protocols"},
			PostRelPath: []string{"openconfig-network-instance:protocol"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:protocols"},
			PostRelPath: []string{"openconfig-network-instance:protocol"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:protocols"},
			PostRelPath: []string{"openconfig-network-instance:protocol"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ProtocolPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Protocol_Key]*oc.NetworkInstance_Protocol, bool) {
			ret := gs.(*oc.NetworkInstance).Protocol
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:protocols"},
			PostRelPath: []string{"openconfig-network-instance:protocol"},
		},
	)
}

// NetworkInstance_Protocol_Aggregate_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description YANG schema element.
type NetworkInstance_Protocol_Aggregate_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description YANG schema element.
type NetworkInstance_Protocol_Aggregate_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description"
func (n *NetworkInstance_Protocol_Aggregate_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/description"
func (n *NetworkInstance_Protocol_Aggregate_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/description"
func (n *NetworkInstance_Protocol_Aggregate_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/description"
func (n *NetworkInstance_Protocol_Aggregate_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Aggregate_DiscardPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard YANG schema element.
type NetworkInstance_Protocol_Aggregate_DiscardPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_DiscardPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard YANG schema element.
type NetworkInstance_Protocol_Aggregate_DiscardPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard"
func (n *NetworkInstance_Protocol_Aggregate_DiscardPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/discard"
func (n *NetworkInstance_Protocol_Aggregate_DiscardPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/discard"
func (n *NetworkInstance_Protocol_Aggregate_DiscardPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/discard"
func (n *NetworkInstance_Protocol_Aggregate_DiscardPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "discard"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Discard
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Aggregate_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric YANG schema element.
type NetworkInstance_Protocol_Aggregate_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric YANG schema element.
type NetworkInstance_Protocol_Aggregate_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric"
func (n *NetworkInstance_Protocol_Aggregate_MetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/metric"
func (n *NetworkInstance_Protocol_Aggregate_MetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/metric"
func (n *NetworkInstance_Protocol_Aggregate_MetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/metric"
func (n *NetworkInstance_Protocol_Aggregate_MetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Metric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Aggregate_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference YANG schema element.
type NetworkInstance_Protocol_Aggregate_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference YANG schema element.
type NetworkInstance_Protocol_Aggregate_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference"
func (n *NetworkInstance_Protocol_Aggregate_PreferencePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/preference"
func (n *NetworkInstance_Protocol_Aggregate_PreferencePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/preference"
func (n *NetworkInstance_Protocol_Aggregate_PreferencePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/preference"
func (n *NetworkInstance_Protocol_Aggregate_PreferencePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Preference
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Aggregate_PrefixPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix YANG schema element.
type NetworkInstance_Protocol_Aggregate_PrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_PrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix YANG schema element.
type NetworkInstance_Protocol_Aggregate_PrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix"
func (n *NetworkInstance_Protocol_Aggregate_PrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/prefix"
func (n *NetworkInstance_Protocol_Aggregate_PrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/prefix"
func (n *NetworkInstance_Protocol_Aggregate_PrefixPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/prefix"
func (n *NetworkInstance_Protocol_Aggregate_PrefixPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).Prefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Aggregate_SetTagPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Aggregate_SetTagPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Aggregate_SetTagPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag YANG schema element.
type NetworkInstance_Protocol_Aggregate_SetTagPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag"
func (n *NetworkInstance_Protocol_Aggregate_SetTagPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Aggregate_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/state/set-tag"
func (n *NetworkInstance_Protocol_Aggregate_SetTagPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union](
		"NetworkInstance_Protocol_Aggregate",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Aggregate_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag"
func (n *NetworkInstance_Protocol_Aggregate_SetTagPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Aggregate_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/config/set-tag"
func (n *NetworkInstance_Protocol_Aggregate_SetTagPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Aggregate_SetTag_Union](
		"NetworkInstance_Protocol_Aggregate",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-tag"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Aggregate_SetTag_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Aggregate).SetTag
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Aggregate) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_AggregatePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_AggregatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_AggregatePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_AggregatePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate YANG schema element.
type NetworkInstance_Protocol_AggregatePathMapAny struct {
	*ygnmi.NodePath
}

// Description (leaf): An optional textual description for the route.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/description"
func (n *NetworkInstance_Protocol_AggregatePath) Description() *NetworkInstance_Protocol_Aggregate_DescriptionPath {
	ps := &NetworkInstance_Protocol_Aggregate_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): An optional textual description for the route.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/description"
func (n *NetworkInstance_Protocol_AggregatePathAny) Description() *NetworkInstance_Protocol_Aggregate_DescriptionPathAny {
	ps := &NetworkInstance_Protocol_Aggregate_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When true, install the aggregate route with a discard
// next-hop -- traffic destined to the aggregate will be
// discarded with no ICMP message generated.  When false,
// traffic destined to an aggregate address when no
// constituent routes are present will generate an ICMP
// unreachable message.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/discard"
func (n *NetworkInstance_Protocol_AggregatePath) Discard() *NetworkInstance_Protocol_Aggregate_DiscardPath {
	ps := &NetworkInstance_Protocol_Aggregate_DiscardPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Discard (leaf): When true, install the aggregate route with a discard
// next-hop -- traffic destined to the aggregate will be
// discarded with no ICMP message generated.  When false,
// traffic destined to an aggregate address when no
// constituent routes are present will generate an ICMP
// unreachable message.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/discard"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/discard"
func (n *NetworkInstance_Protocol_AggregatePathAny) Discard() *NetworkInstance_Protocol_Aggregate_DiscardPathAny {
	ps := &NetworkInstance_Protocol_Aggregate_DiscardPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "discard"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/metric"
func (n *NetworkInstance_Protocol_AggregatePath) Metric() *NetworkInstance_Protocol_Aggregate_MetricPath {
	ps := &NetworkInstance_Protocol_Aggregate_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): A metric (or cost) which is utilized to specify the order of
// selection of the next-hop entry.  The lower the metric, the more
// preferable the prefix entry is.  When this value is not
// specified, the metric is inherited from the default metric of
// the implementation for static route entries.  When multiple
// next-hops are specified for a static route, the metric is
// utilized to determine which of the next-hops to be installed in
// the RIB.  When multiple next-hops have the same metric (be it
// specified, or simply the default) then these next-hops should
// all be installed in the RIB.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/metric"
func (n *NetworkInstance_Protocol_AggregatePathAny) Metric() *NetworkInstance_Protocol_Aggregate_MetricPathAny {
	ps := &NetworkInstance_Protocol_Aggregate_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/preference"
func (n *NetworkInstance_Protocol_AggregatePath) Preference() *NetworkInstance_Protocol_Aggregate_PreferencePath {
	ps := &NetworkInstance_Protocol_Aggregate_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Administrative Distance (preference) of the entry.  The
// preference defines the order of selection when multiple
// sources (protocols, static, etc.) contribute to the same
// prefix entry.  The lower the preference, the more preferable the
// prefix is.  When this value is not specified, the preference is
// inherited from the default preference of the implementation for
// static routes.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/preference"
func (n *NetworkInstance_Protocol_AggregatePathAny) Preference() *NetworkInstance_Protocol_Aggregate_PreferencePathAny {
	ps := &NetworkInstance_Protocol_Aggregate_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): Aggregate prefix to be advertised
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/prefix"
func (n *NetworkInstance_Protocol_AggregatePath) Prefix() *NetworkInstance_Protocol_Aggregate_PrefixPath {
	ps := &NetworkInstance_Protocol_Aggregate_PrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Prefix (leaf): Aggregate prefix to be advertised
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/prefix"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/prefix"
func (n *NetworkInstance_Protocol_AggregatePathAny) Prefix() *NetworkInstance_Protocol_Aggregate_PrefixPathAny {
	ps := &NetworkInstance_Protocol_Aggregate_PrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/set-tag"
func (n *NetworkInstance_Protocol_AggregatePath) SetTag() *NetworkInstance_Protocol_Aggregate_SetTagPath {
	ps := &NetworkInstance_Protocol_Aggregate_SetTagPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetTag (leaf): Set a generic tag value on the route. This tag can be
// used for filtering routes that are distributed to other
// routing protocols.
//
//	Defining module:      "openconfig-local-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-tag"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/local-aggregates/aggregate/*/set-tag"
func (n *NetworkInstance_Protocol_AggregatePathAny) SetTag() *NetworkInstance_Protocol_Aggregate_SetTagPathAny {
	ps := &NetworkInstance_Protocol_Aggregate_SetTagPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-tag"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol_Aggregate",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol_Aggregate",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol_Aggregate",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol_Aggregate",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Aggregate, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Aggregate
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-aggregates"},
			PostRelPath: []string{"openconfig-network-instance:aggregate"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Aggregate, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Aggregate
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-aggregates"},
			PostRelPath: []string{"openconfig-network-instance:aggregate"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Aggregate, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Aggregate
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-aggregates"},
			PostRelPath: []string{"openconfig-network-instance:aggregate"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_AggregatePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Aggregate](
		"NetworkInstance_Protocol",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Aggregate, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol).Aggregate
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:local-aggregates"},
			PostRelPath: []string{"openconfig-network-instance:aggregate"},
		},
	)
}

// NetworkInstance_Protocol_IgmpPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp YANG schema element.
type NetworkInstance_Protocol_IgmpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_IgmpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp YANG schema element.
type NetworkInstance_Protocol_IgmpPathAny struct {
	*ygnmi.NodePath
}

// Global (container): Global IGMP configuration and operational state.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global"
func (n *NetworkInstance_Protocol_IgmpPath) Global() *NetworkInstance_Protocol_Igmp_GlobalPath {
	ps := &NetworkInstance_Protocol_Igmp_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): Global IGMP configuration and operational state.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global"
func (n *NetworkInstance_Protocol_IgmpPathAny) Global() *NetworkInstance_Protocol_Igmp_GlobalPathAny {
	ps := &NetworkInstance_Protocol_Igmp_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
func (n *NetworkInstance_Protocol_IgmpPath) InterfaceAny() *NetworkInstance_Protocol_Igmp_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
func (n *NetworkInstance_Protocol_IgmpPathAny) InterfaceAny() *NetworkInstance_Protocol_Igmp_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Protocol_IgmpPath) Interface(InterfaceId string) *NetworkInstance_Protocol_Igmp_InterfacePath {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Protocol_IgmpPathAny) Interface(InterfaceId string) *NetworkInstance_Protocol_Igmp_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
func (n *NetworkInstance_Protocol_IgmpPath) InterfaceMap() *NetworkInstance_Protocol_Igmp_InterfacePathMap {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): This container defines interface IGMP configuration and
// state information.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface"
func (n *NetworkInstance_Protocol_IgmpPathAny) InterfaceMap() *NetworkInstance_Protocol_Igmp_InterfacePathMapAny {
	ps := &NetworkInstance_Protocol_Igmp_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IgmpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp](
		"NetworkInstance_Protocol_Igmp",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IgmpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp](
		"NetworkInstance_Protocol_Igmp",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IgmpPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp](
		"NetworkInstance_Protocol_Igmp",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_IgmpPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp](
		"NetworkInstance_Protocol_Igmp",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global YANG schema element.
type NetworkInstance_Protocol_Igmp_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global YANG schema element.
type NetworkInstance_Protocol_Igmp_GlobalPathAny struct {
	*ygnmi.NodePath
}

// Ssm (container): Source specific multicast (SSM).
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ssm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm"
func (n *NetworkInstance_Protocol_Igmp_GlobalPath) Ssm() *NetworkInstance_Protocol_Igmp_Global_SsmPath {
	ps := &NetworkInstance_Protocol_Igmp_Global_SsmPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ssm (container): Source specific multicast (SSM).
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ssm"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm"
func (n *NetworkInstance_Protocol_Igmp_GlobalPathAny) Ssm() *NetworkInstance_Protocol_Igmp_Global_SsmPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_SsmPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ssm"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global](
		"NetworkInstance_Protocol_Igmp_Global",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global](
		"NetworkInstance_Protocol_Igmp_Global",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global](
		"NetworkInstance_Protocol_Igmp_Global",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global](
		"NetworkInstance_Protocol_Igmp_Global",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Global_SsmPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_SsmPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Global_SsmPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_SsmPathAny struct {
	*ygnmi.NodePath
}

// MappingAny (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPath) MappingAny() *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings", "mapping"},
			map[string]interface{}{"source": "*"},
			n,
		),
	}
	return ps
}

// MappingAny (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPathAny) MappingAny() *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings", "mapping"},
			map[string]interface{}{"source": "*"},
			n,
		),
	}
	return ps
}

// Mapping (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
//
//	Source: string
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPath) Mapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings", "mapping"},
			map[string]interface{}{"source": Source},
			n,
		),
	}
	return ps
}

// Mapping (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
//
//	Source: string
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPathAny) Mapping(Source string) *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings", "mapping"},
			map[string]interface{}{"source": Source},
			n,
		),
	}
	return ps
}

// MappingMap (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPath) MappingMap() *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MappingMap (list): A Source Specific Multicast (SSM) mapping. This allows
// IGMP v2 hosts to be able to join in SSM environments
// by translating IGMP v2 reports into IGMP v3 reports.
// The request in an IGMP v2 join is sent toward the source
// address found by matching the multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mappings/mapping"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping"
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPathAny) MappingMap() *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mappings"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_SsmPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/config/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/config/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/ssm-ranges YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/state/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/config/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ssm-ranges"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping).SsmRanges
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping YANG schema element.
type NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny struct {
	*ygnmi.NodePath
}

// Source (leaf): Multicast source address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/*/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath) Source() *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): Multicast source address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/*/source"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny) Source() *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/*/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath) SsmRanges() *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SsmRanges (leaf): List of accepted source specific multicast (SSM) address
// ranges.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ssm-ranges"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/global/ssm/mappings/mapping/*/ssm-ranges"
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny) SsmRanges() *NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping_SsmRangesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ssm-ranges"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm).Mapping
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mappings"},
			PostRelPath: []string{"openconfig-network-instance:mapping"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm).Mapping
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mappings"},
			PostRelPath: []string{"openconfig-network-instance:mapping"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm).Mapping
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mappings"},
			PostRelPath: []string{"openconfig-network-instance:mapping"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Global_Ssm_MappingPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping](
		"NetworkInstance_Protocol_Igmp_Global_Ssm",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Global_Ssm_Mapping, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Global_Ssm).Mapping
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Global_Ssm) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mappings"},
			PostRelPath: []string{"openconfig-network-instance:mapping"},
		},
	)
}

// NetworkInstance_Protocol_Igmp_Interface_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/enabled YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Igmp_Interface_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/enabled"
func (n *NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Igmp_Interface_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/enabled"
func (n *NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/filter-prefixes YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/filter-prefixes YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).FilterPrefixes
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "filter-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).FilterPrefixes
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filter-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).FilterPrefixes
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "filter-prefixes"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).FilterPrefixes
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "query-expires"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryExpires
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "query-expires"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryExpires
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-interval YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-interval YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-interval"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "query-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-interval"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "query-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/query-interval"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "query-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/query-interval"
func (n *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "query-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).QueryInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_VersionPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/version YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_VersionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_VersionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/version YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_VersionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/version"
func (n *NetworkInstance_Protocol_Igmp_Interface_VersionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/version"
func (n *NetworkInstance_Protocol_Igmp_Interface_VersionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/version"
func (n *NetworkInstance_Protocol_Igmp_Interface_VersionPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/config/version"
func (n *NetworkInstance_Protocol_Igmp_Interface_VersionPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "version"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Version
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Counters (container): Counters avaiable on a per interface bases for IGMP.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) Counters() *NetworkInstance_Protocol_Igmp_Interface_CountersPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Counters avaiable on a per interface bases for IGMP.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "counters"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) Counters() *NetworkInstance_Protocol_Igmp_Interface_CountersPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) Enabled() *NetworkInstance_Protocol_Igmp_Interface_EnabledPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): When set to true, the functionality within which this
// leaf is defined is enabled, when set to false it is
// explicitly disabled.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/enabled"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) Enabled() *NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FilterPrefixes (leaf): List used to filter joins.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) FilterPrefixes() *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FilterPrefixes (leaf): List used to filter joins.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/filter-prefixes"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/filter-prefixes"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) FilterPrefixes() *NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_FilterPrefixesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "filter-prefixes"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// GroupAny (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) GroupAny() *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups", "group"},
			map[string]interface{}{"group": "*"},
			n,
		),
	}
	return ps
}

// GroupAny (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) GroupAny() *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups", "group"},
			map[string]interface{}{"group": "*"},
			n,
		),
	}
	return ps
}

// Group (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
//
//	Group: string
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) Group(Group string) *NetworkInstance_Protocol_Igmp_Interface_GroupPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups", "group"},
			map[string]interface{}{"group": Group},
			n,
		),
	}
	return ps
}

// Group (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
//
//	Group: string
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) Group(Group string) *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups", "group"},
			map[string]interface{}{"group": Group},
			n,
		),
	}
	return ps
}

// GroupMap (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) GroupMap() *NetworkInstance_Protocol_Igmp_Interface_GroupPathMap {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// GroupMap (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "membership-groups/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) GroupMap() *NetworkInstance_Protocol_Igmp_Interface_GroupPathMapAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_GroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"membership-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Reference to an interface on which IGMP is enabled.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) InterfaceId() *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Reference to an interface on which IGMP is enabled.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) InterfaceId() *NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) InterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) InterfaceRef() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// QueryExpires (leaf): This timestamp indicates the time that the next query is sent
// expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) QueryExpires() *NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "query-expires"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueryExpires (leaf): This timestamp indicates the time that the next query is sent
// expressed relative to the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/query-expires"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/state/query-expires"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) QueryExpires() *NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_QueryExpiresPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "query-expires"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueryInterval (leaf): Interval at which the router sends the IGMP membership
// queries.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/query-interval"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) QueryInterval() *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "query-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// QueryInterval (leaf): Interval at which the router sends the IGMP membership
// queries.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/query-interval"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/query-interval"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) QueryInterval() *NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_QueryIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "query-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticGroupsAny (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) StaticGroupsAny() *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups", "static-groups"},
			map[string]interface{}{"static-group": "*"},
			n,
		),
	}
	return ps
}

// StaticGroupsAny (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) StaticGroupsAny() *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups", "static-groups"},
			map[string]interface{}{"static-group": "*"},
			n,
		),
	}
	return ps
}

// StaticGroups (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
//
//	StaticGroup: string
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) StaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups", "static-groups"},
			map[string]interface{}{"static-group": StaticGroup},
			n,
		),
	}
	return ps
}

// StaticGroups (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
//
//	StaticGroup: string
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) StaticGroups(StaticGroup string) *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups", "static-groups"},
			map[string]interface{}{"static-group": StaticGroup},
			n,
		),
	}
	return ps
}

// StaticGroupsMap (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) StaticGroupsMap() *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticGroupsMap (list): Multicast group membership.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-membership-groups/static-groups"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) StaticGroupsMap() *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-membership-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Version (leaf): IGMP Version.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/version"
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) Version() *NetworkInstance_Protocol_Igmp_Interface_VersionPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_VersionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Version (leaf): IGMP Version.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/version"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/*/version"
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) Version() *NetworkInstance_Protocol_Igmp_Interface_VersionPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_VersionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "version"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface](
		"NetworkInstance_Protocol_Igmp",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Protocol_Igmp_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// Queries (container): IGMP membership queries.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "queries"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries"
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPath) Queries() *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"queries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Queries (container): IGMP membership queries.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "queries"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries"
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPathAny) Queries() *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"queries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reports (container): Number of IGMP membership reports received.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reports"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports"
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPath) Reports() *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reports"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Reports (container): Number of IGMP membership reports received.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reports"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports"
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPathAny) Reports() *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reports"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters](
		"NetworkInstance_Protocol_Igmp_Interface_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters](
		"NetworkInstance_Protocol_Igmp_Interface_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters](
		"NetworkInstance_Protocol_Igmp_Interface_Counters",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_CountersPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters](
		"NetworkInstance_Protocol_Igmp_Interface_Counters",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny struct {
	*ygnmi.NodePath
}

// Received (container): Number of IGMP membership queries received.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath) Received() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Received (container): Number of IGMP membership queries received.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny) Received() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Sent (container): Number of IGMP membership queries sent.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath) Sent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Sent (container): Number of IGMP membership queries sent.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sent"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny) Sent() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sent"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_QueriesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny struct {
	*ygnmi.NodePath
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/received/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received_V3PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_ReceivedPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Received",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny struct {
	*ygnmi.NodePath
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/queries/sent/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent_V3PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_SentPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Queries_Sent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v1"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V1
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v2"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V2
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3Path struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3 YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3PathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3Path) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3PathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "v3"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports).V3
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny struct {
	*ygnmi.NodePath
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V1 (leaf): IGMP v1.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v1"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v1"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny) V1() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V1PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v1"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V2 (leaf): IGMP v2.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v2"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v2"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny) V2() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V2PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v2"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3Path {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3Path{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// V3 (leaf): IGMP v3.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/v3"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/counters/reports/state/v3"
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny) V3() *NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3PathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Counters_Reports_V3PathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "v3"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_Counters_ReportsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Counters_Reports](
		"NetworkInstance_Protocol_Igmp_Interface_Counters_Reports",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/group"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/group"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "group"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "group"
//	Path from root:       ""
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Group
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reporter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reporter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Reporter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reporter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reporter"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Reporter
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_Group_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_Group_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_Group_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_Group_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_Group).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_Group) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_GroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_GroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_GroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_GroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_GroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_GroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_GroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_GroupPathMapAny struct {
	*ygnmi.NodePath
}

// Group (leaf): Multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/*/group"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPath) Group() *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_GroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Group (leaf): Multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/*/group"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny) Group() *NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_GroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reporter (leaf): Address of the last reporter.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reporter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPath) Reporter() *NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reporter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Reporter (leaf): Address of the last reporter.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reporter"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/reporter"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny) Reporter() *NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_ReporterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reporter"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPath) Source() *NetworkInstance_Protocol_Igmp_Interface_Group_SourcePath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/membership-groups/group/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny) Source() *NetworkInstance_Protocol_Igmp_Interface_Group_SourcePathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_Group_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Group] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Group](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Group] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_Group](
		"NetworkInstance_Protocol_Igmp_Interface_Group",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_GroupPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_Group, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).Group
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:group"},
		},
	)
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath) Interface() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_InterfaceRef](
		"NetworkInstance_Protocol_Igmp_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/source YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/config/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/config/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/static-group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/static-group YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).StaticGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/state/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "static-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).StaticGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/config/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).StaticGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/config/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "static-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups).StaticGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups YANG schema element.
type NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny struct {
	*ygnmi.NodePath
}

// Source (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/*/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath) Source() *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): Source address of multicast.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/*/source"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny) Source() *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroups_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticGroup (leaf): Multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/*/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath) StaticGroup() *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// StaticGroup (leaf): Multicast address.
//
//	Defining module:      "openconfig-igmp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/static-group"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/igmp/interfaces/interface/static-membership-groups/static-groups/*/static-group"
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny) StaticGroup() *NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny {
	ps := &NetworkInstance_Protocol_Igmp_Interface_StaticGroups_StaticGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "static-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface_StaticGroups",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).StaticGroups
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:static-groups"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).StaticGroups
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:static-groups"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).StaticGroups
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:static-groups"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Igmp_Interface_StaticGroupsPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups](
		"NetworkInstance_Protocol_Igmp_Interface",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Protocol_Igmp_Interface_StaticGroups, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Igmp_Interface).StaticGroups
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Igmp_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:static-membership-groups"},
			PostRelPath: []string{"openconfig-network-instance:static-groups"},
		},
	)
}

// NetworkInstance_Protocol_Ospfv2Path represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2 YANG schema element.
type NetworkInstance_Protocol_Ospfv2Path struct {
	*ygnmi.NodePath
}

// NetworkInstance_Protocol_Ospfv2PathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2 YANG schema element.
type NetworkInstance_Protocol_Ospfv2PathAny struct {
	*ygnmi.NodePath
}

// AreaAny (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
func (n *NetworkInstance_Protocol_Ospfv2Path) AreaAny() *NetworkInstance_Protocol_Ospfv2_AreaPathAny {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas", "area"},
			map[string]interface{}{"identifier": "*"},
			n,
		),
	}
	return ps
}

// AreaAny (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
func (n *NetworkInstance_Protocol_Ospfv2PathAny) AreaAny() *NetworkInstance_Protocol_Ospfv2_AreaPathAny {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas", "area"},
			map[string]interface{}{"identifier": "*"},
			n,
		),
	}
	return ps
}

// Area (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
//
//	Identifier: [oc.UnionUint32, oc.UnionString]
func (n *NetworkInstance_Protocol_Ospfv2Path) Area(Identifier oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) *NetworkInstance_Protocol_Ospfv2_AreaPath {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas", "area"},
			map[string]interface{}{"identifier": Identifier},
			n,
		),
	}
	return ps
}

// Area (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
//
//	Identifier: [oc.UnionUint32, oc.UnionString]
func (n *NetworkInstance_Protocol_Ospfv2PathAny) Area(Identifier oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union) *NetworkInstance_Protocol_Ospfv2_AreaPathAny {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas", "area"},
			map[string]interface{}{"identifier": Identifier},
			n,
		),
	}
	return ps
}

// AreaMap (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
func (n *NetworkInstance_Protocol_Ospfv2Path) AreaMap() *NetworkInstance_Protocol_Ospfv2_AreaPathMap {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AreaMap (list): The OSPFv2 areas within which the local system exists
//
//	Defining module:      "openconfig-ospfv2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "areas/area"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area"
func (n *NetworkInstance_Protocol_Ospfv2PathAny) AreaMap() *NetworkInstance_Protocol_Ospfv2_AreaPathMapAny {
	ps := &NetworkInstance_Protocol_Ospfv2_AreaPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"areas"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): Configuration and operational state parameters for settings
// that are global to the OSPFv2 instance
//
//	Defining module:      "openconfig-ospfv2-global"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/global"
func (n *NetworkInstance_Protocol_Ospfv2Path) Global() *NetworkInstance_Protocol_Ospfv2_GlobalPath {
	ps := &NetworkInstance_Protocol_Ospfv2_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): Configuration and operational state parameters for settings
// that are global to the OSPFv2 instance
//
//	Defining module:      "openconfig-ospfv2-global"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/global"
func (n *NetworkInstance_Protocol_Ospfv2PathAny) Global() *NetworkInstance_Protocol_Ospfv2_GlobalPathAny {
	ps := &NetworkInstance_Protocol_Ospfv2_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Ospfv2Path) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Protocol_Ospfv2] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Protocol_Ospfv2](
		"NetworkInstance_Protocol_Ospfv2",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Ospfv2PathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Ospfv2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Ospfv2](
		"NetworkInstance_Protocol_Ospfv2",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Ospfv2Path) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Protocol_Ospfv2] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Protocol_Ospfv2](
		"NetworkInstance_Protocol_Ospfv2",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Protocol_Ospfv2PathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Protocol_Ospfv2] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Protocol_Ospfv2](
		"NetworkInstance_Protocol_Ospfv2",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Protocol_Ospfv2_Area_IdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state/identifier YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_IdentifierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Protocol_Ospfv2_Area_IdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state/identifier YANG schema element.
type NetworkInstance_Protocol_Ospfv2_Area_IdentifierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospfv2-area"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state/identifier"
func (n *NetworkInstance_Protocol_Ospfv2_Area_IdentifierPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union](
		"NetworkInstance_Protocol_Ospfv2_Area",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Ospfv2_Area).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Ospfv2_Area) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospfv2-area"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/state/identifier"
func (n *NetworkInstance_Protocol_Ospfv2_Area_IdentifierPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union](
		"NetworkInstance_Protocol_Ospfv2_Area",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Ospfv2_Area).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Ospfv2_Area) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospfv2-area"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/config/identifier"
func (n *NetworkInstance_Protocol_Ospfv2_Area_IdentifierPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union](
		"NetworkInstance_Protocol_Ospfv2_Area",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Ospfv2_Area).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Ospfv2_Area) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-ospfv2-area"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/identifier"
//	Path from root:       "/network-instances/network-instance/protocols/protocol/ospfv2/areas/area/config/identifier"
func (n *NetworkInstance_Protocol_Ospfv2_Area_IdentifierPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union](
		"NetworkInstance_Protocol_Ospfv2_Area",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Protocol_Ospfv2_Area_Identifier_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Protocol_Ospfv2_Area).Identifier
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Protocol_Ospfv2_Area) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}
