/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.8.7: (ygot: v0.29.11)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).OutSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).PathTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"path-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).PathTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).RateLimitedMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).RateLimitedMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reservation-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"reservation-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).ReservationTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reservation-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"reservation-timeouts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters).ReservationTimeouts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny struct {
	*ygnmi.NodePath
}

// Errors (container): Error counters associated with the global RSVP-TE
// instance.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "errors"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): Error counters associated with the global RSVP-TE
// instance.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "errors"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InAckMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHelloMessages (leaf): Number of received RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHelloMessages (leaf): Number of received RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InHelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathMessages (leaf): Number of received RSVP Path messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathMessages (leaf): Number of received RSVP Path messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InPathTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InReservationTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_InSrefreshMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutAckMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutHelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutPathTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutReservationTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_OutSrefreshMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathTimeouts (leaf): The number of Path State Blocks (PSBs) that
// have been timed out by the local system.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) PathTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PathTimeouts (leaf): The number of Path State Blocks (PSBs) that
// have been timed out by the local system.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "path-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/path-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) PathTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_PathTimeoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"path-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_RateLimitedMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservationTimeouts (leaf): The number of Reservation State Blocks (RSBs) that
// have been timed out by the local system.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reservation-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) ReservationTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reservation-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservationTimeouts (leaf): The number of Reservation State Blocks (RSBs) that
// have been timed out by the local system.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reservation-timeouts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/reservation-timeouts"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) ReservationTimeouts() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ReservationTimeoutsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reservation-timeouts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).AuthenticationFail
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).AuthenticationFail
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadChecksum
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadChecksum
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadPacketFormat
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadPacketFormat
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadPacketLength
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).BadPacketLength
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-of-order"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).OutOfOrder
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-of-order"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).OutOfOrder
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).ReceivedNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).ReceivedNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).TransmitFailure
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).TransmitFailure
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).TransmitQueueFull
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).TransmitQueueFull
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).UnknownAck
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).UnknownAck
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).UnknownNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors).UnknownNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_AuthenticationFailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadChecksumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketFormatPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_BadPacketLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_OutOfOrderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_ReceivedNackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_TransmitQueueFullPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownAckPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors_UnknownNackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_ErrorsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Counters_Errors",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "recovery-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RecoveryTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/state/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/config/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "restart-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart).RestartTime
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enables graceful restart on the node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables graceful restart on the node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecoveryTime (leaf): RSVP state recovery time
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recovery-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecoveryTime (leaf): RSVP state recovery time
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/recovery-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/recovery-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) RecoveryTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RecoveryTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "recovery-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Graceful restart time (seconds).
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) RestartTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RestartTime (leaf): Graceful restart time (seconds).
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/restart-time"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/graceful-restart/*/restart-time"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) RestartTime() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart_RestartTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "restart-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestartPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_GracefulRestart",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/config/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/config/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny struct {
	*ygnmi.NodePath
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/*/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/hellos/*/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos_RefreshReductionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_HellosPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_Hellos",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption-timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).SoftPreemptionTimeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/state/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption-timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).SoftPreemptionTimeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/config/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption-timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).SoftPreemptionTimeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/config/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption-timeout"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption).SoftPreemptionTimeout
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny struct {
	*ygnmi.NodePath
}

// Enable (leaf): Enables soft preemption on a node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables soft preemption on a node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemptionTimeout (leaf): Timeout value for soft preemption to revert
// to hard preemption. The default timeout for
// soft-preemption is 30 seconds - after which
// the local system reverts to hard pre-emption.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/*/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) SoftPreemptionTimeout() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption-timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemptionTimeout (leaf): Timeout value for soft preemption to revert
// to hard preemption. The default timeout for
// soft-preemption is 30 seconds - after which
// the local system reverts to hard pre-emption.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption-timeout"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/global/soft-preemption/*/soft-preemption-timeout"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) SoftPreemptionTimeout() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption_SoftPreemptionTimeoutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption-timeout"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemptionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Global_SoftPreemption",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).MaxLinkBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).MaxLinkBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Authentication (container): Configuration and state parameters relating to RSVP
// authentication as per RFC2747
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Authentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Authentication (container): Configuration and state parameters relating to RSVP
// authentication as per RFC2747
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Authentication() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BandwidthReservationAny (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) BandwidthReservationAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
	return ps
}

// BandwidthReservationAny (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) BandwidthReservationAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": "*"},
			n,
		),
	}
	return ps
}

// BandwidthReservation (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
//
//	Priority: [oc.UnionUint8, oc.E_BandwidthReservation_Priority]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) BandwidthReservation(Priority oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
	return ps
}

// BandwidthReservation (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
//
//	Priority: [oc.UnionUint8, oc.E_BandwidthReservation_Priority]
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) BandwidthReservation(Priority oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations", "bandwidth-reservation"},
			map[string]interface{}{"priority": Priority},
			n,
		),
	}
	return ps
}

// BandwidthReservationMap (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) BandwidthReservationMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BandwidthReservationMap (list): Available and reserved bandwidth by priority on
// the interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth-reservations/bandwidth-reservation"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) BandwidthReservationMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth-reservations"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Interface specific RSVP statistics and counters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): Interface specific RSVP statistics and counters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Counters() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hellos (container): Top level container for RSVP hello parameters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hellos"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Hellos (container): Top level container for RSVP hello parameters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "hellos"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Hellos() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"hellos"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Identifier for the interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaxLinkBandwidth (leaf): The maximum link bandwidth expressed in kilobits
// per second. This value should be the same (other than
// the units) as the value that is advertised into the
// IGP traffic engineering database.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) MaxLinkBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxLinkBandwidth (leaf): The maximum link bandwidth expressed in kilobits
// per second. This value should be the same (other than
// the units) as the value that is advertised into the
// IGP traffic engineering database.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-link-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/max-link-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) MaxLinkBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_MaxLinkBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "max-link-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Protection (container): link-protection (NHOP) related configuration
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protection"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Protection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"protection"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Protection (container): link-protection (NHOP) related configuration
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protection"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Protection() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protection"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Subscription (container): Bandwidth percentage reservable by RSVP
// on an interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"subscription"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Subscription (container): Bandwidth percentage reservable by RSVP
// on an interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"subscription"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-key"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationKey
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_RSVP_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "authentication-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_RSVP_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_RSVP_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_RSVP_AUTH_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "authentication-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_RSVP_AUTH_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).AuthenticationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/state/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/config/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationKey (leaf): Authenticate RSVP signaling messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationKey (leaf): Authenticate RSVP signaling messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-key"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/authentication-key"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) AuthenticationKey() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationKeyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-key"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationType (leaf): RSVP message authentication algorithm type
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) AuthenticationType() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationType (leaf): RSVP message authentication algorithm type
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/authentication-type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/authentication-type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) AuthenticationType() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_AuthenticationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "authentication-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables RSVP authentication on the node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enables RSVP authentication on the node.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/authentication/*/enable"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) Enable() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_AuthenticationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Authentication",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-reservations-count"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-reservations-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).ActiveReservationsCount
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-reservations-count"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active-reservations-count"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).ActiveReservationsCount
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/available-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).AvailableBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/available-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "available-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).AvailableBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/highwater-mark"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highwater-mark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).HighwaterMark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/highwater-mark"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "highwater-mark"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).HighwaterMark
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/priority"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "priority"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "priority"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).Priority
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reserved-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).ReservedBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reserved-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation).ReservedBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMapAny struct {
	*ygnmi.NodePath
}

// ActiveReservationsCount (leaf): Number of active RSVP reservations in the associated
// priority, or the sum of all reservations when the priority
// level is set to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-reservations-count"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) ActiveReservationsCount() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-reservations-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ActiveReservationsCount (leaf): Number of active RSVP reservations in the associated
// priority, or the sum of all reservations when the priority
// level is set to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active-reservations-count"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/active-reservations-count"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) ActiveReservationsCount() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ActiveReservationsCountPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active-reservations-count"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvailableBandwidth (leaf): Bandwidth currently available with the priority level,
// or for the entire interface when the priority is set to
// ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/available-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) AvailableBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AvailableBandwidth (leaf): Bandwidth currently available with the priority level,
// or for the entire interface when the priority is set to
// ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/available-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/available-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) AvailableBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_AvailableBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "available-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighwaterMark (leaf): Maximum bandwidth reserved on the interface within the
// priority, or across all priorities in the case that the
// priority level is set to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/highwater-mark"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) HighwaterMark() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highwater-mark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HighwaterMark (leaf): Maximum bandwidth reserved on the interface within the
// priority, or across all priorities in the case that the
// priority level is set to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/highwater-mark"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/highwater-mark"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) HighwaterMark() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_HighwaterMarkPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "highwater-mark"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): RSVP priority level for LSPs traversing the interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/*/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) Priority() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Priority (leaf): RSVP priority level for LSPs traversing the interface
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/priority"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/*/priority"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) Priority() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_PriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservedBandwidth (leaf): Bandwidth currently reserved within the priority level,
// or the sum of all priority levels when the keyword is set
// to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reserved-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) ReservedBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservedBandwidth (leaf): Bandwidth currently reserved within the priority level,
// or the sum of all priority levels when the keyword is set
// to ALL
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reserved-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/bandwidth-reservations/bandwidth-reservation/state/reserved-bandwidth"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) ReservedBandwidth() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_ReservedBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reserved-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).BandwidthReservation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:bandwidth-reservations"},
			PostRelPath: []string{"openconfig-network-instance:bandwidth-reservation"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservationPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation_Priority_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_BandwidthReservation, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface).BandwidthReservation
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:bandwidth-reservations"},
			PostRelPath: []string{"openconfig-network-instance:bandwidth-reservation"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InAckMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InAckMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InHelloMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InHelloMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).InSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutAckMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutAckMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutHelloMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutHelloMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutPathTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationErrorMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutReservationTearMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).OutSrefreshMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).RateLimitedMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters).RateLimitedMessages
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny struct {
	*ygnmi.NodePath
}

// Errors (container): Interface specific RSVP error counters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "errors"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Errors (container): Interface specific RSVP error counters
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "errors"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) Errors() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"errors"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InAckMessages (leaf): Number of received RSVP refresh reduction ack
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InAckMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHelloMessages (leaf): Number of received RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InHelloMessages (leaf): Number of received RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InHelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathErrorMessages (leaf): Number of received RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathMessages (leaf): Number of received RSVP Path messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathMessages (leaf): Number of received RSVP Path messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPathTearMessages (leaf): Number of received RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InPathTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationErrorMessages (leaf): Number of received RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationMessages (leaf): Number of received RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InReservationTearMessages (leaf): Number of received RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InReservationTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InSrefreshMessages (leaf): Number of received RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "in-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/in-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) InSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_InSrefreshMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"in-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutAckMessages (leaf): Number of sent RSVP refresh reduction ack messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-ack-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-ack-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutAckMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutAckMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-ack-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutHelloMessages (leaf): Number of sent RSVP hello messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-hello-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-hello-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutHelloMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutHelloMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-hello-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathErrorMessages (leaf): Number of sent RSVP Path Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathMessages (leaf): Number of sent RSVP PATH messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPathTearMessages (leaf): Number of sent RSVP Path Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-path-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-path-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutPathTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutPathTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-path-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationErrorMessages (leaf): Number of sent RSVP Resv Error messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-error-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-error-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationErrorMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationErrorMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-error-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationMessages (leaf): Number of sent RSVP Resv messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutReservationTearMessages (leaf): Number of sent RSVP Resv Tear messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-reservation-tear-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-reservation-tear-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutReservationTearMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutReservationTearMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-reservation-tear-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutSrefreshMessages (leaf): Number of sent RSVP summary refresh messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-srefresh-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/out-srefresh-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) OutSrefreshMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_OutSrefreshMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-srefresh-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RateLimitedMessages (leaf): RSVP messages dropped due to rate limiting
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate-limited-messages"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/rate-limited-messages"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) RateLimitedMessages() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_RateLimitedMessagesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate-limited-messages"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).AuthenticationFail
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).AuthenticationFail
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadChecksum
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadChecksum
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadPacketFormat
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadPacketFormat
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadPacketLength
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).BadPacketLength
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-of-order"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).OutOfOrder
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"out-of-order"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).OutOfOrder
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).ReceivedNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"received-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).ReceivedNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).TransmitFailure
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).TransmitFailure
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).TransmitQueueFull
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).TransmitQueueFull
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).UnknownAck
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).UnknownAck
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).UnknownNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors).UnknownNack
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny struct {
	*ygnmi.NodePath
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AuthenticationFail (leaf): The number of packets received that have failed RSVP-TE
// authentication checks in the specified context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "authentication-fail"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/authentication-fail"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) AuthenticationFail() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_AuthenticationFailPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"authentication-fail"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadChecksum (leaf): The number of packets received that have an incorrect RSVP-TE
// checksum in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-checksum"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-checksum"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadChecksum() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadChecksumPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-checksum"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketFormat (leaf): The number of packets received that were dropped due to being
// badly formed in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-format"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-format"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadPacketFormat() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketFormatPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-format"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BadPacketLength (leaf): The number of packets received that were dropped due to having
// an invalid length specified in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bad-packet-length"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/bad-packet-length"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) BadPacketLength() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_BadPacketLengthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bad-packet-length"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOfOrder (leaf): The number of messages received out of order in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "out-of-order"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/out-of-order"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) OutOfOrder() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_OutOfOrderPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"out-of-order"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReceivedNack (leaf): The number of NACK RESV messages received in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "received-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/received-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) ReceivedNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_ReceivedNackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"received-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitFailure (leaf): The total number of packets dropped on transmit in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-failure"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-failure"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) TransmitFailure() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitFailurePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-failure"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TransmitQueueFull (leaf): The number of packets dropped due to the transmit queue being
// full in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "transmit-queue-full"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/transmit-queue-full"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) TransmitQueueFull() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_TransmitQueueFullPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"transmit-queue-full"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownAck (leaf): The number of packets received containing an ACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-ack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-ack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) UnknownAck() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownAckPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-ack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UnknownNack (leaf): The number of packets received containing a NACK for an unknown
// message ID in the context.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unknown-nack"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/state/counters/errors/unknown-nack"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) UnknownNack() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors_UnknownNackPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unknown-nack"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_ErrorsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Counters_Errors",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/config/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hello-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).HelloInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/config/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/config/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny struct {
	*ygnmi.NodePath
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HelloInterval (leaf): set the interval in ms between RSVP hello
// messages
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hello-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/*/hello-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) HelloInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_HelloIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hello-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/*/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): enables all RSVP refresh reduction message
// bundling, RSVP message ID, reliable message delivery
// and summary refresh
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/hellos/*/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos_RefreshReductionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_HellosPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Hellos",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "bypass-optimize-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).BypassOptimizeInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/state/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/config/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "link-protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection).LinkProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny struct {
	*ygnmi.NodePath
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BypassOptimizeInterval (leaf): interval between periodic optimization
// of the bypass LSPs
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/bypass-optimize-interval"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/bypass-optimize-interval"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) BypassOptimizeInterval() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_BypassOptimizeIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "bypass-optimize-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LinkProtectionStyleRequested (leaf): Style of mpls frr protection desired:
// link, link-node, or unprotected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/link-protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/protection/*/link-protection-style-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) LinkProtectionStyleRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection_LinkProtectionStyleRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "link-protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_ProtectionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Protection",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).CalculatedAbsoluteSubscriptionBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).CalculatedAbsoluteSubscriptionBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/config/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/config/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subscription"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription).Subscription
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny struct {
	*ygnmi.NodePath
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// CalculatedAbsoluteSubscriptionBw (leaf): The calculated absolute value of the bandwidth
// which is reservable to RSVP-TE on the interface
// prior to any adjustments that may be made from
// external sources.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/calculated-absolute-subscription-bw"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/state/calculated-absolute-subscription-bw"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) CalculatedAbsoluteSubscriptionBw() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_CalculatedAbsoluteSubscriptionBwPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "calculated-absolute-subscription-bw"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/*/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subscription (leaf): percentage of the interface bandwidth that
// RSVP can reserve
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subscription"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/interface-attributes/interface/subscription/*/subscription"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) Subscription() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription_SubscriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subscription"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_SubscriptionPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Interface_Subscription",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "address"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).DetectedInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).DetectedInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath) State() ygnmi.SingletonQuery[oc.E_Neighbor_NeighborStatus] {
	return ygnmi.NewSingletonQuery[oc.E_Neighbor_NeighborStatus](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborStatus, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).NeighborStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny) State() ygnmi.WildcardQuery[oc.E_Neighbor_NeighborStatus] {
	return ygnmi.NewWildcardQuery[oc.E_Neighbor_NeighborStatus](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Neighbor_NeighborStatus, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).NeighborStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor).RefreshReduction
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): Address of RSVP neighbor
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/*/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): Address of RSVP neighbor
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/*/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DetectedInterface (leaf): Interface where RSVP neighbor was detected
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/detected-interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/detected-interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) DetectedInterface() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_DetectedInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "detected-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NeighborStatus (leaf): Enumuration of possible RSVP neighbor states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/neighbor-status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/neighbor-status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) NeighborStatus() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_NeighborStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "neighbor-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RefreshReduction (leaf): Suppport of neighbor for RSVP refresh reduction
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/refresh-reduction"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/neighbors/neighbor/state/refresh-reduction"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) RefreshReduction() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor_RefreshReductionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "refresh-reduction"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_NeighborPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Neighbor, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Neighbor
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:neighbors"},
			PostRelPath: []string{"openconfig-network-instance:neighbor"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).DestinationAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelIn_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelIn
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOut_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LabelOut
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local-index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"local-index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LocalIndex
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).LspId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ProtectionRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ProtectionRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SessionName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).SourceAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath) State() ygnmi.SingletonQuery[oc.E_Session_Status] {
	return ygnmi.NewSingletonQuery[oc.E_Session_Status](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Session_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny) State() ygnmi.WildcardQuery[oc.E_Session_Status] {
	return ygnmi.NewWildcardQuery[oc.E_Session_Status](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Session_Status, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Status
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).TunnelId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny struct {
	*ygnmi.NodePath
}

// DestinationAddress (leaf): Destination address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DestinationAddress (leaf): Destination address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/destination-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/destination-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) DestinationAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_DestinationAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "destination-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectAny (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
//
//	Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
//
//	Index: uint64
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObject(Index uint64) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ExplicitRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): Read-only list of explicit route objects associated with the
// traffic-engineered tunnel. Each entry in the list contains
// a hop IP address, and the MPLS label allocated at the hop.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ExplicitRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelIn (leaf): Incoming MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-in"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-in"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelIn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelInPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-in"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelOut (leaf): Outgoing MPLS label associated with this RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-out"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/label-out"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LabelOut() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LabelOutPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label-out"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/*/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalIndex (leaf): The index used to identify the RSVP session
// on the local network element. This index is
// generated by the device and is unique only
// to the local network element.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/*/local-index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LocalIndex() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LocalIndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LspId (leaf): The LSP ID distinguishes between two LSPs
// originated from the same headend, and is
// commonly used to distinguish RSVP sessions
// during make before break operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lsp-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/lsp-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) LspId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_LspIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "lsp-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionRequested (leaf): The type of protection requested for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-requested"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/protection-requested"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) ProtectionRequested() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ProtectionRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "protection-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// RecordRouteObjectAny (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObjectAny() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// RecordRouteObject (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObject(Index uint8) *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects", "record-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// RecordRouteObjectMap (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) RecordRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RecordRouteObjectMap (list): Read-only list of record route objects associated with the
// traffic engineered tunnel. Each entry in the list
// may contain a hop IP address, MPLS label allocated
// at the hop, and the flags associated with the entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "record-route-objects/record-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) RecordRouteObjectMap() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"record-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sender-tspec"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SenderTspec (container): Operational state statistics relating to the SENDER_TSPEC
// received for the RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sender-tspec"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SenderTspec() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sender-tspec"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SessionName (leaf): The signaled name of this RSVP session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SessionName (leaf): The signaled name of this RSVP session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/session-name"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/session-name"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SessionName() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SessionNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "session-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Origin address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceAddress (leaf): Origin address of RSVP session
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/source-address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) SourceAddress() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SourceAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "source-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Enumeration of RSVP session states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Status (leaf): Enumeration of RSVP session states
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/status"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/status"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Status() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_StatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TunnelId (leaf): The tunnel ID is an identifier used in the
// RSVP session, which remains constant over
// the life of the tunnel.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/tunnel-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/tunnel-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) TunnelId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TunnelIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "tunnel-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type/role of the RSVP session, signifing
// the session's role on the current device, such as
// a transit session vs. an ingress session.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Session
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sessions"},
			PostRelPath: []string{"openconfig-network-instance:session"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_SessionPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe).Session
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sessions"},
			PostRelPath: []string{"openconfig-network-instance:session"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "asn"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Asn
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).InterfaceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).InterfaceId
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).IpPrefix
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_Label_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Label
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loose"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Loose
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "loose"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Loose
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath) State() ygnmi.SingletonQuery[oc.E_ExplicitRouteObject_Type] {
	return ygnmi.NewSingletonQuery[oc.E_ExplicitRouteObject_Type](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExplicitRouteObject_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny) State() ygnmi.WildcardQuery[oc.E_ExplicitRouteObject_Type] {
	return ygnmi.NewWildcardQuery[oc.E_ExplicitRouteObject_Type](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_ExplicitRouteObject_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Asn (leaf): The autonomous system number indicated by the ERO. Specified
// only when the ERO hop is an 2 or 4-byte AS number.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/asn"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/asn"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Asn() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_AsnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "asn"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of the entry in the ERO. Entries are ordered in
// ascending order from the source to destination of the
// LSP.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): The interface ID for an unnumbered interface. Specified only
// when the ERO hop is a unnumbered interface.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpPrefix (leaf): The IPv4 or IPv6 prefix indicated by the ERO. Specified
// only when the ERO hop is an IPv4 or IPv6 prefix.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-prefix"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/ip-prefix"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) IpPrefix() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_IpPrefixPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ip-prefix"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): The MPLS label specified in the ERO hop. Specified only when
// the hop is an MPLS label.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Label() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Loose (leaf): When set to true, indicates that the hop of the ERO is
// a loose hop within the explicit route. If unset, indicates
// that the hop must explicitly traverse the entity specified
// in the ERO hop as the next-entity.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/loose"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/loose"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Loose() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_LoosePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "loose"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of hop indicated by the ERO entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of hop indicated by the ERO entry.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/explicit-route-objects/explicit-route-object/state/type"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) Type() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedFlags
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedFlags
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject).ReportedLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): IP router hop for RRO entry
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): IP router hop for RRO entry
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/address"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Address() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of object in the list. Used for ordering.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of object in the list. Used for ordering.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/*/index"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) Index() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedFlags (leaf): Subobject flags for MPLS label
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedFlags (leaf): Subobject flags for MPLS label
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-flags"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-flags"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedFlags() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedFlagsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-flags"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReportedLabel (leaf): Label reported for RRO hop
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reported-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/record-route-objects/record-route-object/state/reported-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) ReportedLabel() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject_ReportedLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "reported-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).RecordRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:record-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:record-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_RecordRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session).RecordRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:record-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:record-route-object"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).PeakDataRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).PeakDataRate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Rate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"rate"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Rate
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath) State() ygnmi.SingletonQuery[float32] {
	return ygnmi.NewSingletonQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Size
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny) State() ygnmi.WildcardQuery[float32] {
	return ygnmi.NewWildcardQuery[float32](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (float32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec).Size
			return ygot.BinaryToFloat32(ret), !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny struct {
	*ygnmi.NodePath
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeakDataRate (leaf): The maximum traffic generation rate that the head-end
// device sends traffic at.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peak-data-rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/peak-data-rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) PeakDataRate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_PeakDataRatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"peak-data-rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Rate (leaf): The rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "rate"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/rate"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Rate() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_RatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"rate"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Size (leaf): The size of the token bucket that is used to determine
// the rate at which the head-end device generates traffic,
// expressed in bytes per second.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "size"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/rsvp-te/sessions/session/state/sender-tspec/size"
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) Size() *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec_SizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspecPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec](
		"NetworkInstance_Mpls_SignalingProtocols_RsvpTe_Session_SenderTspec",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny struct {
	*ygnmi.NodePath
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// AggregateSidCounterAny (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_AggregateSidCounter_MplsLabel]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// AggregateSidCounter (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_AggregateSidCounter_MplsLabel]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters", "aggregate-sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// AggregateSidCounterMap (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) AggregateSidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AggregateSidCounterMap (list): Counters aggregated across all of the interfaces of the local
// system corresponding to traffic received or forwarded with a
// particular SID
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "aggregate-sid-counters/aggregate-sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) AggregateSidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"aggregate-sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) InterfaceAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): Parameters and MPLS-specific configuration relating to Segment
// Routing on an interface.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) InterfaceMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRoutingPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/aggregate-sid-counters/aggregate-sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).AggregateSidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:aggregate-sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:aggregate-sid-counter"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounterPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_AggregateSidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).AggregateSidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:aggregate-sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:aggregate-sid-counter"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/config/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): A unique identifier for the interface.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/*/interface-id"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// SidCounterAny (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounterAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": "*"},
			n,
		),
	}
	return ps
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_SidCounter_MplsLabel]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// SidCounter (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
//
//	MplsLabel: [oc.UnionUint32, oc.E_SidCounter_MplsLabel]
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounter(MplsLabel oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters", "sid-counter"},
			map[string]interface{}{"mpls-label": MplsLabel},
			n,
		),
	}
	return ps
}

// SidCounterMap (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) SidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SidCounterMap (list): Per segment identifier counters for the MPLS dataplane.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "sid-counters/sid-counter"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) SidCounterMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"sid-counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls-label"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mpls-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).MplsLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter).OutPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny struct {
	*ygnmi.NodePath
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
	return ps
}

// ForwardingClassAny (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClassAny() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": "*"},
			n,
		),
	}
	return ps
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
//
//	Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
	return ps
}

// ForwardingClass (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
//
//	Exp: uint8
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClass(Exp uint8) *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes", "forwarding-class"},
			map[string]interface{}{"exp": Exp},
			n,
		),
	}
	return ps
}

// ForwardingClassMap (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) ForwardingClassMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ForwardingClassMap (list): SID entries for the forwarding class associated with the
// referenced MPLS EXP.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "forwarding-classes/forwarding-class"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) ForwardingClassMap() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClassPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"forwarding-classes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InOctets (leaf): The cumulative counter of the total bytes received within the context
// which have matched a label corresponding to an SR Segment Identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InPkts (leaf): A cumulative counter of the packets received within the context
// which have matched a label corresponding to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) InPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_InPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsLabel (leaf): The MPLS label used for the segment identifier
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-label"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/*/mpls-label"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) MplsLabel() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutOctets (leaf): A cumulative counter of the total bytes transmitted by the local
// system within the context which have a label imported that
// corresponds to an SR Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutOctets() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutOctetsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OutPkts (leaf): A cumulative counter of the total number of packets transmitted by
// the local system within the context which have a label imposed that
// corresponds to an Segment Identifier.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/state/out-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) OutPkts() *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_OutPktsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "out-pkts"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).SidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:sid-counter"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounterPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_MplsLabel_Union]*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface).SidCounter
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:sid-counters"},
			PostRelPath: []string{"openconfig-network-instance:sid-counter"},
		},
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/exp"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/exp"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "exp"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "exp"
//	Path from root:       ""
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_ExpPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"exp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).Exp
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/in-pkts"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/in-pkts"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_InPktsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "in-pkts"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).InPkts
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets YANG schema element.
type NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/out-octets"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols/segment-routing/interfaces/interface/sid-counters/sid-counter/forwarding-classes/forwarding-class/state/out-octets"
func (n *NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass_OutOctetsPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "out-octets"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass).OutOctets
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_SignalingProtocols_SegmentRouting_Interface_SidCounter_ForwardingClass)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
	)
}
