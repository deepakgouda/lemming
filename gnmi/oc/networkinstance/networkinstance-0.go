/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.9.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/description YANG schema element.
type NetworkInstance_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/state/description"
func (n *NetworkInstance_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/state/description"
func (n *NetworkInstance_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/config/description"
func (n *NetworkInstance_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/config/description"
func (n *NetworkInstance_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_FallbackNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/state/fallback-network-instance YANG schema element.
type NetworkInstance_FallbackNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_FallbackNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/fallback-network-instance YANG schema element.
type NetworkInstance_FallbackNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/state/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/state/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/config/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/config/fallback-network-instance"
func (n *NetworkInstance_FallbackNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "fallback-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).FallbackNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_NamePath represents the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/name YANG schema element.
type NetworkInstance_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/state/name"
func (n *NetworkInstance_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/state/name"
func (n *NetworkInstance_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/config/name"
func (n *NetworkInstance_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/config/name"
func (n *NetworkInstance_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_RouteDistinguisherPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/state/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/config/route-distinguisher"
func (n *NetworkInstance_RouteDistinguisherPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouteDistinguisher
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_RouterIdPath represents the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_RouterIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/router-id YANG schema element.
type NetworkInstance_RouterIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/state/router-id"
func (n *NetworkInstance_RouterIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-id"
//	Path from root:       "/network-instances/network-instance/state/router-id"
func (n *NetworkInstance_RouterIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/router-id"
//	Path from root:       "/network-instances/network-instance/config/router-id"
func (n *NetworkInstance_RouterIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/router-id"
//	Path from root:       "/network-instances/network-instance/config/router-id"
func (n *NetworkInstance_RouterIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "router-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance).RouterId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_TypePath represents the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/state/type YANG schema element.
type NetworkInstance_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/state/type"
func (n *NetworkInstance_TypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/state/type"
func (n *NetworkInstance_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/config/type"
func (n *NetworkInstance_TypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/config/type"
func (n *NetworkInstance_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE](
		"NetworkInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_NETWORK_INSTANCE_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePath struct {
	*ygnmi.NodePath
}

// NetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstancePathMap represents the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstancePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance YANG schema element.
type NetworkInstancePathMapAny struct {
	*ygnmi.NodePath
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afts"
//	Path from root:       "/network-instances/network-instance/afts"
func (n *NetworkInstancePath) Afts() *NetworkInstance_AftsPath {
	ps := &NetworkInstance_AftsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Afts (container): The abstract forwarding tables (AFTs) that are associated
// with the network instance. An AFT is instantiated per-protocol
// running within the network-instance - such that one exists for
// IPv4 Unicast, IPv6 Unicast, MPLS, L2 forwarding entries, etc.
// A forwarding entry within the FIB has a set of next-hops,
// which may be a reference to an entry within another table -
// e.g., where a Layer 3 next-hop has an associated Layer 2
// forwarding entry.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "afts"
//	Path from root:       "/network-instances/network-instance/afts"
func (n *NetworkInstancePathAny) Afts() *NetworkInstance_AftsPathAny {
	ps := &NetworkInstance_AftsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"afts"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePath) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
	return ps
}

// ConnectionPointAny (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePathAny) ConnectionPointAny() *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": "*"},
			n,
		),
	}
	return ps
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
//
//	ConnectionPointId: string
func (n *NetworkInstancePath) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPath {
	ps := &NetworkInstance_ConnectionPointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
	return ps
}

// ConnectionPoint (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
//
//	ConnectionPointId: string
func (n *NetworkInstancePathAny) ConnectionPoint(ConnectionPointId string) *NetworkInstance_ConnectionPointPathAny {
	ps := &NetworkInstance_ConnectionPointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points", "connection-point"},
			map[string]interface{}{"connection-point-id": ConnectionPointId},
			n,
		),
	}
	return ps
}

// ConnectionPointMap (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePath) ConnectionPointMap() *NetworkInstance_ConnectionPointPathMap {
	ps := &NetworkInstance_ConnectionPointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConnectionPointMap (list): A connection point within a Layer 2 network instance.
// Each connection-point consists of a set of interfaces
// only one of which is active at any one time. Other than
// the specification of whether an interface is local
// (i.e., exists within this network-instance), or remote,
// all configuration and state parameters are common
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "connection-points/connection-point"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point"
func (n *NetworkInstancePathAny) ConnectionPointMap() *NetworkInstance_ConnectionPointPathMapAny {
	ps := &NetworkInstance_ConnectionPointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"connection-points"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/*/description"
func (n *NetworkInstancePath) Description() *NetworkInstance_DescriptionPath {
	ps := &NetworkInstance_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): A free-form string to be used by the network operator to
// describe the function of this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/*/description"
func (n *NetworkInstancePathAny) Description() *NetworkInstance_DescriptionPathAny {
	ps := &NetworkInstance_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulation"
//	Path from root:       "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePath) Encapsulation() *NetworkInstance_EncapsulationPath {
	ps := &NetworkInstance_EncapsulationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Encapsulation (container): Configuration parameters relating to the encapsulation
// used for the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "encapsulation"
//	Path from root:       "/network-instances/network-instance/encapsulation"
func (n *NetworkInstancePathAny) Encapsulation() *NetworkInstance_EncapsulationPathAny {
	ps := &NetworkInstance_EncapsulationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"encapsulation"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn"
//	Path from root:       "/network-instances/network-instance/evpn"
func (n *NetworkInstancePath) Evpn() *NetworkInstance_EvpnPath {
	ps := &NetworkInstance_EvpnPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Evpn (container): Configuration of parameters for EVPN related bridge domains
// (MAC VRFs) and layer3 VRFs (IP VRFs)
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn"
//	Path from root:       "/network-instances/network-instance/evpn"
func (n *NetworkInstancePathAny) Evpn() *NetworkInstance_EvpnPathAny {
	ps := &NetworkInstance_EvpnPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FallbackNetworkInstance (leaf): When this leaf is populated, the specified network instance
// should be used as a fallback instance when a route cannot
// be resolved in the local network-instance.
// This configuration is only valid when specified in a non-default
// instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/*/fallback-network-instance"
func (n *NetworkInstancePath) FallbackNetworkInstance() *NetworkInstance_FallbackNetworkInstancePath {
	ps := &NetworkInstance_FallbackNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FallbackNetworkInstance (leaf): When this leaf is populated, the specified network instance
// should be used as a fallback instance when a route cannot
// be resolved in the local network-instance.
// This configuration is only valid when specified in a non-default
// instance which must be a L3 capable VRF (i.e., L2L3, or L3VRF).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/fallback-network-instance"
//	Path from root:       "/network-instances/network-instance/*/fallback-network-instance"
func (n *NetworkInstancePathAny) FallbackNetworkInstance() *NetworkInstance_FallbackNetworkInstancePathAny {
	ps := &NetworkInstance_FallbackNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "fallback-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "fdb"
//	Path from root:       "/network-instances/network-instance/fdb"
func (n *NetworkInstancePath) Fdb() *NetworkInstance_FdbPath {
	ps := &NetworkInstance_FdbPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Fdb (container): Operational state and configuration parameters relating to
// the forwarding database of the network instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "fdb"
//	Path from root:       "/network-instances/network-instance/fdb"
func (n *NetworkInstancePathAny) Fdb() *NetworkInstance_FdbPathAny {
	ps := &NetworkInstance_FdbPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"fdb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-instance-policies"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePath) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPath {
	ps := &NetworkInstance_InterInstancePoliciesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterInstancePolicies (container): Policies dictating how RIB or FIB entries are imported
// to and exported from this instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "inter-instance-policies"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies"
func (n *NetworkInstancePathAny) InterInstancePolicies() *NetworkInstance_InterInstancePoliciesPathAny {
	ps := &NetworkInstance_InterInstancePoliciesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"inter-instance-policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePath) InterfaceAny() *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePathAny) InterfaceAny() *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
//
//	Id: string
func (n *NetworkInstancePath) Interface(Id string) *NetworkInstance_InterfacePath {
	ps := &NetworkInstance_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// Interface (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
//
//	Id: string
func (n *NetworkInstancePathAny) Interface(Id string) *NetworkInstance_InterfacePathAny {
	ps := &NetworkInstance_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces", "interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePath) InterfaceMap() *NetworkInstance_InterfacePathMap {
	ps := &NetworkInstance_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): An interface associated with the network instance.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interfaces/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface"
func (n *NetworkInstancePathAny) InterfaceMap() *NetworkInstance_InterfacePathMapAny {
	ps := &NetworkInstance_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/mpls"
func (n *NetworkInstancePath) Mpls() *NetworkInstance_MplsPath {
	ps := &NetworkInstance_MplsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Mpls (container): Anchor point for mpls configuration and operational
// data
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls"
//	Path from root:       "/network-instances/network-instance/mpls"
func (n *NetworkInstancePathAny) Mpls() *NetworkInstance_MplsPathAny {
	ps := &NetworkInstance_MplsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/*/name"
func (n *NetworkInstancePath) Name() *NetworkInstance_NamePath {
	ps := &NetworkInstance_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): An operator-assigned unique name for the network instance.
// If the operator does not designate a name for the instance of
// type 'DEFAULT_INSTANCE' (e.g. config), the implementation
// should use the name of 'DEFAULT' (e.g. state).
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/*/name"
func (n *NetworkInstancePathAny) Name() *NetworkInstance_NamePathAny {
	ps := &NetworkInstance_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
//
//	Defining module:      "openconfig-policy-forwarding"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding"
//	Path from root:       "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePath) PolicyForwarding() *NetworkInstance_PolicyForwardingPath {
	ps := &NetworkInstance_PolicyForwardingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwarding (container): Configuration and operational state relating to policy-forwarding within
// a network instance.
//
//	Defining module:      "openconfig-policy-forwarding"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding"
//	Path from root:       "/network-instances/network-instance/policy-forwarding"
func (n *NetworkInstancePathAny) PolicyForwarding() *NetworkInstance_PolicyForwardingPathAny {
	ps := &NetworkInstance_PolicyForwardingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePath) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
	return ps
}

// ProtocolAny (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePathAny) ProtocolAny() *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": "*", "name": "*"},
			n,
		),
	}
	return ps
}

// WithIdentifier sets NetworkInstance_ProtocolPathAny's key "identifier" to the specified value.
// Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_ProtocolPathAny) WithIdentifier(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_ProtocolPathAny {
	ygnmi.ModifyKey(n.NodePath, "identifier", Identifier)
	return n
}

// WithName sets NetworkInstance_ProtocolPathAny's key "name" to the specified value.
// Name: string
func (n *NetworkInstance_ProtocolPathAny) WithName(Name string) *NetworkInstance_ProtocolPathAny {
	ygnmi.ModifyKey(n.NodePath, "name", Name)
	return n
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
//
//	Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	Name: string
func (n *NetworkInstancePath) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPath {
	ps := &NetworkInstance_ProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
	return ps
}

// Protocol (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
//
//	Identifier: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	Name: string
func (n *NetworkInstancePathAny) Protocol(Identifier oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, Name string) *NetworkInstance_ProtocolPathAny {
	ps := &NetworkInstance_ProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols", "protocol"},
			map[string]interface{}{"identifier": Identifier, "name": Name},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePath) ProtocolMap() *NetworkInstance_ProtocolPathMap {
	ps := &NetworkInstance_ProtocolPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProtocolMap (list): A process (instance) of a routing protocol. Some
// systems may not support more than one instance of
// a particular routing protocol
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "protocols/protocol"
//	Path from root:       "/network-instances/network-instance/protocols/protocol"
func (n *NetworkInstancePathAny) ProtocolMap() *NetworkInstance_ProtocolPathMapAny {
	ps := &NetworkInstance_ProtocolPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/*/route-distinguisher"
func (n *NetworkInstancePath) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPath {
	ps := &NetworkInstance_RouteDistinguisherPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): The route distinguisher that should be used for the local
// VRF or VSI instance when it is signalled via BGP.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/*/route-distinguisher"
func (n *NetworkInstancePathAny) RouteDistinguisher() *NetworkInstance_RouteDistinguisherPathAny {
	ps := &NetworkInstance_RouteDistinguisherPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteLimitAny (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePath) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
	return ps
}

// RouteLimitAny (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePathAny) RouteLimitAny() *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": "*"},
			n,
		),
	}
	return ps
}

// RouteLimit (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
//
//	Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPath {
	ps := &NetworkInstance_RouteLimitPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
	return ps
}

// RouteLimit (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
//
//	Afi: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) RouteLimit(Afi oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_RouteLimitPathAny {
	ps := &NetworkInstance_RouteLimitPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits", "route-limit"},
			map[string]interface{}{"afi": Afi},
			n,
		),
	}
	return ps
}

// RouteLimitMap (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePath) RouteLimitMap() *NetworkInstance_RouteLimitPathMap {
	ps := &NetworkInstance_RouteLimitPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouteLimitMap (list): A route limit applying to a particular address family.
//
//	Defining module:      "openconfig-network-instance-l3"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "route-limits/route-limit"
//	Path from root:       "/network-instances/network-instance/route-limits/route-limit"
func (n *NetworkInstancePathAny) RouteLimitMap() *NetworkInstance_RouteLimitPathMapAny {
	ps := &NetworkInstance_RouteLimitPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"route-limits"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/router-id"
//	Path from root:       "/network-instances/network-instance/*/router-id"
func (n *NetworkInstancePath) RouterId() *NetworkInstance_RouterIdPath {
	ps := &NetworkInstance_RouterIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterId (leaf): A identifier for the local network instance - typically
// used within associated routing protocols or signalling
// routing information in another network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/router-id"
//	Path from root:       "/network-instances/network-instance/*/router-id"
func (n *NetworkInstancePathAny) RouterId() *NetworkInstance_RouterIdPathAny {
	ps := &NetworkInstance_RouterIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "router-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePath) SegmentRouting() *NetworkInstance_SegmentRoutingPath {
	ps := &NetworkInstance_SegmentRoutingPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SegmentRouting (container): Configuration and operational state parameters relating to
// segment routing.
//
//	Defining module:      "openconfig-segment-routing"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "segment-routing"
//	Path from root:       "/network-instances/network-instance/segment-routing"
func (n *NetworkInstancePathAny) SegmentRouting() *NetworkInstance_SegmentRoutingPathAny {
	ps := &NetworkInstance_SegmentRoutingPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"segment-routing"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePath) TableAny() *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// TableAny (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePathAny) TableAny() *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// WithProtocol sets NetworkInstance_TablePathAny's key "protocol" to the specified value.
// Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TablePathAny) WithProtocol(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TablePathAny {
	ygnmi.ModifyKey(n.NodePath, "protocol", Protocol)
	return n
}

// WithAddressFamily sets NetworkInstance_TablePathAny's key "address-family" to the specified value.
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstance_TablePathAny) WithAddressFamily(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	ygnmi.ModifyKey(n.NodePath, "address-family", AddressFamily)
	return n
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
//
//		Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//		AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePath {
	ps := &NetworkInstance_TablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// Table (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
//
//		Protocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//		AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) Table(Protocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TablePathAny {
	ps := &NetworkInstance_TablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables", "table"},
			map[string]interface{}{"protocol": Protocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableMap (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePath) TableMap() *NetworkInstance_TablePathMap {
	ps := &NetworkInstance_TablePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableMap (list): A network instance manages one or more forwarding or
// routing tables. These may reflect a Layer 2 forwarding
// information base, a Layer 3 routing table, or an MPLS
// LFIB.
//
// The table populated by a protocol within an instance is
// identified by the protocol identifier (e.g., BGP, IS-IS)
// and the address family (e.g., IPv4, IPv6) supported by
// that protocol. Multiple instances of the same protocol
// populate a single table -- such that
// a single IS-IS or OSPF IPv4 table exists per network
// instance.
//
// An implementation is expected to create entries within
// this list when the relevant protocol context is enabled.
// i.e., when a BGP instance is created with IPv4 and IPv6
// address families enabled, the protocol=BGP,
// address-family=IPv4 table is created by the system. The
//
//	     removal of the table should not require additional or
//	     explicit configurations
//		Defining module:      "openconfig-network-instance"
//		Instantiating module: "openconfig-network-instance"
//		Path from parent:     "tables/table"
//		Path from root:       "/network-instances/network-instance/tables/table"
func (n *NetworkInstancePathAny) TableMap() *NetworkInstance_TablePathMapAny {
	ps := &NetworkInstance_TablePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tables"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePath) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// TableConnectionAny (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePathAny) TableConnectionAny() *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": "*", "dst-protocol": "*", "address-family": "*"},
			n,
		),
	}
	return ps
}

// WithSrcProtocol sets NetworkInstance_TableConnectionPathAny's key "src-protocol" to the specified value.
// SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TableConnectionPathAny) WithSrcProtocol(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "src-protocol", SrcProtocol)
	return n
}

// WithDstProtocol sets NetworkInstance_TableConnectionPathAny's key "dst-protocol" to the specified value.
// DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
func (n *NetworkInstance_TableConnectionPathAny) WithDstProtocol(DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "dst-protocol", DstProtocol)
	return n
}

// WithAddressFamily sets NetworkInstance_TableConnectionPathAny's key "address-family" to the specified value.
// AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstance_TableConnectionPathAny) WithAddressFamily(AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	ygnmi.ModifyKey(n.NodePath, "address-family", AddressFamily)
	return n
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
//
//	SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePath) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPath {
	ps := &NetworkInstance_TableConnectionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableConnection (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
//
//	SrcProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	DstProtocol: oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE
//	AddressFamily: oc.E_Types_ADDRESS_FAMILY
func (n *NetworkInstancePathAny) TableConnection(SrcProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, DstProtocol oc.E_PolicyTypes_INSTALL_PROTOCOL_TYPE, AddressFamily oc.E_Types_ADDRESS_FAMILY) *NetworkInstance_TableConnectionPathAny {
	ps := &NetworkInstance_TableConnectionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections", "table-connection"},
			map[string]interface{}{"src-protocol": SrcProtocol, "dst-protocol": DstProtocol, "address-family": AddressFamily},
			n,
		),
	}
	return ps
}

// TableConnectionMap (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePath) TableConnectionMap() *NetworkInstance_TableConnectionPathMap {
	ps := &NetworkInstance_TableConnectionPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TableConnectionMap (list): A list of connections between pairs of routing or
// forwarding tables, the leaking of entries between
// which is specified by the import policy.
//
// A connection connecting a source table to a destination
// table implies that routes that match the policy specified
// for the connection are available for the destination
// protocol to advertise, or match within its policies.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "table-connections/table-connection"
//	Path from root:       "/network-instances/network-instance/table-connections/table-connection"
func (n *NetworkInstancePathAny) TableConnectionMap() *NetworkInstance_TableConnectionPathMapAny {
	ps := &NetworkInstance_TableConnectionPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"table-connections"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/*/type"
func (n *NetworkInstancePath) Type() *NetworkInstance_TypePath {
	ps := &NetworkInstance_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of network instance. The value of this leaf
// indicates the type of forwarding entries that should be
// supported by this network instance. Signalling protocols also
// use the network instance type to infer the type of service
// they advertise; for example MPLS signalling for an L2VSI
// network instance would infer a VPLS service whereas a type of
// L2PTP would infer a VPWS (pseudo-wire) service.
//
// An implementation must support only a single network-instance
// of type 'DEFAULT_INSTANCE'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/*/type"
func (n *NetworkInstancePathAny) Type() *NetworkInstance_TypePathAny {
	ps := &NetworkInstance_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VlanAny (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePath) VlanAny() *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
	return ps
}

// VlanAny (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePathAny) VlanAny() *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": "*"},
			n,
		),
	}
	return ps
}

// Vlan (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
//
//	VlanId: uint16
func (n *NetworkInstancePath) Vlan(VlanId uint16) *NetworkInstance_VlanPath {
	ps := &NetworkInstance_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// Vlan (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
//
//	VlanId: uint16
func (n *NetworkInstancePathAny) Vlan(VlanId uint16) *NetworkInstance_VlanPathAny {
	ps := &NetworkInstance_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans", "vlan"},
			map[string]interface{}{"vlan-id": VlanId},
			n,
		),
	}
	return ps
}

// VlanMap (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePath) VlanMap() *NetworkInstance_VlanPathMap {
	ps := &NetworkInstance_VlanPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// VlanMap (list): Configured VLANs keyed by id
//
//	Defining module:      "openconfig-vlan"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vlans/vlan"
//	Path from root:       "/network-instances/network-instance/vlans/vlan"
func (n *NetworkInstancePathAny) VlanMap() *NetworkInstance_VlanPathMapAny {
	ps := &NetworkInstance_VlanPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vlans"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

func binarySliceToFloatSlice(in []oc.Binary) []float32 {
	converted := make([]float32, 0, len(in))
	for _, binary := range in {
		converted = append(converted, ygot.BinaryToFloat32(binary))
	}
	return converted
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance](
		"Root",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance](
		"Root",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance](
		"Root",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstancePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance](
		"Root",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance, bool) {
			ret := gs.(*oc.Root).NetworkInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.Root) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:network-instances"},
			PostRelPath: []string{"openconfig-network-instance:network-instance"},
		},
	)
}

// NetworkInstance_AftsPath represents the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_AftsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts YANG schema element.
type NetworkInstance_AftsPathAny struct {
	*ygnmi.NodePath
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPath) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv4EntryAny (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPathAny) Ipv4EntryAny() *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPath) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPath {
	ps := &NetworkInstance_Afts_Ipv4EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv4Entry (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv4Entry(Prefix string) *NetworkInstance_Afts_Ipv4EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast", "ipv4-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv4EntryMap (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPath) Ipv4EntryMap() *NetworkInstance_Afts_Ipv4EntryPathMap {
	ps := &NetworkInstance_Afts_Ipv4EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv4EntryMap (list): List of the IPv4 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv4
// prefix.
//
//	Defining module:      "openconfig-aft-ipv4"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv4-unicast/ipv4-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry"
func (n *NetworkInstance_AftsPathAny) Ipv4EntryMap() *NetworkInstance_Afts_Ipv4EntryPathMapAny {
	ps := &NetworkInstance_Afts_Ipv4EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPath) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv6EntryAny (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPathAny) Ipv6EntryAny() *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": "*"},
			n,
		),
	}
	return ps
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPath) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPath {
	ps := &NetworkInstance_Afts_Ipv6EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv6Entry (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
//
//	Prefix: string
func (n *NetworkInstance_AftsPathAny) Ipv6Entry(Prefix string) *NetworkInstance_Afts_Ipv6EntryPathAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast", "ipv6-entry"},
			map[string]interface{}{"prefix": Prefix},
			n,
		),
	}
	return ps
}

// Ipv6EntryMap (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPath) Ipv6EntryMap() *NetworkInstance_Afts_Ipv6EntryPathMap {
	ps := &NetworkInstance_Afts_Ipv6EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Ipv6EntryMap (list): List of the IPv6 unicast entries within the abstract
// forwarding table. This list is keyed by the destination IPv6
// prefix.
//
//	Defining module:      "openconfig-aft-ipv6"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ipv6-unicast/ipv6-entry"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry"
func (n *NetworkInstance_AftsPathAny) Ipv6EntryMap() *NetworkInstance_Afts_Ipv6EntryPathMapAny {
	ps := &NetworkInstance_Afts_Ipv6EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPath) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
	return ps
}

// LabelEntryAny (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPathAny) LabelEntryAny() *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": "*"},
			n,
		),
	}
	return ps
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
//
//	Label: [oc.UnionUint32, oc.E_LabelEntry_Label]
func (n *NetworkInstance_AftsPath) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPath {
	ps := &NetworkInstance_Afts_LabelEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
	return ps
}

// LabelEntry (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
//
//	Label: [oc.UnionUint32, oc.E_LabelEntry_Label]
func (n *NetworkInstance_AftsPathAny) LabelEntry(Label oc.NetworkInstance_Afts_LabelEntry_Label_Union) *NetworkInstance_Afts_LabelEntryPathAny {
	ps := &NetworkInstance_Afts_LabelEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls", "label-entry"},
			map[string]interface{}{"label": Label},
			n,
		),
	}
	return ps
}

// LabelEntryMap (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPath) LabelEntryMap() *NetworkInstance_Afts_LabelEntryPathMap {
	ps := &NetworkInstance_Afts_LabelEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// LabelEntryMap (list): List of the MPLS entries within the abstract
// forwarding table. This list is keyed by the top-most MPLS
// label.
//
//	Defining module:      "openconfig-aft-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mpls/label-entry"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry"
func (n *NetworkInstance_AftsPathAny) LabelEntryMap() *NetworkInstance_Afts_LabelEntryPathMapAny {
	ps := &NetworkInstance_Afts_LabelEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mpls"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPath) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// MacEntryAny (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPathAny) MacEntryAny() *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
//
//	MacAddress: string
func (n *NetworkInstance_AftsPath) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPath {
	ps := &NetworkInstance_Afts_MacEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// MacEntry (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
//
//	MacAddress: string
func (n *NetworkInstance_AftsPathAny) MacEntry(MacAddress string) *NetworkInstance_Afts_MacEntryPathAny {
	ps := &NetworkInstance_Afts_MacEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet", "mac-entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// MacEntryMap (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPath) MacEntryMap() *NetworkInstance_Afts_MacEntryPathMap {
	ps := &NetworkInstance_Afts_MacEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacEntryMap (list): List of the Ethernet entries within the abstract
// forwarding table. This list is keyed by the outer MAC address
// of the Ethernet frame.
//
//	Defining module:      "openconfig-aft-ethernet"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "ethernet/mac-entry"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry"
func (n *NetworkInstance_AftsPathAny) MacEntryMap() *NetworkInstance_Afts_MacEntryPathMapAny {
	ps := &NetworkInstance_Afts_MacEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"ethernet"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPath) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPathAny) NextHopAny() *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_AftsPath) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPath {
	ps := &NetworkInstance_Afts_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_AftsPathAny) NextHop(Index uint64) *NetworkInstance_Afts_NextHopPathAny {
	ps := &NetworkInstance_Afts_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPath) NextHopMap() *NetworkInstance_Afts_NextHopPathMap {
	ps := &NetworkInstance_Afts_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): A next-hop associated with the forwarding instance.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop"
func (n *NetworkInstance_AftsPathAny) NextHopMap() *NetworkInstance_Afts_NextHopPathMapAny {
	ps := &NetworkInstance_Afts_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPath) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPathAny) NextHopGroupAny() *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_AftsPath) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPath {
	ps := &NetworkInstance_Afts_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_AftsPathAny) NextHopGroup(Id uint64) *NetworkInstance_Afts_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPath) NextHopGroupMap() *NetworkInstance_Afts_NextHopGroupPathMap {
	ps := &NetworkInstance_Afts_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an abstract forwarding table points to a
// next-hop-group. Entries in the next-hop-group are forwarded to
// according to the weights specified for each next-hop group.
//
// If an entry within the next-hop group becomes unusable, for
// example due to an interface failure, the remaining entries
// are used until all entries become unusable - at which point
// the backup next-hop-group (if specified) is used.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group"
func (n *NetworkInstance_AftsPathAny) NextHopGroupMap() *NetworkInstance_Afts_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Afts_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryAny (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryAny() *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
//
//	Index: uint64
func (n *NetworkInstance_AftsPath) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntry (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
//
//	Index: uint64
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntry(Index uint64) *NetworkInstance_Afts_PolicyForwardingEntryPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding", "policy-forwarding-entry"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryMap (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPath) PolicyForwardingEntryMap() *NetworkInstance_Afts_PolicyForwardingEntryPathMap {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyForwardingEntryMap (list): List of the policy forwarding entries within the abstract
// forwarding table. Each entry is uniquely identified by an
// index on the system, due to the arbitrary match conditions
// that may be implemented within the policy forwarding AFT.
// The index may change upon changes of the entry if, and only
// if, the device exporting the AFT replaces the entire entry
// by removing the previous entry and replacing it with a
// subsequent updated version.
//
//	Defining module:      "openconfig-aft-pf"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "policy-forwarding/policy-forwarding-entry"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry"
func (n *NetworkInstance_AftsPathAny) PolicyForwardingEntryMap() *NetworkInstance_Afts_PolicyForwardingEntryPathMapAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policy-forwarding"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-synced"
//	Path from root:       "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPath) StateSynced() *NetworkInstance_Afts_StateSyncedPath {
	ps := &NetworkInstance_Afts_StateSyncedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StateSynced (container): In some cases AFT streaming (e.g., over gNMI) is an eventually consistent system.
// When the device updates an entry it is usually expected to
// stream an update to the client within a vert short amount
// of time (few milliseconds). Given this is the casee, a telemetry collector or a
// controller that parse the AFT doesn't have a consistent
// snapshot, or overall versioned copy of AFT with the device
// at any specific point of time.
//
// In certain failure modes like device boot up, gNMI daemon
// failure and device/routing engine stateful switchover
// a telemetry collector or a controller need a flag to
// determine whether it is in consistent with the device or
// not such that it can a corrective action when needed.
// A device sets this leaf or flag to indicate to the
// client that AFT data/view is consistent.
//
//	Defining module:      "openconfig-aft"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state-synced"
//	Path from root:       "/network-instances/network-instance/afts/state-synced"
func (n *NetworkInstance_AftsPathAny) StateSynced() *NetworkInstance_Afts_StateSyncedPathAny {
	ps := &NetworkInstance_Afts_StateSyncedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state-synced"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_AftsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_AftsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry YANG schema element.
type NetworkInstance_Afts_Ipv4EntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts_Ipv4Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts_Ipv4Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv4Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv4Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv4Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv4Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv4Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv4-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv4-entry"},
		},
	)
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv4Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv4Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv4Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv4Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv4Entry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv4-unicast/ipv4-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv4Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv4Entry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv4Entry_Counters](
		"NetworkInstance_Afts_Ipv4Entry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6EntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry YANG schema element.
type NetworkInstance_Afts_Ipv6EntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts_Ipv6Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts_Ipv6Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv6Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv6Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_Ipv6Entry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_Ipv6Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).Ipv6Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ipv6-unicast"},
			PostRelPath: []string{"openconfig-network-instance:ipv6-entry"},
		},
	)
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_Ipv6Entry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_Ipv6Entry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_Ipv6Entry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_Ipv6Entry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters YANG schema element.
type NetworkInstance_Afts_Ipv6Entry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ipv6-unicast/ipv6-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_Ipv6Entry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_Ipv6Entry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_Ipv6Entry_Counters](
		"NetworkInstance_Afts_Ipv6Entry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry YANG schema element.
type NetworkInstance_Afts_LabelEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts_LabelEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts_LabelEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).LabelEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls"},
			PostRelPath: []string{"openconfig-network-instance:label-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Afts_LabelEntry_Label_Union]*oc.NetworkInstance_Afts_LabelEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).LabelEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:mpls"},
			PostRelPath: []string{"openconfig-network-instance:label-entry"},
		},
	)
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_LabelEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_LabelEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_LabelEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_LabelEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/mpls/label-entry/state/counters YANG schema element.
type NetworkInstance_Afts_LabelEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/mpls/label-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_LabelEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_LabelEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_LabelEntry_Counters](
		"NetworkInstance_Afts_LabelEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry YANG schema element.
type NetworkInstance_Afts_MacEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts_MacEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts_MacEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_MacEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).MacEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ethernet"},
			PostRelPath: []string{"openconfig-network-instance:mac-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_MacEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_MacEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_MacEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).MacEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:ethernet"},
			PostRelPath: []string{"openconfig-network-instance:mac-entry"},
		},
	)
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_MacEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_MacEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_MacEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_MacEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/ethernet/mac-entry/state/counters YANG schema element.
type NetworkInstance_Afts_MacEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_MacEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/ethernet/mac-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_MacEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_MacEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_MacEntry_Counters](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_MacEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_MacEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_MacEntry_Counters](
		"NetworkInstance_Afts_MacEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHop](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Dscp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Dscp
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).NextHopGroup
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).NextHopGroup
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_ConditionPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition YANG schema element.
type NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny struct {
	*ygnmi.NodePath
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_DscpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Dscp (leaf-list): A set of DSCP values that must be matched by an input packet for
// the next-hop-group specified to be selected. A logical OR is applied
// across the DSCP values.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dscp"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/dscp"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Dscp() *NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_DscpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dscp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the conditional criteria.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the conditional criteria.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputInterfaceAny (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceAny() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
//
//	Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputInterface (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
//
//	Id: string
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterface(Id string) *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces", "input-interface"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// InputInterfaceMap (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) InputInterfaceMap() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InputInterfaceMap (list): The input interface that must be matched for the condition to be met.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "input-interfaces/input-interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) InputInterfaceMap() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"input-interfaces"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf): The next-hop-group that is used by the system for packets that match
// the criteria specified.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/state/next-hop-group"
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) NextHopGroup() *NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).Condition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:conditional"},
			PostRelPath: []string{"openconfig-network-instance:condition"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_ConditionPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_Condition, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).Condition
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:conditional"},
			PostRelPath: []string{"openconfig-network-instance:condition"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface YANG schema element.
type NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny struct {
	*ygnmi.NodePath
}

// Id (leaf): A unique reference for the input interface.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique reference for the input interface.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/*/id"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Id() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/interface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Interface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/conditional/condition/input-interfaces/input-interface/state/subinterface"
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) Subinterface() *NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_Condition_InputInterface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition_InputInterface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).InputInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:input-interfaces"},
			PostRelPath: []string{"openconfig-network-instance:input-interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_Condition_InputInterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface](
		"NetworkInstance_Afts_NextHopGroup_Condition",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Afts_NextHopGroup_Condition_InputInterface, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_Condition).InputInterface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_Condition) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:input-interfaces"},
			PostRelPath: []string{"openconfig-network-instance:input-interface"},
		},
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "weight"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup_NextHop).Weight
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which
// the entry in the next-hop group corresponds.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Weight (leaf): The weight applied to the next-hop within the group. Traffic
// is balanced across the next-hops within the group in the
// proportion of weight/(sum of weights of the next-hops within
// the next-hop group).
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/weight"
//	Path from root:       "/network-instances/network-instance/afts/next-hop-groups/next-hop-group/next-hops/next-hop/state/weight"
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) Weight() *NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny {
	ps := &NetworkInstance_Afts_NextHopGroup_NextHop_WeightPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "weight"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop](
		"NetworkInstance_Afts_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/state/counters YANG schema element.
type NetworkInstance_Afts_NextHop_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_NextHop_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPath) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_NextHop_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_Counters](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_Counters](
		"NetworkInstance_Afts_NextHop_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/interface-ref YANG schema element.
type NetworkInstance_Afts_NextHop_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/interface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Interface() *NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/interface-ref/state/subinterface"
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) Subinterface() *NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Afts_NextHop_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_InterfaceRef](
		"NetworkInstance_Afts_NextHop_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).DstIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_NextHop_IpInIp).SrcIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_NextHop_IpInIp) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_NextHop_IpInIpPath represents the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_NextHop_IpInIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip YANG schema element.
type NetworkInstance_Afts_NextHop_IpInIpPathAny struct {
	*ygnmi.NodePath
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPath {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_DstIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DstIp (leaf): Destination IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/dst-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/dst-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) DstIp() *NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_DstIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "dst-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrcIp (leaf): Source IP address to use for the encapsulated packet.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/src-ip"
//	Path from root:       "/network-instances/network-instance/afts/next-hops/next-hop/ip-in-ip/state/src-ip"
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) SrcIp() *NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny {
	ps := &NetworkInstance_Afts_NextHop_IpInIp_SrcIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "src-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_IpInIpPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_NextHop_IpInIpPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_NextHop_IpInIp](
		"NetworkInstance_Afts_NextHop_IpInIp",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntryPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntryPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts_PolicyForwardingEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts_PolicyForwardingEntry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).PolicyForwardingEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policy-forwarding"},
			PostRelPath: []string{"openconfig-network-instance:policy-forwarding-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntryPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry](
		"NetworkInstance_Afts",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Afts_PolicyForwardingEntry, bool) {
			ret := gs.(*oc.NetworkInstance_Afts).PolicyForwardingEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:policy-forwarding"},
			PostRelPath: []string{"openconfig-network-instance:policy-forwarding-entry"},
		},
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).OctetsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters).PacketsForwarded
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPath represents the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters YANG schema element.
type NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny struct {
	*ygnmi.NodePath
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OctetsForwarded (leaf): The number of octets which have matched, and been forwarded,
// based on the AFT entry
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "octets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/octets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) OctetsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_OctetsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"octets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PacketsForwarded (leaf): The number of packets which have matched, and been forwarded,
// based on the AFT entry.
//
//	Defining module:      "openconfig-aft-common"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "packets-forwarded"
//	Path from root:       "/network-instances/network-instance/afts/policy-forwarding/policy-forwarding-entry/state/counters/packets-forwarded"
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) PacketsForwarded() *NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny {
	ps := &NetworkInstance_Afts_PolicyForwardingEntry_Counters_PacketsForwardedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"packets-forwarded"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_PolicyForwardingEntry_CountersPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_PolicyForwardingEntry_Counters](
		"NetworkInstance_Afts_PolicyForwardingEntry_Counters",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv4-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv4Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv4Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced/state/ipv6-unicast YANG schema element.
type NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv6Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Afts_StateSynced",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Afts_StateSynced).Ipv6Unicast
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Afts_StateSynced) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Afts_StateSyncedPath represents the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Afts_StateSyncedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/afts/state-synced YANG schema element.
type NetworkInstance_Afts_StateSyncedPathAny struct {
	*ygnmi.NodePath
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPath {
	ps := &NetworkInstance_Afts_StateSynced_Ipv4UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv4 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv4-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv4-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv4-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv4Unicast() *NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny {
	ps := &NetworkInstance_Afts_StateSynced_Ipv4UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv4-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPath) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPath {
	ps := &NetworkInstance_Afts_StateSynced_Ipv6UnicastPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Unicast (leaf): State synced signal indicating consistent device snapshot of
// IPv6 unicast AFT entries. Before setting this flag to true
// next-hop-groups and next-hops AFT entries, associated with
// ipv6-unicast AFT entries, are expected to be consistent with
// device snapshot.
//
//	Defining module:      "openconfig-aft-state-synced"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ipv6-unicast"
//	Path from root:       "/network-instances/network-instance/afts/state-synced/state/ipv6-unicast"
func (n *NetworkInstance_Afts_StateSyncedPathAny) Ipv6Unicast() *NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny {
	ps := &NetworkInstance_Afts_StateSynced_Ipv6UnicastPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "ipv6-unicast"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_StateSyncedPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Afts_StateSynced] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Afts_StateSynced](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Afts_StateSyncedPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Afts_StateSynced] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Afts_StateSynced](
		"NetworkInstance_Afts_StateSynced",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/state/connection-point-id YANG schema element.
type NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/state/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/config/connection-point-id"
func (n *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "connection-point-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).ConnectionPointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPointPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point YANG schema element.
type NetworkInstance_ConnectionPointPathMapAny struct {
	*ygnmi.NodePath
}

// ConnectionPointId (leaf): An identifier for a connection point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/*/connection-point-id"
func (n *NetworkInstance_ConnectionPointPath) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPath {
	ps := &NetworkInstance_ConnectionPoint_ConnectionPointIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ConnectionPointId (leaf): An identifier for a connection point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/connection-point-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/*/connection-point-id"
func (n *NetworkInstance_ConnectionPointPathAny) ConnectionPointId() *NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_ConnectionPointIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "connection-point-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPath) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
	return ps
}

// EndpointAny (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPathAny) EndpointAny() *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": "*"},
			n,
		),
	}
	return ps
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
//
//	EndpointId: string
func (n *NetworkInstance_ConnectionPointPath) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPath {
	ps := &NetworkInstance_ConnectionPoint_EndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
	return ps
}

// Endpoint (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
//
//	EndpointId: string
func (n *NetworkInstance_ConnectionPointPathAny) Endpoint(EndpointId string) *NetworkInstance_ConnectionPoint_EndpointPathAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints", "endpoint"},
			map[string]interface{}{"endpoint-id": EndpointId},
			n,
		),
	}
	return ps
}

// EndpointMap (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPath) EndpointMap() *NetworkInstance_ConnectionPoint_EndpointPathMap {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointMap (list): A list of the endpoints (interfaces or remote
// connection points that can be used for this
// connection point). The active endpoint is selected
// based on the precedence that it is configured
// with.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoints/endpoint"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint"
func (n *NetworkInstance_ConnectionPointPathAny) EndpointMap() *NetworkInstance_ConnectionPoint_EndpointPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_EndpointPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoints"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance_ConnectionPoint",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPointPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint, bool) {
			ret := gs.(*oc.NetworkInstance).ConnectionPoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:connection-points"},
			PostRelPath: []string{"openconfig-network-instance:connection-point"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_Endpoint_ActivePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "active"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Active
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "endpoint-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).EndpointId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/precedence"
func (n *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "precedence"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Precedence
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/config/type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENDPOINT_TYPE](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENDPOINT_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_EndpointPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_EndpointPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint YANG schema element.
type NetworkInstance_ConnectionPoint_EndpointPathMapAny struct {
	*ygnmi.NodePath
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_ActivePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Active (leaf): When the backup endpoint is active, the value of this
// parameter is set to true
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/active"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/state/active"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Active() *NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_ActivePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "active"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointId (leaf): An identifier for the endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointId (leaf): An identifier for the endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/endpoint-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/endpoint-id"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) EndpointId() *NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_EndpointIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "endpoint-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_LocalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Local (container): Configuration and operational state parameters
// relating to a local interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "local"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Local() *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"local"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "precedence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Precedence (leaf): The precedence of the endpoint - the lowest precendence
// viable endpoint will be utilised as the active endpoint
// within a connection
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/precedence"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/precedence"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Precedence() *NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_PrecedencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "precedence"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_RemotePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Remote (container): Configuration and operational state parameters
// relating to a remote interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "remote"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Remote() *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"remote"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): The type of endpoint that is referred to by the current
// endpoint
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/*/type"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Type() *NetworkInstance_ConnectionPoint_Endpoint_TypePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_VxlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Configuration and operational state parameters
// relating to a VXLAN tunnel end-point interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan"
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Vxlan() *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint_Endpoint",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_EndpointPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint](
		"NetworkInstance_ConnectionPoint",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint).Endpoint
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoints"},
			PostRelPath: []string{"openconfig-network-instance:endpoint"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-offset"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockOffset
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-label-block-size"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).SiteLabelBlockSize
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/state/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/config/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Local).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Local) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Interface() *NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): The VE ID as defined in RFC4761 (VPLS) or CE ID as defined in
// RFC6624 (l2vpn) to uniquely identify this endpoint (site) as part
// of the BGP discovery of remote endpoints for layer 2 services.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockOffset (leaf): The VPLS label block offset that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-offset"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-offset"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockOffset() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockOffsetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-offset"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteLabelBlockSize (leaf): The VPLS label block size that is signaled with the 'site-id'.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-label-block-size"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/site-label-block-size"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) SiteLabelBlockSize() *NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SiteLabelBlockSizePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-label-block-size"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/local/*/subinterface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Subinterface() *NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Local_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_LocalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Local](
		"NetworkInstance_ConnectionPoint_Endpoint_Local",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "remote-system"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).RemoteSystem
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "site-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).SiteId
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/state/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/config/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "virtual-circuit-identifier"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote).VirtualCircuitIdentifier
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Remote) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny struct {
	*ygnmi.NodePath
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RemoteSystem (leaf): The IP address of the device which hosts the
// remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/remote-system"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/remote-system"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) RemoteSystem() *NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_RemoteSystemPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "remote-system"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SiteId (leaf): Identifies remote sites. When BGP discovery is used this
// is the customer edge identifier
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/site-id"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/site-id"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) SiteId() *NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_SiteIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "site-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VirtualCircuitIdentifier (leaf): The virtual-circuit identifier that identifies the
// connection at the remote end-point
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/virtual-circuit-identifier"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/remote/*/virtual-circuit-identifier"
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) VirtualCircuitIdentifier() *NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Remote_VirtualCircuitIdentifierPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "virtual-circuit-identifier"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_RemotePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Remote](
		"NetworkInstance_ConnectionPoint_Endpoint_Remote",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/state/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/config/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source-interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).SourceInterface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny struct {
	*ygnmi.NodePath
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): Description to identify the VXLAN tunnel endpoint It
// is a unique name identifying the overlay endpoint
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/description"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Description() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enabled (leaf): VXLAN tunnel endpoint administrative state.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enabled"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/enabled"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Enabled() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
	return ps
}

// EndpointPeerAny (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": "*"},
			n,
		),
	}
	return ps
}

// EndpointPeer (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
//
//	PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
	return ps
}

// EndpointPeer (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
//
//	PeerAddress: string
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeer(PeerAddress string) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers", "endpoint-peer"},
			map[string]interface{}{"peer-address": PeerAddress},
			n,
		),
	}
	return ps
}

// EndpointPeerMap (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointPeerMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointPeerMap (list): List of VTEP peers and associated state information
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-peers/endpoint-peer"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointPeerMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-peers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// EndpointVniAny (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniAny() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": "*"},
			n,
		),
	}
	return ps
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// EndpointVni (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
//
//	Vni: uint32
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVni(Vni uint32) *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis", "endpoint-vni"},
			map[string]interface{}{"vni": Vni},
			n,
		),
	}
	return ps
}

// EndpointVniMap (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) EndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EndpointVniMap (list): List of L2VNIs and L3VNIs learned on the local VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "endpoint-vnis/endpoint-vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) EndpointVniMap() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"endpoint-vnis"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SourceInterface (leaf): Source loopback interface name
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SourceInterface (leaf): Source loopback interface name
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source-interface"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/*/source-interface"
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) SourceInterface() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_SourceInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source-interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_VxlanPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath) State() ygnmi.SingletonQuery[[]uint32] {
	return ygnmi.NewSingletonQuery[[]uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).ControlPlaneVnis
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny) State() ygnmi.WildcardQuery[[]uint32] {
	return ygnmi.NewWildcardQuery[[]uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).ControlPlaneVnis
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peer-address"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "peer-address"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"peer-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointPeer_PeerState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointPeer_PeerState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointPeer_PeerState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointPeer_PeerState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointPeer_PeerState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointPeer_PeerState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).PeerState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).RouterMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).Uptime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer).Uptime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny struct {
	*ygnmi.NodePath
}

// ControlPlaneVnis (leaf-list): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlPlaneVnis (leaf-list): The control-plane VNIs are all of the VNIs that are discovered by the
// control-plane behind this peer VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-plane-vnis"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/control-plane-vnis"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) ControlPlaneVnis() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_ControlPlaneVnisPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "control-plane-vnis"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/*/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerAddress (leaf): IP address of the remote VXLAN Tunnel Endpoint peer
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/peer-address"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/*/peer-address"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerAddress() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "peer-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerState (leaf): State parameters related to the remote VTEP peer state
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/peer-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) PeerState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_PeerStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouterMac (leaf): MAC address of the remote VTEP
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/router-mac"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/router-mac"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) RouterMac() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_RouterMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "router-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Uptime (leaf): This timestamp indicates the time elapsed relative to the moment that
// the remote VTEP peer was discovered.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/uptime"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-peers/endpoint-peer/state/uptime"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) Uptime() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer_UptimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "uptime"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointPeer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-peers"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-peer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeerPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointPeer, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointPeer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-peers"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-peer"},
		},
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).BridgeDomain
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).L3VrfName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath) State() ygnmi.SingletonQuery[oc.E_Evpn_LearningMode] {
	return ygnmi.NewSingletonQuery[oc.E_Evpn_LearningMode](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Evpn_LearningMode, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).LearningMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny) State() ygnmi.WildcardQuery[oc.E_Evpn_LearningMode] {
	return ygnmi.NewWildcardQuery[oc.E_Evpn_LearningMode](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Evpn_LearningMode, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).LearningMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).MultidestinationTraffic
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTraffic_Union, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).MultidestinationTraffic
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_SviState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_SviState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_SviState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).SviState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_SviState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_SviState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_SviState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).SviState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vni"
//	Path from root:       ""
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_VniState] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_VniState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_VniState] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniState](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniState, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath) State() ygnmi.SingletonQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewSingletonQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny) State() ygnmi.WildcardQuery[oc.E_EndpointVni_VniType] {
	return ygnmi.NewWildcardQuery[oc.E_EndpointVni_VniType](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EndpointVni_VniType, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni).VniType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap represents the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni YANG schema element.
type NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny struct {
	*ygnmi.NodePath
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BridgeDomain (leaf): This reflects the configured VLAN or Bridge Domain that maps to this
// L2VNI in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/bridge-domain"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/bridge-domain"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) BridgeDomain() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_BridgeDomainPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "bridge-domain"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3VrfName (leaf): This refects the configured VRF instance that maps to this L3VNI
// that is used for routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vrf-name"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/l3-vrf-name"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) L3VrfName() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_L3VrfNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vrf-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LearningMode (leaf): Indicates whether the learning mode for this VNI is either
// control-plane or data-plane
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/learning-mode"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/learning-mode"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) LearningMode() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_LearningModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "learning-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MultidestinationTraffic (leaf): The data plane for overlays needs to handle the transport of
// multidestination traffic. Multidestination traffic is typically
// referred to as (BUM) which stands for broadcast, unknown unicast,
// or multicast. The two most common methods that can accommodate this
// replication and transport in the underlay are IP multicast and
// ingress replication
// (also called head-end replication or unicast mode).
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multidestination-traffic"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/multidestination-traffic"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) MultidestinationTraffic() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_MultidestinationTrafficPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "multidestination-traffic"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SviState (leaf): Operational status of the SVI mapped to the L3VNI that is used for
// routing between subnets in the VXLAN fabric
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/svi-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/svi-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) SviState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_SviStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "svi-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): L2VNI or L3VNI Identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/*/vni"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) Vni() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniState (leaf): Operational state of the L2VNI or L3VNI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-state"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-state"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniState() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// VniType (leaf): The type of virtual network identfier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni-type"
//	Path from root:       "/network-instances/network-instance/connection-points/connection-point/endpoints/endpoint/vxlan/endpoint-vnis/endpoint-vni/state/vni-type"
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) VniType() *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny {
	ps := &NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni_VniTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vni-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-vni"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVniPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni](
		"NetworkInstance_ConnectionPoint_Endpoint_Vxlan",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan_EndpointVni, bool) {
			ret := gs.(*oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan).EndpointVni
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_ConnectionPoint_Endpoint_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:endpoint-vnis"},
			PostRelPath: []string{"openconfig-network-instance:endpoint-vni"},
		},
	)
}

// NetworkInstance_Encapsulation_ControlWordPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_ControlWordPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/control-word YANG schema element.
type NetworkInstance_Encapsulation_ControlWordPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Encapsulation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Encapsulation",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/control-word"
func (n *NetworkInstance_Encapsulation_ControlWordPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Encapsulation",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).ControlWord
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Encapsulation_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/encapsulation-type YANG schema element.
type NetworkInstance_Encapsulation_EncapsulationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/encapsulation-type"
func (n *NetworkInstance_Encapsulation_EncapsulationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Encapsulation_LabelAllocationModePath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Encapsulation_LabelAllocationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation/state/label-allocation-mode YANG schema element.
type NetworkInstance_Encapsulation_LabelAllocationModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/state/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/config/label-allocation-mode"
func (n *NetworkInstance_Encapsulation_LabelAllocationModePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE](
		"NetworkInstance_Encapsulation",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "label-allocation-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_LABEL_ALLOCATION_MODE, bool) {
			ret := gs.(*oc.NetworkInstance_Encapsulation).LabelAllocationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Encapsulation) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_EncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_EncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/encapsulation YANG schema element.
type NetworkInstance_EncapsulationPathAny struct {
	*ygnmi.NodePath
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/control-word"
func (n *NetworkInstance_EncapsulationPath) ControlWord() *NetworkInstance_Encapsulation_ControlWordPath {
	ps := &NetworkInstance_Encapsulation_ControlWordPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlWord (leaf): Whether the control-word should be used for the network
// instance
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/control-word"
func (n *NetworkInstance_EncapsulationPathAny) ControlWord() *NetworkInstance_Encapsulation_ControlWordPathAny {
	ps := &NetworkInstance_Encapsulation_ControlWordPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/encapsulation-type"
func (n *NetworkInstance_EncapsulationPath) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePath {
	ps := &NetworkInstance_Encapsulation_EncapsulationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// sending traffic from this network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/encapsulation-type"
func (n *NetworkInstance_EncapsulationPathAny) EncapsulationType() *NetworkInstance_Encapsulation_EncapsulationTypePathAny {
	ps := &NetworkInstance_Encapsulation_EncapsulationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPath) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePath {
	ps := &NetworkInstance_Encapsulation_LabelAllocationModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LabelAllocationMode (leaf): The label allocation mode to be used for L3 entries
// in the network instance
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/label-allocation-mode"
//	Path from root:       "/network-instances/network-instance/encapsulation/*/label-allocation-mode"
func (n *NetworkInstance_EncapsulationPathAny) LabelAllocationMode() *NetworkInstance_Encapsulation_LabelAllocationModePathAny {
	ps := &NetworkInstance_Encapsulation_LabelAllocationModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "label-allocation-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EncapsulationPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Encapsulation] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Encapsulation](
		"NetworkInstance_Encapsulation",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_EvpnPath represents the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_EvpnPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn YANG schema element.
type NetworkInstance_EvpnPathAny struct {
	*ygnmi.NodePath
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPath) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
	return ps
}

// EvpnInstanceAny (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceAny() *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": "*"},
			n,
		),
	}
	return ps
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
//
//	Evi: string
func (n *NetworkInstance_EvpnPath) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePath {
	ps := &NetworkInstance_Evpn_EvpnInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
	return ps
}

// EvpnInstance (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
//
//	Evi: string
func (n *NetworkInstance_EvpnPathAny) EvpnInstance(Evi string) *NetworkInstance_Evpn_EvpnInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances", "evpn-instance"},
			map[string]interface{}{"evi": Evi},
			n,
		),
	}
	return ps
}

// EvpnInstanceMap (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPath) EvpnInstanceMap() *NetworkInstance_Evpn_EvpnInstancePathMap {
	ps := &NetworkInstance_Evpn_EvpnInstancePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EvpnInstanceMap (list): An EVPN instance (EVI) comprises Customer Edge devices
// (CEs) that are connected to Provider Edge devices (PEs). One
// network instance (representing a single MAC VRF) can
// participate in one or more EVPN Instances. For each EVPN instance
// in which the forwarding instance participates an
// EVPN instance needs to be created.
//
// The model supports BGP MPLS-Based Ethernet VPNs
// (RFC 7432) and  Network Virtualization Overlay Solution
// Using Ethernet VPN (RFC 8365). The use of MPLS or VXLAN
// is selected via the encapsulation container within
// EVPN instance. One use case requiring participating in
// two EVIs is the Interconnect Solution for EVPN Overlay
// networks (see draft-ietf-bess-dci-evpn-overlay-10)
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "evpn-instances/evpn-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance"
func (n *NetworkInstance_EvpnPathAny) EvpnInstanceMap() *NetworkInstance_Evpn_EvpnInstancePathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstancePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"evpn-instances"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_EvpnPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn](
		"NetworkInstance_Evpn",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "control-word-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ControlWordEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath) State() ygnmi.SingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny) State() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath) Config() ygnmi.ConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_NetworkInstanceTypes_ENCAPSULATION](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "encapsulation-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NetworkInstanceTypes_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).EncapsulationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_EviPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/evi"
func (n *NetworkInstance_Evpn_EvpnInstance_EviPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).Evi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath) State() ygnmi.SingletonQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewSingletonQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny) State() ygnmi.WildcardQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath) Config() ygnmi.ConfigQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewConfigQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny) Config() ygnmi.WildcardQuery[oc.E_EvpnInstance_ReplicationMode] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnInstance_ReplicationMode](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "replication-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnInstance_ReplicationMode, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ReplicationMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "route-distinguisher"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Evpn_EvpnInstance_RouteDistinguisher_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).RouteDistinguisher
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath) State() ygnmi.SingletonQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/state/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny) State() ygnmi.WildcardQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath) Config() ygnmi.ConfigQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/config/service-type"
func (n *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny) Config() ygnmi.WildcardQuery[oc.E_EvpnTypes_EVPN_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_EvpnTypes_EVPN_TYPE](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "service-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_EvpnTypes_EVPN_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).ServiceType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstancePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstancePathMapAny struct {
	*ygnmi.NodePath
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
	return ps
}

// BComponentAny (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": "*"},
			n,
		),
	}
	return ps
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
//
//	BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
	return ps
}

// BComponent (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
//
//	BComponentName: string
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponent(BComponentName string) *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb", "b-component"},
			map[string]interface{}{"b-component-name": BComponentName},
			n,
		),
	}
	return ps
}

// BComponentMap (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePath) BComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// BComponentMap (list): List of B-components. The b-component learns and forwards
// traffic on the backbone in order to reduce the number of
// BGP MAC Advertisement routes by aggregating Customer/Client
// MAC (C-MAC) addresses via Provider Backbone MAC (B-MAC) address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "pbb/b-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) BComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"pbb"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ControlWordEnabled (leaf): When true, the control word is signaled and sent.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ControlWordEnabled() *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ControlWordEnabled (leaf): When true, the control word is signaled and sent.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/control-word-enabled"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/control-word-enabled"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ControlWordEnabled() *NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ControlWordEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "control-word-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EncapsulationType (leaf): The on-the-wire encapsulation that should be used when
// exchanging traffic from this network instance to/from
// destinations belonging to the EVI. The use of MPLS or
// VXLAN is selected using this container.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/encapsulation-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/encapsulation-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) EncapsulationType() *NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_EncapsulationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "encapsulation-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance (EVI) identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance (EVI) identifier
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/evi"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/evi"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Evi() *NetworkInstance_Evpn_EvpnInstance_EviPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ImportExportPolicy() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_MulticastMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ReplicationModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replication-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReplicationMode (leaf): Replication mode to handle BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/replication-mode"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/replication-mode"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ReplicationMode() *NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ReplicationModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "replication-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePath) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// RouteDistinguisher (leaf): Route Distinguisher (RD) associated to the EVPN-instance.
// An RD MUST be assigned for a given EVPN-instance on a PE.
// This RD MUST be unique across all EVPN-instances on a PE.
// The route-distinguisher at this level overrides
// the route-distinguisher value defined under
// network-instance/config.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/route-distinguisher"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/route-distinguisher"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) RouteDistinguisher() *NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_RouteDistinguisherPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "route-distinguisher"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePath) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ServiceTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServiceType (leaf): Specifies the type of EVPN that is being created according
// to the values in the EVPN_TYPES identity.
// The options are VLAN-based, VLAN-Bundle or VLAN-aware.
// VLAN-Based services consists of an EVPN instance of only a
// single broadcast domain, the proper network-instance type used
// for this kind of services is L2VSI.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/service-type"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/*/service-type"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) ServiceType() *NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ServiceTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "service-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePath) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_VxlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vxlan (container): Top container related to Overlay Solution in EVPN.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "vxlan"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan"
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Vxlan() *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_VxlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"vxlan"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstancePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance](
		"NetworkInstance_Evpn",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn).EvpnInstance
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:evpn-instances"},
			PostRelPath: []string{"openconfig-network-instance:evpn-instance"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "b-component-name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BComponentName
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/state/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/config/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "backbone-src-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).BackboneSrcMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny struct {
	*ygnmi.NodePath
}

// BComponentName (leaf): Type of the associated b-component
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "b-component-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BComponentName (leaf): Type of the associated b-component
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/b-component-name"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/b-component-name"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BComponentName() *NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BComponentNamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "b-component-name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// BackboneSrcMac (leaf): EVPN will run independently in both components,
// the I-component MAC-VRF and B-component MAC-VRF.
// The backbone-src-mac assigns the b-component MAC.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/backbone-src-mac"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/*/backbone-src-mac"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) BackboneSrcMac() *NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_BackboneSrcMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "backbone-src-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IComponentAny (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
	return ps
}

// IComponentAny (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentAny() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": "*"},
			n,
		),
	}
	return ps
}

// IComponent (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
//
//	ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
	return ps
}

// IComponent (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
//
//	ISid: uint32
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponent(ISid uint32) *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components", "i-component"},
			map[string]interface{}{"i-sid": ISid},
			n,
		),
	}
	return ps
}

// IComponentMap (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) IComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IComponentMap (list): list of i-components
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "i-components/i-component"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) IComponentMap() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"i-components"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponentPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent](
		"NetworkInstance_Evpn_EvpnInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance).BComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:pbb"},
			PostRelPath: []string{"openconfig-network-instance:b-component"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/state/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/config/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "i-sid"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent).ISid
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny struct {
	*ygnmi.NodePath
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/*/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "i-sid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ISid (leaf): Service Instance Identifier 24 bits and global within a PBB
// network. I-SID defines the service instance that the frame should be
// mapped to.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/i-sid"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/pbb/b-component/i-components/i-component/*/i-sid"
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) ISid() *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent_ISidPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "i-sid"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap) State() ygnmi.SingletonQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewSingletonQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny) State() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMap) Config() ygnmi.ConfigQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewConfigQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_BComponent_IComponentPathMapAny) Config() ygnmi.WildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent] {
	return ygnmi.NewWildcardQuery[map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent](
		"NetworkInstance_Evpn_EvpnInstance_BComponent",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint32]*oc.NetworkInstance_Evpn_EvpnInstance_BComponent_IComponent, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_BComponent).IComponent
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_BComponent) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:i-components"},
			PostRelPath: []string{"openconfig-network-instance:i-component"},
		},
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/state/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/config/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny struct {
	*ygnmi.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/export-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/import-export-policy/*/import-route-target"
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_ImportExportPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy](
		"NetworkInstance_Evpn_EvpnInstance_ImportExportPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "host-reachability-bgp"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).HostReachabilityBgp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastGroup
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "multicast-mask"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).MulticastMask
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpoint
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "overlay-endpoint-network-instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).OverlayEndpointNetworkInstance
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/state/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/config/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan).Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_VxlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_VxlanPathAny struct {
	*ygnmi.NodePath
}

// AnycastSourceInterface (container): Anycast source interface references
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "anycast-source-interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AnycastSourceInterface (container): Anycast source interface references
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "anycast-source-interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) AnycastSourceInterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"anycast-source-interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostReachabilityBgp (leaf): Enable or Disable the BGP control plane to be
// used to exchange  updates from the NVE interface
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-reachability-bgp"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/host-reachability-bgp"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) HostReachabilityBgp() *NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_HostReachabilityBgpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-reachability-bgp"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastGroup (leaf): Multicast group address for BUM traffic
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-group"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-group"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastGroup() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MulticastMask (leaf): Multicast group address mask
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/multicast-mask"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/multicast-mask"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) MulticastMask() *NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_MulticastMaskPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "multicast-mask"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpoint (leaf): Associate the EVI with an VXLAN Endpoint defined under connection
// points. The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpoint() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OverlayEndpointNetworkInstance (leaf): The network instance to resolve the overlay-endpoint within.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/overlay-endpoint-network-instance"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/overlay-endpoint-network-instance"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) OverlayEndpointNetworkInstance() *NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_OverlayEndpointNetworkInstancePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "overlay-endpoint-network-instance"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vni (leaf): Virtual Network Identifier (VNI) associated to the EVI. This VNI is used for
// ingress and egress in the VXLAN domain.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vni"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/*/vni"
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Vni() *NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_VxlanPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/state/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/config/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath represents the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface YANG schema element.
type NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/interface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Interface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/evpn/evpn-instances/evpn-instance/vxlan/anycast-source-interface/*/subinterface"
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Subinterface() *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny {
	ps := &NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface](
		"NetworkInstance_Evpn_EvpnInstance_Vxlan_AnycastSourceInterface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_AnycastGatewayMacPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_AnycastGatewayMacPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/anycast-gateway-mac YANG schema element.
type NetworkInstance_Fdb_AnycastGatewayMacPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/state/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/config/anycast-gateway-mac"
func (n *NetworkInstance_Fdb_AnycastGatewayMacPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "anycast-gateway-mac"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).AnycastGatewayMac
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression YANG schema element.
type NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/state/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/config/flood-unknown-unicast-supression"
func (n *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "flood-unknown-unicast-supression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).FloodUnknownUnicastSupression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacAgingTimePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacAgingTimePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-aging-time YANG schema element.
type NetworkInstance_Fdb_MacAgingTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-aging-time"
func (n *NetworkInstance_Fdb_MacAgingTimePathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-aging-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacAgingTime
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacLearningPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacLearningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/mac-learning YANG schema element.
type NetworkInstance_Fdb_MacLearningPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/state/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/config/mac-learning"
func (n *NetworkInstance_Fdb_MacLearningPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-learning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MacLearning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MaximumEntriesPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MaximumEntriesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/state/maximum-entries YANG schema element.
type NetworkInstance_Fdb_MaximumEntriesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/state/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/config/maximum-entries"
func (n *NetworkInstance_Fdb_MaximumEntriesPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "maximum-entries"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb).MaximumEntries
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_FdbPath represents the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_FdbPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb YANG schema element.
type NetworkInstance_FdbPathAny struct {
	*ygnmi.NodePath
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/*/anycast-gateway-mac"
func (n *NetworkInstance_FdbPath) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPath {
	ps := &NetworkInstance_Fdb_AnycastGatewayMacPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AnycastGatewayMac (leaf): Configure the anycast gateway MAC address that all VTEPs
// use for the network instance. When a VM sends an Address
// Resolution Protocol (ARP) request for the anycast gateway
// IP address in a VXLAN virtual network, the VTEP responds
// with the configured anycast MAC address.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/anycast-gateway-mac"
//	Path from root:       "/network-instances/network-instance/fdb/*/anycast-gateway-mac"
func (n *NetworkInstance_FdbPathAny) AnycastGatewayMac() *NetworkInstance_Fdb_AnycastGatewayMacPathAny {
	ps := &NetworkInstance_Fdb_AnycastGatewayMacPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "anycast-gateway-mac"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ArpProxy (container): Top Container related to ARP-Proxy
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "arp-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPath) ArpProxy() *NetworkInstance_Fdb_ArpProxyPath {
	ps := &NetworkInstance_Fdb_ArpProxyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ArpProxy (container): Top Container related to ARP-Proxy
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "arp-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy"
func (n *NetworkInstance_FdbPathAny) ArpProxy() *NetworkInstance_Fdb_ArpProxyPathAny {
	ps := &NetworkInstance_Fdb_ArpProxyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"arp-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/*/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPath) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath {
	ps := &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// FloodUnknownUnicastSupression (leaf): Enable (TRUE) or disable (FALSE) the Unknown Unicast Flooding
// Suppression. If the Unknown Unicast Flooding Suppression is on,
// the unicast traffic towards an unknown host will be dropped.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/flood-unknown-unicast-supression"
//	Path from root:       "/network-instances/network-instance/fdb/*/flood-unknown-unicast-supression"
func (n *NetworkInstance_FdbPathAny) FloodUnknownUnicastSupression() *NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny {
	ps := &NetworkInstance_Fdb_FloodUnknownUnicastSupressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "flood-unknown-unicast-supression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2rib"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPath) L2Rib() *NetworkInstance_Fdb_L2RibPath {
	ps := &NetworkInstance_Fdb_L2RibPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// L2Rib (container): Operational state container for MAC address and MAC-IP address
// information that is learned and installed into the MAC VRF Layer 2
// Routing Information Base (L2RIB)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "l2rib"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib"
func (n *NetworkInstance_FdbPathAny) L2Rib() *NetworkInstance_Fdb_L2RibPathAny {
	ps := &NetworkInstance_Fdb_L2RibPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"l2rib"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-aging-time"
func (n *NetworkInstance_FdbPath) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePath {
	ps := &NetworkInstance_Fdb_MacAgingTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAgingTime (leaf): The number of seconds of inactivity after which the entry
// in the local FDB is timed out.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-aging-time"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-aging-time"
func (n *NetworkInstance_FdbPathAny) MacAgingTime() *NetworkInstance_Fdb_MacAgingTimePathAny {
	ps := &NetworkInstance_Fdb_MacAgingTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-aging-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-learning"
func (n *NetworkInstance_FdbPath) MacLearning() *NetworkInstance_Fdb_MacLearningPath {
	ps := &NetworkInstance_Fdb_MacLearningPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-learning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacLearning (leaf): When this leaf is set to true, MAC learning is enabled for
// the network instance, such that MAC addresses are learned
// from ingress frames and added to the FDB.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-learning"
//	Path from root:       "/network-instances/network-instance/fdb/*/mac-learning"
func (n *NetworkInstance_FdbPathAny) MacLearning() *NetworkInstance_Fdb_MacLearningPathAny {
	ps := &NetworkInstance_Fdb_MacLearningPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-learning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPath) MacMobility() *NetworkInstance_Fdb_MacMobilityPath {
	ps := &NetworkInstance_Fdb_MacMobilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacMobility (container): Top grouping the configuration and state data related to mac
// mobility.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility"
func (n *NetworkInstance_FdbPathAny) MacMobility() *NetworkInstance_Fdb_MacMobilityPathAny {
	ps := &NetworkInstance_Fdb_MacMobilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-mobility"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPath) MacTable() *NetworkInstance_Fdb_MacTablePath {
	ps := &NetworkInstance_Fdb_MacTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Table of learned or statically configured MAC addresses and
// corresponding VLANs in the bridge domain
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table"
func (n *NetworkInstance_FdbPathAny) MacTable() *NetworkInstance_Fdb_MacTablePathAny {
	ps := &NetworkInstance_Fdb_MacTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/*/maximum-entries"
func (n *NetworkInstance_FdbPath) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPath {
	ps := &NetworkInstance_Fdb_MaximumEntriesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaximumEntries (leaf): The maximum number of MAC address entries that should be
// accepted into the FDB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/maximum-entries"
//	Path from root:       "/network-instances/network-instance/fdb/*/maximum-entries"
func (n *NetworkInstance_FdbPathAny) MaximumEntries() *NetworkInstance_Fdb_MaximumEntriesPathAny {
	ps := &NetworkInstance_Fdb_MaximumEntriesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "maximum-entries"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdProxy (container): Top Container related to ND-Proxy.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nd-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPath) NdProxy() *NetworkInstance_Fdb_NdProxyPath {
	ps := &NetworkInstance_Fdb_NdProxyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NdProxy (container): Top Container related to ND-Proxy.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "nd-proxy"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy"
func (n *NetworkInstance_FdbPathAny) NdProxy() *NetworkInstance_Fdb_NdProxyPathAny {
	ps := &NetworkInstance_Fdb_NdProxyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"nd-proxy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_FdbPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb](
		"NetworkInstance_Fdb",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression YANG schema element.
type NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "arp-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).ArpSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_ArpProxy_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/enable"
func (n *NetworkInstance_Fdb_ArpProxy_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_ArpProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_ArpProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_ArpProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_ArpProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/arp-proxy YANG schema element.
type NetworkInstance_Fdb_ArpProxyPathAny struct {
	*ygnmi.NodePath
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPath) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath {
	ps := &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ArpSuppression (leaf): Enable (TRUE) or disable (FALSE) ARP suppression. If true
// the  Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network are suppressed.
// Address Resolution Protocol (ARP) suppression is a
// technique used to reduce the amount of ARP broadcast
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/arp-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/arp-suppression"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) ArpSuppression() *NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_ArpSuppressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "arp-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/enable"
func (n *NetworkInstance_Fdb_ArpProxyPath) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePath {
	ps := &NetworkInstance_Fdb_ArpProxy_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) ARP proxy. If true
// a proxy server on the network answers the
// Address Resolution Protocol (ARP) queries for an
// IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/enable"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Enable() *NetworkInstance_Fdb_ArpProxy_EnablePathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/arp-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_ArpProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_ArpProxy_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_ArpProxyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_ArpProxy](
		"NetworkInstance_Fdb_ArpProxy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2RibPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2RibPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib YANG schema element.
type NetworkInstance_Fdb_L2RibPathAny struct {
	*ygnmi.NodePath
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-ip-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacIpTable (container): Operational state container for MAC-IP address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-ip-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacIpTable() *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-ip-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPath) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacTable (container): Operational state container for MAC address information installed
// into the MAC VRF of the L2RIB
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-table"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table"
func (n *NetworkInstance_Fdb_L2RibPathAny) MacTable() *NetworkInstance_Fdb_L2Rib_MacTablePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"mac-table"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2RibPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib](
		"NetworkInstance_Fdb_L2Rib",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2RibPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib](
		"NetworkInstance_Fdb_L2Rib",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "host-ip": "*"},
			n,
		),
	}
	return ps
}

// WithMacAddress sets NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny's key "mac-address" to the specified value.
// MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) WithMacAddress(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "mac-address", MacAddress)
	return n
}

// WithHostIp sets NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny's key "host-ip" to the specified value.
// HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) WithHostIp(HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "host-ip", HostIp)
	return n
}

// Entry (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
//
//	MacAddress: string
//	HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
//
//	MacAddress: string
//	HostIp: string
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) Entry(MacAddress string, HostIp string) *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "host-ip": HostIp},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) EntryMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC-IP addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) EntryMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "host-ip"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "host-ip"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"host-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).HostIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L3Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).L3Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HostIp (leaf): Host IP address of the CE device for the L2RIB MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/host-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/host-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) HostIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_HostIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "host-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L2VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L3Vni (leaf): Symmetric IRB uses the same forwarding semantics when routing
// between IP subnets with VRF Lite or MPLS L3VPNs. With symmetric IRB,
// all traffic egressing and returning from a VTEP uses the same VNI.
// Specifically, the same Layer 3 VNI (L3VNI) associated with the VRF
// is used for all routed traffic. Layer3 VNI used for inter-subnet
// routing
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l3-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/l3-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) L3Vni() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_L3VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l3-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Key]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath) State() ygnmi.SingletonQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny) State() ygnmi.WildcardQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath) State() ygnmi.SingletonQuery[oc.E_Producer_Producer] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny) State() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath) Config() ygnmi.ConfigQuery[oc.E_Producer_Producer] {
	return ygnmi.NewConfigQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny) Config() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer_StickyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMap) State() ygnmi.SingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_ProducerPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_Entry",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
