/*
Package networkinstance is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.9.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package networkinstance

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_PeerIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_ResolvedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewSingletonQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewWildcardQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacIpTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-ip-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacIpTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*"},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
//
//	MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
//
//	MacAddress: string
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) Entry(MacAddress string) *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) EntryMap() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) EntryMap() *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): List of next hop attributes for each MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroupAny (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroupAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": "*"},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroup (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
//
//	Id: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroup(Id uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups", "next-hop-group"},
			map[string]interface{}{"id": Id},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopGroupMap (list): An individual set of next-hops grouped into a common group.
// Each entry within an L2RIB can optionally point to a
// next-hop-group.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hop-groups/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) NextHopGroupMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hop-groups"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).L2Vni
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "mac-address"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN Instance Identifier for the MAC or MAC-IP
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// L2Vni (leaf): Layer2 VNI segment mapped to given vlan-id
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/l2-vni"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/l2-vni"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) L2Vni() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_L2VniPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "l2-vni"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address of the L2RIB MAC or MAC-IP entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// ProducerAny (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerAny() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": "*"},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// Producer (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
//
//	Producer: oc.E_Producer_Producer
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Producer(Producer oc.E_Producer_Producer) *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers", "producer"},
			map[string]interface{}{"producer": Producer},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ProducerMap (list): List of producers for each MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producers/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) ProducerMap() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"producers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC or MAC-IP address is present.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DerivedFromMacIp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DerivedFromMacIp
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DirectlyReceived
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).DirectlyReceived
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath) State() ygnmi.SingletonQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny) State() ygnmi.WildcardQuery[oc.E_Producer_MobilityState] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_MobilityState](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_MobilityState, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).MobilityState
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHop
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath) State() ygnmi.SingletonQuery[[]uint64] {
	return ygnmi.NewSingletonQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny) State() ygnmi.WildcardQuery[[]uint64] {
	return ygnmi.NewWildcardQuery[[]uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).NextHopGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath) State() ygnmi.SingletonQuery[oc.E_Producer_Producer] {
	return ygnmi.NewSingletonQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny) State() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath) Config() ygnmi.ConfigQuery[oc.E_Producer_Producer] {
	return ygnmi.NewConfigQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "producer"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny) Config() ygnmi.WildcardQuery[oc.E_Producer_Producer] {
	return ygnmi.NewWildcardQuery[oc.E_Producer_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"producer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Producer_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Producer
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).SeqNumber
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer).Sticky
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny struct {
	*ygnmi.NodePath
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DerivedFromMacIp (leaf): Derived from BGP MAC-IP route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/derived-from-mac-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/derived-from-mac-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DerivedFromMacIp() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DerivedFromMacIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "derived-from-mac-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DirectlyReceived (leaf): BGP learned MAC route-type 2
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/directly-received"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/directly-received"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) DirectlyReceived() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_DirectlyReceivedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "directly-received"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI) for local and remote routes.
// ESI is used to resolve the next-hop-group. All mac-addresses
// learned with the same ESI should point to the same next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MobilityState (leaf): Indicates if learned MAC address is duplicate or frozen
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mobility-state"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/mobility-state"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) MobilityState() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_MobilityStatePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "mobility-state"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHop (leaf): Leafref next-hop for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHop() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopGroup (leaf-list): Leafref next-hop-group for the MAC-IP table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/next-hop-group"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/next-hop-group"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) NextHopGroup() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_NextHopGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "next-hop-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Producer (leaf): Source of the learned L2RIB route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/producer"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/*/producer"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Producer() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_ProducerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "producer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SeqNumber (leaf): The sequence number is used to ensure that PEs retain the correct
// MAC/IP Advertisement route when multiple updates occur for the same
// MAC address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/seq-number"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/seq-number"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) SeqNumber() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_SeqNumberPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "seq-number"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Sticky (leaf): MAC address is sticky and not subjected to MAC moves
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sticky"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/entries/entry/producers/producer/state/sticky"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) Sticky() *NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer_StickyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "sticky"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMap) State() ygnmi.SingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewSingletonQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_Entry_ProducerPathMapAny) State() ygnmi.WildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer] {
	return ygnmi.NewWildcardQuery[map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer](
		"NetworkInstance_Fdb_L2Rib_MacTable_Entry",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.E_Producer_Producer]*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry_Producer, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry).Producer
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:producers"},
			PostRelPath: []string{"openconfig-network-instance:producer"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Label
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).PeerIp
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Resolved
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A unique entry for the next-hop.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/interface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Interface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Label (leaf): Next hop label representing the l2vni for the route
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/label"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/label"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Label() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_LabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PeerIp (leaf): Next hop peer address
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/peer-ip"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/peer-ip"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) PeerIp() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_PeerIpPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "peer-ip"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Resolved (leaf): Indicates if the path is eligible for forwarding as per evpn mass
// withdraw procedures as defined in RFC 7432
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/resolved"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/resolved"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Resolved() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_ResolvedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "resolved"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hops/next-hop/state/subinterface"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) Subinterface() *NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHop_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "esi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Esi
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "id"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Id
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath) State() ygnmi.SingletonQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewSingletonQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny) State() ygnmi.WildcardQuery[oc.E_NextHopGroup_Type] {
	return ygnmi.NewWildcardQuery[oc.E_NextHopGroup_Type](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NextHopGroup_Type, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny struct {
	*ygnmi.NodePath
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Esi (leaf): Ethernet Segment Identifier (ESI)
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/esi"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/esi"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Esi() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_EsiPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "esi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for the next-hop-group. This index is not
// expected to be consistent across reboots, or reprogramming of
// the next-hop-group. When updating a next-hop-group, if the group
// is removed by the system or assigned an alternate identifier, the
// system should send telemetry notifications deleting the previous
// identifier. If the identifier of the next-hop-group is changed,
// all L2RIB entries that reference it must also be updated.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/*/id"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Id() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHopAny (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHopAny() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHop (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
//
//	Index: uint64
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHop(Index uint64) *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops", "next-hop"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NextHopMap (list): An individual next-hop within the next-hop-group. Each next-hop is a
// reference to an entry within the next-hop list.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "next-hops/next-hop"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) NextHopMap() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"next-hops"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Type of next-hop-group
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/state/type"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) Type() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroupPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup](
		"NetworkInstance_Fdb_L2Rib_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable).NextHopGroup
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hop-groups"},
			PostRelPath: []string{"openconfig-network-instance:next-hop-group"},
		},
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/state/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "index"
//	Path from root:       ""
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop).Index
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop YANG schema element.
type NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny struct {
	*ygnmi.NodePath
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): A reference to the identifier for the next-hop to which the entry in the
// next-hop group corresponds.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/fdb/l2rib/mac-table/next-hop-groups/next-hop-group/next-hops/next-hop/*/index"
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny) Index() *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny {
	ps := &NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMap) State() ygnmi.SingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewSingletonQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHopPathMapAny) State() ygnmi.WildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop] {
	return ygnmi.NewWildcardQuery[map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop](
		"NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint64]*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup_NextHop, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup).NextHop
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_L2Rib_MacTable_NextHopGroup) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:next-hops"},
			PostRelPath: []string{"openconfig-network-instance:next-hop"},
		},
	)
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobility
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window YANG schema element.
type NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/state/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/config/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacMobility",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-mobility-window"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacMobility).MacMobilityWindow
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacMobility) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacMobilityPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacMobilityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-mobility YANG schema element.
type NetworkInstance_Fdb_MacMobilityPathAny struct {
	*ygnmi.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobility (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its MAC address) to move from one
// Ethernet segment to another; this is referred to as 'MAC Mobility'
// or 'MAC move. The configuration attributes includes: mac-mobility-window
// and mac-mobility-threshold
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobility() *NetworkInstance_Fdb_MacMobility_MacMobilityPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityThreshold (leaf): The number of MAC mobility events that are detected for a
// given MAC address within the detection-window before it is identified
// as a duplicate MAC address. Once the detection threshold is reached,
// updates for the MAC address are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-threshold"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityThreshold() *NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPath) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacMobilityWindow (leaf): The time interval used in detecting a duplicate MAC address.
// The value can be from 5 through 600 seconds.
// The default is 180 seconds
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-mobility-window"
//	Path from root:       "/network-instances/network-instance/fdb/mac-mobility/*/mac-mobility-window"
func (n *NetworkInstance_Fdb_MacMobilityPathAny) MacMobilityWindow() *NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny {
	ps := &NetworkInstance_Fdb_MacMobility_MacMobilityWindowPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-mobility-window"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacMobilityPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacMobility] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacMobility](
		"NetworkInstance_Fdb_MacMobility",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table YANG schema element.
type NetworkInstance_Fdb_MacTablePathAny struct {
	*ygnmi.NodePath
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePath) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
	return ps
}

// EntryAny (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryAny() *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": "*", "vlan": "*"},
			n,
		),
	}
	return ps
}

// WithMacAddress sets NetworkInstance_Fdb_MacTable_EntryPathAny's key "mac-address" to the specified value.
// MacAddress: string
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) WithMacAddress(MacAddress string) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "mac-address", MacAddress)
	return n
}

// WithVlan sets NetworkInstance_Fdb_MacTable_EntryPathAny's key "vlan" to the specified value.
// Vlan: uint16
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) WithVlan(Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ygnmi.ModifyKey(n.NodePath, "vlan", Vlan)
	return n
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
//
//	MacAddress: string
//	Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePath) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPath {
	ps := &NetworkInstance_Fdb_MacTable_EntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
	return ps
}

// Entry (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
//
//	MacAddress: string
//	Vlan: uint16
func (n *NetworkInstance_Fdb_MacTablePathAny) Entry(MacAddress string, Vlan uint16) *NetworkInstance_Fdb_MacTable_EntryPathAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries", "entry"},
			map[string]interface{}{"mac-address": MacAddress, "vlan": Vlan},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePath) EntryMap() *NetworkInstance_Fdb_MacTable_EntryPathMap {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// EntryMap (list): List of learned MAC addresses
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "entries/entry"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry"
func (n *NetworkInstance_Fdb_MacTablePathAny) EntryMap() *NetworkInstance_Fdb_MacTable_EntryPathMapAny {
	ps := &NetworkInstance_Fdb_MacTable_EntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTablePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable](
		"NetworkInstance_Fdb_MacTable",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_AgePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_AgePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/age YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_AgePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_Entry_AgePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_Entry_AgePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "age"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Age
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath) State() ygnmi.SingletonQuery[oc.E_Entry_EntryType] {
	return ygnmi.NewSingletonQuery[oc.E_Entry_EntryType](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Entry_EntryType, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).EntryType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny) State() ygnmi.WildcardQuery[oc.E_Entry_EntryType] {
	return ygnmi.NewWildcardQuery[oc.E_Entry_EntryType](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Entry_EntryType, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).EntryType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_EviPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_EviPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_EviPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_Entry_EviPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_Entry_EviPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "evi"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Evi
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/mac-address"
func (n *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).MacAddress
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_VlanPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_VlanPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/config/vlan"
func (n *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "vlan"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry).Vlan
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable_Entry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_EntryPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathMap represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_EntryPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry YANG schema element.
type NetworkInstance_Fdb_MacTable_EntryPathMapAny struct {
	*ygnmi.NodePath
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_AgePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Age (leaf): The time in seconds since the MAC address has been in the
// table
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/age"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/age"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Age() *NetworkInstance_Fdb_MacTable_Entry_AgePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_AgePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "age"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EntryTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// EntryType (leaf): Indicates whether the entry was statically configured, or
// dynamically learned.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/entry-type"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/entry-type"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) EntryType() *NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EntryTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "entry-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EviPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Evi (leaf): EVPN EVI to associate with the BD/VLAN
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/evi"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/state/evi"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Evi() *NetworkInstance_Fdb_MacTable_Entry_EviPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_EviPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "evi"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Interface (container): Reference to the base and/or subinterface for the
// MAC table entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_MacAddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacAddress (leaf): MAC address for the dynamic or static MAC table
// entry
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-address"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/mac-address"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) MacAddress() *NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_MacAddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_VlanPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Vlan (leaf): VLAN on which the MAC address is present. The same MAC
// address may be seen on multiple VLANs in some cases.
//
//	Defining module:      "openconfig-network-instance-l2"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/vlan"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/*/vlan"
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Vlan() *NetworkInstance_Fdb_MacTable_Entry_VlanPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_VlanPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "vlan"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable_Entry",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMap) State() ygnmi.SingletonQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewSingletonQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMapAny) State() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMap) Config() ygnmi.ConfigQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewConfigQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_EntryPathMapAny) Config() ygnmi.WildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry] {
	return ygnmi.NewWildcardQuery[map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry](
		"NetworkInstance_Fdb_MacTable",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[oc.NetworkInstance_Fdb_MacTable_Entry_Key]*oc.NetworkInstance_Fdb_MacTable_Entry, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable).Entry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_MacTable) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:entries"},
			PostRelPath: []string{"openconfig-network-instance:entry"},
		},
	)
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny struct {
	*ygnmi.NodePath
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref"
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) InterfaceRef() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface](
		"NetworkInstance_Fdb_MacTable_Entry_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref YANG schema element.
type NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/interface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/fdb/mac-table/entries/entry/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef](
		"NetworkInstance_Fdb_MacTable_Entry_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval YANG schema element.
type NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "duplicate-ip-detection-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).DuplicateIpDetectionInterval
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_EnablePath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_EnablePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/enable YANG schema element.
type NetworkInstance_Fdb_NdProxy_EnablePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/enable"
func (n *NetworkInstance_Fdb_NdProxy_EnablePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enable"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).Enable
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold YANG schema element.
type NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ip-mobility-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).IpMobilityThreshold
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression YANG schema element.
type NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/state/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/config/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Fdb_NdProxy",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "nd-suppression"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Fdb_NdProxy).NdSuppression
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Fdb_NdProxy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Fdb_NdProxyPath represents the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Fdb_NdProxyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/fdb/nd-proxy YANG schema element.
type NetworkInstance_Fdb_NdProxyPathAny struct {
	*ygnmi.NodePath
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPath) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath {
	ps := &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DuplicateIpDetectionInterval (leaf): The time interval used in detecting a duplicate IP address.
// Duplicate ip detection number of host moves
// allowed within interval period
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/duplicate-ip-detection-interval"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/duplicate-ip-detection-interval"
func (n *NetworkInstance_Fdb_NdProxyPathAny) DuplicateIpDetectionInterval() *NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_DuplicateIpDetectionIntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "duplicate-ip-detection-interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/enable"
func (n *NetworkInstance_Fdb_NdProxyPath) Enable() *NetworkInstance_Fdb_NdProxy_EnablePath {
	ps := &NetworkInstance_Fdb_NdProxy_EnablePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Enable (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery (ND)
// proxy. If true a proxy server on the network answers the
// NDP packets for an IP address that is not on that network.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/enable"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/enable"
func (n *NetworkInstance_Fdb_NdProxyPathAny) Enable() *NetworkInstance_Fdb_NdProxy_EnablePathAny {
	ps := &NetworkInstance_Fdb_NdProxy_EnablePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "enable"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPath) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath {
	ps := &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IpMobilityThreshold (leaf): Enable (TRUE) or disable (FALSE). It is possible for a given host
// or end-station (as defined by its IP address) to move from one
// Ethernet segment to another. The number of IP mobility events that
// are detected for a given IP address within the detection-threshold
// before it is identified as a duplicate IP address.
// Once the detection threshold is reached, updates for the IP address
// are suppressed.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ip-mobility-threshold"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/ip-mobility-threshold"
func (n *NetworkInstance_Fdb_NdProxyPathAny) IpMobilityThreshold() *NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_IpMobilityThresholdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ip-mobility-threshold"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPath) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPath {
	ps := &NetworkInstance_Fdb_NdProxy_NdSuppressionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NdSuppression (leaf): Enable (TRUE) or disable (FALSE) Neighbor Discovery suppression.
// If true the NDP queries for an IP address that is not on that
// network are suppressed. NDP suppression is a
// technique used to reduce the amount of NDP Packets
// flooding within individual VXLAN segments, that is between
// VMs connected to the same logical switch.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/nd-suppression"
//	Path from root:       "/network-instances/network-instance/fdb/nd-proxy/*/nd-suppression"
func (n *NetworkInstance_Fdb_NdProxyPathAny) NdSuppression() *NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny {
	ps := &NetworkInstance_Fdb_NdProxy_NdSuppressionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "nd-suppression"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Fdb_NdProxyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Fdb_NdProxy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Fdb_NdProxy](
		"NetworkInstance_Fdb_NdProxy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePoliciesPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePoliciesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies YANG schema element.
type NetworkInstance_InterInstancePoliciesPathAny struct {
	*ygnmi.NodePath
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ApplyPolicy (container): Anchor point for routing policies in the model.
// Import and export policies are with respect to the local
// routing table, i.e., export (send) and import (receive),
// depending on the context.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "apply-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ApplyPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"apply-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPath) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ImportExportPolicy (container): Top container to set the import and export policies
// associated with a EVI
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "import-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy"
func (n *NetworkInstance_InterInstancePoliciesPathAny) ImportExportPolicy() *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"import-export-policy"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePoliciesPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies](
		"NetworkInstance_InterInstancePolicies",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath) State() ygnmi.SingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewSingletonQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny) State() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath) Config() ygnmi.ConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewConfigQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny) Config() ygnmi.WildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType] {
	return ygnmi.NewWildcardQuery[oc.E_RoutingPolicy_DefaultPolicyType](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "default-import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_RoutingPolicy_DefaultPolicyType, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).DefaultImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ExportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/state/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/config/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-policy"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy).ImportPolicy
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ApplyPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/apply-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny struct {
	*ygnmi.NodePath
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultExportPolicy (leaf): explicitly set a default policy if no policy definition
// in the export policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DefaultImportPolicy (leaf): explicitly set a default policy if no policy definition
// in the import policy chain is satisfied.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/default-import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/default-import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) DefaultImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_DefaultImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "default-import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportPolicy (leaf-list): list of policy names in sequence to be applied on
// sending a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/export-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ExportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ExportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportPolicy (leaf-list): list of policy names in sequence to be applied on
// receiving a routing update in the current context, e.g.,
// for the current peer group, neighbor, address family,
// etc.
//
//	Defining module:      "openconfig-routing-policy"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-policy"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/apply-policy/*/import-policy"
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) ImportPolicy() *NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ApplyPolicy_ImportPolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-policy"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ApplyPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ApplyPolicy](
		"NetworkInstance_InterInstancePolicies_ApplyPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "export-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ExportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath) State() ygnmi.SingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewSingletonQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/state/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny) State() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath) Config() ygnmi.ConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewConfigQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/config/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny) Config() ygnmi.WildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union] {
	return ygnmi.NewWildcardQuery[[]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "import-route-target"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTarget_Union, bool) {
			ret := gs.(*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy).ImportRouteTarget
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPath represents the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/inter-instance-policies/import-export-policy YANG schema element.
type NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny struct {
	*ygnmi.NodePath
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ExportRouteTarget (leaf-list): Export Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/export-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/export-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ExportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ExportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "export-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ImportRouteTarget (leaf-list): Import Route Target (RT) in the network-instance on a PE.
//
//	Defining module:      "openconfig-evpn"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/import-route-target"
//	Path from root:       "/network-instances/network-instance/inter-instance-policies/import-export-policy/*/import-route-target"
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) ImportRouteTarget() *NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny {
	ps := &NetworkInstance_InterInstancePolicies_ImportExportPolicy_ImportRouteTargetPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "import-route-target"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterInstancePolicies_ImportExportPolicyPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_InterInstancePolicies_ImportExportPolicy](
		"NetworkInstance_InterInstancePolicies_ImportExportPolicy",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_AssociatedAddressFamiliesPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/associated-address-families YANG schema element.
type NetworkInstance_Interface_AssociatedAddressFamiliesPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPath) State() ygnmi.SingletonQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewSingletonQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny) State() ygnmi.WildcardQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPath) Config() ygnmi.ConfigQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewConfigQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/associated-address-families"
func (n *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny) Config() ygnmi.WildcardQuery[[]oc.E_Types_ADDRESS_FAMILY] {
	return ygnmi.NewWildcardQuery[[]oc.E_Types_ADDRESS_FAMILY](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "associated-address-families"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]oc.E_Types_ADDRESS_FAMILY, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).AssociatedAddressFamilies
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_IdPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_IdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/id YANG schema element.
type NetworkInstance_Interface_IdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_Interface_IdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/id"
func (n *NetworkInstance_Interface_IdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_Interface_IdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/id"
func (n *NetworkInstance_Interface_IdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Id
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/interface YANG schema element.
type NetworkInstance_Interface_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_Interface_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/interface"
func (n *NetworkInstance_Interface_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_Interface_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/interface"
func (n *NetworkInstance_Interface_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_IrbAnycastGatewayPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_IrbAnycastGatewayPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway YANG schema element.
type NetworkInstance_Interface_IrbAnycastGatewayPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPath) State() ygnmi.SingletonQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewSingletonQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPathAny) State() ygnmi.WildcardQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPath) Config() ygnmi.ConfigQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewConfigQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/irb-anycast-gateway"
func (n *NetworkInstance_Interface_IrbAnycastGatewayPathAny) Config() ygnmi.WildcardQuery[oc.E_Interface_IrbAnycastGateway] {
	return ygnmi.NewWildcardQuery[oc.E_Interface_IrbAnycastGateway](
		"NetworkInstance_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "irb-anycast-gateway"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Interface_IrbAnycastGateway, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).IrbAnycastGateway
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_MacPinningPath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_MacPinningPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/mac-pinning YANG schema element.
type NetworkInstance_Interface_MacPinningPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/mac-pinning"
func (n *NetworkInstance_Interface_MacPinningPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mac-pinning"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).MacPinning
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Interface_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Interface_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface/state/subinterface YANG schema element.
type NetworkInstance_Interface_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/state/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/config/subinterface"
func (n *NetworkInstance_Interface_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Interface).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/interfaces/interface YANG schema element.
type NetworkInstance_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/associated-address-families"
func (n *NetworkInstance_InterfacePath) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPath {
	ps := &NetworkInstance_Interface_AssociatedAddressFamiliesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AssociatedAddressFamilies (leaf-list): The address families on the subinterface which are to be
// associated with this network instance. When this leaf-list
// is empty and the network instance requires Layer 3 information
// the address families for which the network instance is
// enabled should be imported. If the value of this leaf-list
// is specified then the association MUST only be made for
// those address families that are included in the list.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/associated-address-families"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/associated-address-families"
func (n *NetworkInstance_InterfacePathAny) AssociatedAddressFamilies() *NetworkInstance_Interface_AssociatedAddressFamiliesPathAny {
	ps := &NetworkInstance_Interface_AssociatedAddressFamiliesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "associated-address-families"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/id"
func (n *NetworkInstance_InterfacePath) Id() *NetworkInstance_Interface_IdPath {
	ps := &NetworkInstance_Interface_IdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Id (leaf): A unique identifier for this interface - this is expressed
// as a free-text string
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/id"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/id"
func (n *NetworkInstance_InterfacePathAny) Id() *NetworkInstance_Interface_IdPathAny {
	ps := &NetworkInstance_Interface_IdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/interface"
func (n *NetworkInstance_InterfacePath) Interface() *NetworkInstance_Interface_InterfacePath {
	ps := &NetworkInstance_Interface_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/interface"
func (n *NetworkInstance_InterfacePathAny) Interface() *NetworkInstance_Interface_InterfacePathAny {
	ps := &NetworkInstance_Interface_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePath) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPath {
	ps := &NetworkInstance_Interface_IrbAnycastGatewayPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IrbAnycastGateway (leaf): Associate VLAN SVI with anycast Gateway.
// The SVI is the layer3 interface for the mac-vrf
// when the SVI is being used as the first hop default gw.
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/irb-anycast-gateway"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/irb-anycast-gateway"
func (n *NetworkInstance_InterfacePathAny) IrbAnycastGateway() *NetworkInstance_Interface_IrbAnycastGatewayPathAny {
	ps := &NetworkInstance_Interface_IrbAnycastGatewayPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "irb-anycast-gateway"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/mac-pinning"
func (n *NetworkInstance_InterfacePath) MacPinning() *NetworkInstance_Interface_MacPinningPath {
	ps := &NetworkInstance_Interface_MacPinningPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MacPinning (leaf): Enable (TRUE) or disable (FALSE). There are scenarios in which
// it is desired to configure some MAC addresses as static so
// that they are not subjected to MAC moves. If you enable MAC pinning
// on a CE interface, that MAC address cannot be moved to any
// other CE interface
//
//	Defining module:      "openconfig-network-instance"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mac-pinning"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/mac-pinning"
func (n *NetworkInstance_InterfacePathAny) MacPinning() *NetworkInstance_Interface_MacPinningPathAny {
	ps := &NetworkInstance_Interface_MacPinningPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mac-pinning"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/subinterface"
func (n *NetworkInstance_InterfacePath) Subinterface() *NetworkInstance_Interface_SubinterfacePath {
	ps := &NetworkInstance_Interface_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/interfaces/interface/*/subinterface"
func (n *NetworkInstance_InterfacePathAny) Subinterface() *NetworkInstance_Interface_SubinterfacePathAny {
	ps := &NetworkInstance_Interface_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Interface](
		"NetworkInstance_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Interface](
		"NetworkInstance",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Interface, bool) {
			ret := gs.(*oc.NetworkInstance).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interfaces"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_MplsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_MplsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls YANG schema element.
type NetworkInstance_MplsPathAny struct {
	*ygnmi.NodePath
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPath) Global() *NetworkInstance_Mpls_GlobalPath {
	ps := &NetworkInstance_Mpls_GlobalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Global (container): general mpls configuration applicable to any
// type of LSP and signaling protocol - label ranges,
// entropy label supportmay be added here
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "global"
//	Path from root:       "/network-instances/network-instance/mpls/global"
func (n *NetworkInstance_MplsPathAny) Global() *NetworkInstance_Mpls_GlobalPathAny {
	ps := &NetworkInstance_Mpls_GlobalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"global"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPath) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPathAny) InterfaceAny() *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_MplsPath) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePath {
	ps := &NetworkInstance_Mpls_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_MplsPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_InterfacePathAny {
	ps := &NetworkInstance_Mpls_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPath) InterfaceMap() *NetworkInstance_Mpls_InterfacePathMap {
	ps := &NetworkInstance_Mpls_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of TE interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface"
func (n *NetworkInstance_MplsPathAny) InterfaceMap() *NetworkInstance_Mpls_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsps (container): LSP definitions and configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsps"
//	Path from root:       "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPath) Lsps() *NetworkInstance_Mpls_LspsPath {
	ps := &NetworkInstance_Mpls_LspsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Lsps (container): LSP definitions and configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "lsps"
//	Path from root:       "/network-instances/network-instance/mpls/lsps"
func (n *NetworkInstance_MplsPathAny) Lsps() *NetworkInstance_Mpls_LspsPathAny {
	ps := &NetworkInstance_Mpls_LspsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SignalingProtocols (container): top-level signaling protocol configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "signaling-protocols"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPath) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPath {
	ps := &NetworkInstance_Mpls_SignalingProtocolsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SignalingProtocols (container): top-level signaling protocol configuration
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "signaling-protocols"
//	Path from root:       "/network-instances/network-instance/mpls/signaling-protocols"
func (n *NetworkInstance_MplsPathAny) SignalingProtocols() *NetworkInstance_Mpls_SignalingProtocolsPathAny {
	ps := &NetworkInstance_Mpls_SignalingProtocolsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"signaling-protocols"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeGlobalAttributes (container): traffic-engineering global attributes
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-global-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPath) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPath {
	ps := &NetworkInstance_Mpls_TeGlobalAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TeGlobalAttributes (container): traffic-engineering global attributes
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "te-global-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/te-global-attributes"
func (n *NetworkInstance_MplsPathAny) TeGlobalAttributes() *NetworkInstance_Mpls_TeGlobalAttributesPathAny {
	ps := &NetworkInstance_Mpls_TeGlobalAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"te-global-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_MplsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls](
		"NetworkInstance_Mpls",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_NullLabelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_NullLabelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/null-label YANG schema element.
type NetworkInstance_Mpls_Global_NullLabelPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/null-label"
func (n *NetworkInstance_Mpls_Global_NullLabelPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_NULL_LABEL_TYPE](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "null-label"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_NULL_LABEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).NullLabel
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_PwEncapsulationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_PwEncapsulationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/pw-encapsulation YANG schema element.
type NetworkInstance_Mpls_Global_PwEncapsulationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/pw-encapsulation"
func (n *NetworkInstance_Mpls_Global_PwEncapsulationPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "pw-encapsulation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PSEUDOWIRE_ENCAPSULATION, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).PwEncapsulation
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_TtlPropagationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_TtlPropagationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/state/ttl-propagation YANG schema element.
type NetworkInstance_Mpls_Global_TtlPropagationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/state/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/config/ttl-propagation"
func (n *NetworkInstance_Mpls_Global_TtlPropagationPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ttl-propagation"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).TtlPropagation
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_GlobalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_GlobalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global YANG schema element.
type NetworkInstance_Mpls_GlobalPathAny struct {
	*ygnmi.NodePath
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// InterfaceAny (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceAny() *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": "*"},
			n,
		),
	}
	return ps
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPath) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePath {
	ps := &NetworkInstance_Mpls_Global_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// Interface (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
//
//	InterfaceId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) Interface(InterfaceId string) *NetworkInstance_Mpls_Global_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes", "interface"},
			map[string]interface{}{"interface-id": InterfaceId},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPath) InterfaceMap() *NetworkInstance_Mpls_Global_InterfacePathMap {
	ps := &NetworkInstance_Mpls_Global_InterfacePathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceMap (list): List of MPLS-enabled interfaces.
//
// The interface referenced is based on the interface and
// subinterface leaves within the interface-ref container -
// which reference an entry in the /interfaces/interface list -
// and should not rely on the value of the list key.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-attributes/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface"
func (n *NetworkInstance_Mpls_GlobalPathAny) InterfaceMap() *NetworkInstance_Mpls_Global_InterfacePathMapAny {
	ps := &NetworkInstance_Mpls_Global_InterfacePathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NullLabel (leaf): The null-label type used, implicit or explicit
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/null-label"
func (n *NetworkInstance_Mpls_GlobalPath) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPath {
	ps := &NetworkInstance_Mpls_Global_NullLabelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "null-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// NullLabel (leaf): The null-label type used, implicit or explicit
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/null-label"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/null-label"
func (n *NetworkInstance_Mpls_GlobalPathAny) NullLabel() *NetworkInstance_Mpls_Global_NullLabelPathAny {
	ps := &NetworkInstance_Mpls_Global_NullLabelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "null-label"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPath) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPath {
	ps := &NetworkInstance_Mpls_Global_PwEncapsulationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// PwEncapsulation (leaf): The PDU type to use with pseudowires.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/pw-encapsulation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/pw-encapsulation"
func (n *NetworkInstance_Mpls_GlobalPathAny) PwEncapsulation() *NetworkInstance_Mpls_Global_PwEncapsulationPathAny {
	ps := &NetworkInstance_Mpls_Global_PwEncapsulationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "pw-encapsulation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockAny (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockAny() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": "*"},
			n,
		),
	}
	return ps
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
//
//	LocalId: string
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// ReservedLabelBlock (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
//
//	LocalId: string
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlock(LocalId string) *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks", "reserved-label-block"},
			map[string]interface{}{"local-id": LocalId},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockMap (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPath) ReservedLabelBlockMap() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ReservedLabelBlockMap (list): A range of labels starting with the start-label up to and including
// the end label that should be allocated for use by a specific protocol.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "reserved-label-blocks/reserved-label-block"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block"
func (n *NetworkInstance_Mpls_GlobalPathAny) ReservedLabelBlockMap() *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"reserved-label-blocks"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPath) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPath {
	ps := &NetworkInstance_Mpls_Global_TtlPropagationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TtlPropagation (leaf): Enables TTL propagation across the MPLS domain.
// When ttl-propagation is set to true, the IP TTL
// is copied into the MPLS header TTL when pushing
// a label to an IP packet. If false, the IP TTL is
// not copied into the MPLS header TTL and, therefore,
// the IP TTL is not updated in the MPLS domain.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/ttl-propagation"
//	Path from root:       "/network-instances/network-instance/mpls/global/*/ttl-propagation"
func (n *NetworkInstance_Mpls_GlobalPathAny) TtlPropagation() *NetworkInstance_Mpls_Global_TtlPropagationPathAny {
	ps := &NetworkInstance_Mpls_Global_TtlPropagationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ttl-propagation"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_GlobalPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled YANG schema element.
type NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).MplsEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/state/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "mpls-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).MplsEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).MplsEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/config/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "mpls-enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface).MplsEnabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_Global_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// InterfaceId (leaf): Indentifier for the MPLS interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Indentifier for the MPLS interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/*/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePath) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPath {
	ps := &NetworkInstance_Mpls_Global_Interface_MplsEnabledPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MplsEnabled (leaf): Enable MPLS forwarding on this interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/mpls-enabled"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/*/mpls-enabled"
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) MplsEnabled() *NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny {
	ps := &NetworkInstance_Mpls_Global_Interface_MplsEnabledPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "mpls-enabled"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_Interface](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/global/interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Global_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Global_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "local-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LocalId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "lower-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).LowerBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath) State() ygnmi.SingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewSingletonQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/state/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny) State() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath) Config() ygnmi.ConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewConfigQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/config/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny) Config() ygnmi.WildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union] {
	return ygnmi.NewWildcardQuery[oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "upper-bound"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBound_Union, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock).UpperBound
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global_ReservedLabelBlock) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block YANG schema element.
type NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny struct {
	*ygnmi.NodePath
}

// LocalId (leaf): A local identifier for the global label block allocation.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LocalId (leaf): A local identifier for the global label block allocation.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/local-id"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/local-id"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LocalId() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LocalIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "local-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lower-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// LowerBound (leaf): Lower bound of the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/lower-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/lower-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) LowerBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_LowerBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "lower-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpperBound (leaf): Upper bound for the global label block. The block is defined to include
// this label.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/upper-bound"
//	Path from root:       "/network-instances/network-instance/mpls/global/reserved-label-blocks/reserved-label-block/*/upper-bound"
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) UpperBound() *NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny {
	ps := &NetworkInstance_Mpls_Global_ReservedLabelBlock_UpperBoundPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "upper-bound"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global_ReservedLabelBlock",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Global_ReservedLabelBlockPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock](
		"NetworkInstance_Mpls_Global",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Global_ReservedLabelBlock, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Global).ReservedLabelBlock
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Global) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:reserved-label-blocks"},
			PostRelPath: []string{"openconfig-network-instance:reserved-label-block"},
		},
	)
}

// NetworkInstance_Mpls_Interface_AdminGroupPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_AdminGroupPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group YANG schema element.
type NetworkInstance_Mpls_Interface_AdminGroupPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/admin-group"
func (n *NetworkInstance_Mpls_Interface_AdminGroupPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-group"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).AdminGroup
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceIdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceIdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceIdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/interface-id"
func (n *NetworkInstance_Mpls_Interface_InterfaceIdPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface-id"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).InterfaceId
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_SrlgMembershipPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership YANG schema element.
type NetworkInstance_Mpls_Interface_SrlgMembershipPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/srlg-membership"
func (n *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "srlg-membership"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).SrlgMembership
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_TeMetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_TeMetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric YANG schema element.
type NetworkInstance_Mpls_Interface_TeMetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/state/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/config/te-metric"
func (n *NetworkInstance_Mpls_Interface_TeMetricPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "te-metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface).TeMetric
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_InterfacePathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface YANG schema element.
type NetworkInstance_Mpls_InterfacePathMapAny struct {
	*ygnmi.NodePath
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/admin-group"
func (n *NetworkInstance_Mpls_InterfacePath) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPath {
	ps := &NetworkInstance_Mpls_Interface_AdminGroupPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminGroup (leaf-list): list of admin groups (by name) on the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-group"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/admin-group"
func (n *NetworkInstance_Mpls_InterfacePathAny) AdminGroup() *NetworkInstance_Mpls_Interface_AdminGroupPathAny {
	ps := &NetworkInstance_Mpls_Interface_AdminGroupPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-group"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-flooding-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePath) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// IgpFloodingBandwidth (container): Interface bandwidth change percentages
// that trigger update events into the IGP traffic
// engineering database (TED)
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "igp-flooding-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth"
func (n *NetworkInstance_Mpls_InterfacePathAny) IgpFloodingBandwidth() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"igp-flooding-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceId (leaf): Id of the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceIdPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceId (leaf): Id of the interface
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface-id"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/interface-id"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceId() *NetworkInstance_Mpls_Interface_InterfaceIdPathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceIdPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface-id"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePath) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRefPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// InterfaceRef (container): Reference to an interface or subinterface. The interface
// that is being referenced is uniquely referenced based on
// the specified interface and subinterface leaves. In contexts
// where a Layer 3 interface is to be referenced, both the
// interface and subinterface leaves must be populated, as
// Layer 3 configuration within the OpenConfig models is
// associated with a subinterface. In the case where a
// Layer 2 interface is to be referenced, only the
// interface is specified.
//
// The interface/subinterface leaf tuple must be used as
// the means by which the interface is specified, regardless
// of any other context information (e.g., key in a list).
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "interface-ref"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref"
func (n *NetworkInstance_Mpls_InterfacePathAny) InterfaceRef() *NetworkInstance_Mpls_Interface_InterfaceRefPathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRefPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interface-ref"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePath) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPath {
	ps := &NetworkInstance_Mpls_Interface_SrlgMembershipPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SrlgMembership (leaf-list): list of references to named shared risk link groups that the
// interface belongs to.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/srlg-membership"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/srlg-membership"
func (n *NetworkInstance_Mpls_InterfacePathAny) SrlgMembership() *NetworkInstance_Mpls_Interface_SrlgMembershipPathAny {
	ps := &NetworkInstance_Mpls_Interface_SrlgMembershipPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "srlg-membership"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TeMetric (leaf): TE specific metric for the link
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/te-metric"
func (n *NetworkInstance_Mpls_InterfacePath) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPath {
	ps := &NetworkInstance_Mpls_Interface_TeMetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "te-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// TeMetric (leaf): TE specific metric for the link
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/te-metric"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/*/te-metric"
func (n *NetworkInstance_Mpls_InterfacePathAny) TeMetric() *NetworkInstance_Mpls_Interface_TeMetricPathAny {
	ps := &NetworkInstance_Mpls_Interface_TeMetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "te-metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls_Interface",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_InterfacePathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Interface](
		"NetworkInstance_Mpls",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Interface, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls).Interface
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:te-interface-attributes"},
			PostRelPath: []string{"openconfig-network-instance:interface"},
		},
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "delta-percentage"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DeltaPercentage
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).DownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath) State() ygnmi.SingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewSingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny) State() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath) Config() ygnmi.ConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny) Config() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdSpecification](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-specification"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdSpecification, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdSpecification
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath) State() ygnmi.SingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewSingletonQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny) State() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath) Config() ygnmi.ConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewConfigQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny) Config() ygnmi.WildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType] {
	return ygnmi.NewWildcardQuery[oc.E_IgpFloodingBandwidth_ThresholdType](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "threshold-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_IgpFloodingBandwidth_ThresholdType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).ThresholdType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-down-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpDownThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath) State() ygnmi.SingletonQuery[[]uint8] {
	return ygnmi.NewSingletonQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/state/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny) State() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath) Config() ygnmi.ConfigQuery[[]uint8] {
	return ygnmi.NewConfigQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/config/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny) Config() ygnmi.WildcardQuery[[]uint8] {
	return ygnmi.NewWildcardQuery[[]uint8](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "up-thresholds"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth).UpThresholds
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth YANG schema element.
type NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny struct {
	*ygnmi.NodePath
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DeltaPercentage (leaf): The percentage of the maximum-reservable-bandwidth
// considered as the delta that results in an IGP update
// being flooded
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/delta-percentage"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/delta-percentage"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DeltaPercentage() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DeltaPercentagePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "delta-percentage"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// DownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is decreasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) DownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_DownThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdSpecification (leaf): This value specifies whether a single set of threshold
// values should be used for both increasing and decreasing
// bandwidth when determining whether to trigger updated
// bandwidth values to be flooded in the IGP TE extensions.
// MIRRORED-UP-DOWN indicates that a single value (or set of
// values) should be used for both increasing and decreasing
// values, where SEPARATE-UP-DOWN specifies that the increasing
// and decreasing values will be separately specified
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-specification"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-specification"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdSpecification() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdSpecificationPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-specification"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ThresholdType (leaf): The type of threshold that should be used to specify the
// values at which bandwidth is flooded. DELTA indicates that
// the local system should flood IGP updates when a change in
// reserved bandwidth >= the specified delta occurs on the
// interface. Where THRESHOLD_CROSSED is specified, the local
// system should trigger an update (and hence flood) the
// reserved bandwidth when the reserved bandwidth changes such
// that it crosses, or becomes equal to one of the threshold
// values
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/threshold-type"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/threshold-type"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) ThresholdType() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_ThresholdTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "threshold-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpDownThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth of the interface) at which bandwidth
// updates are flooded - used both when the bandwidth is
// increasing and decreasing
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-down-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-down-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpDownThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpDownThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-down-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// UpThresholds (leaf-list): The thresholds (expressed as a percentage of the maximum
// reservable bandwidth) at which bandwidth updates are to be
// triggered when the bandwidth is increasing.
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/up-thresholds"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/igp-flooding-bandwidth/*/up-thresholds"
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) UpThresholds() *NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny {
	ps := &NetworkInstance_Mpls_Interface_IgpFloodingBandwidth_UpThresholdsPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "up-thresholds"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_IgpFloodingBandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_IgpFloodingBandwidth](
		"NetworkInstance_Mpls_Interface_IgpFloodingBandwidth",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "interface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Interface
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/state/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/config/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "subinterface"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Interface_InterfaceRef).Subinterface
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Interface_InterfaceRef) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Interface_InterfaceRefPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Interface_InterfaceRefPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref YANG schema element.
type NetworkInstance_Mpls_Interface_InterfaceRefPathAny struct {
	*ygnmi.NodePath
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interface (leaf): Reference to a base interface.  If a reference to a
// subinterface is required, this leaf must be specified
// to indicate the base interface.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/interface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/interface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Interface() *NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_InterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "interface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Subinterface (leaf): Reference to a subinterface -- this requires the base
// interface to be specified using the interface leaf in
// this container.  If only a reference to a base interface
// is requuired, this leaf should not be set.
//
//	Defining module:      "openconfig-interfaces"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/subinterface"
//	Path from root:       "/network-instances/network-instance/mpls/te-interface-attributes/interface/interface-ref/*/subinterface"
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Subinterface() *NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny {
	ps := &NetworkInstance_Mpls_Interface_InterfaceRef_SubinterfacePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "subinterface"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Interface_InterfaceRefPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Interface_InterfaceRef](
		"NetworkInstance_Mpls_Interface_InterfaceRef",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_LspsPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_LspsPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps YANG schema element.
type NetworkInstance_Mpls_LspsPathAny struct {
	*ygnmi.NodePath
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPath) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ConstrainedPath (container): traffic-engineered LSPs supporting different
// path computation and signaling methods
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "constrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) ConstrainedPath() *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"constrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticLspAny (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPath) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// StaticLspAny (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspAny() *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// StaticLsp (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
//
//	Name: string
func (n *NetworkInstance_Mpls_LspsPath) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPath {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// StaticLsp (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
//
//	Name: string
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLsp(Name string) *NetworkInstance_Mpls_Lsps_StaticLspPathAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps", "static-lsp"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// StaticLspMap (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPath) StaticLspMap() *NetworkInstance_Mpls_Lsps_StaticLspPathMap {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// StaticLspMap (list): list of defined static LSPs
//
//	Defining module:      "openconfig-mpls-static"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "static-lsps/static-lsp"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/static-lsps/static-lsp"
func (n *NetworkInstance_Mpls_LspsPathAny) StaticLspMap() *NetworkInstance_Mpls_Lsps_StaticLspPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_StaticLspPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"static-lsps"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPath) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPath {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// UnconstrainedPath (container): LSPs that use the IGP-determined path, i.e., non
// traffic-engineered, or non constrained-path
//
//	Defining module:      "openconfig-mpls"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "unconstrained-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/unconstrained-path"
func (n *NetworkInstance_Mpls_LspsPathAny) UnconstrainedPath() *NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_UnconstrainedPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"unconstrained-path"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_LspsPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps](
		"NetworkInstance_Mpls_Lsps",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny struct {
	*ygnmi.NodePath
}

// NamedExplicitPathAny (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NamedExplicitPathAny (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// NamedExplicitPath (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NamedExplicitPath (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPath(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths", "named-explicit-path"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// NamedExplicitPathMap (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) NamedExplicitPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// NamedExplicitPathMap (list): A list of explicit paths
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "named-explicit-paths/named-explicit-path"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) NamedExplicitPathMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"named-explicit-paths"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// TunnelAny (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": "*"},
			n,
		),
	}
	return ps
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// Tunnel (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
//
//	Name: string
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Tunnel(Name string) *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels", "tunnel"},
			map[string]interface{}{"name": Name},
			n,
		),
	}
	return ps
}

// TunnelMap (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) TunnelMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// TunnelMap (list): List of TE tunnels. This list contains only the LSPs that the
// current device originates (i.e., for which it is the head-end).
// Where the signaling protocol utilised for an LSP allows a mid-point
// or tail device to be aware of the LSP (e.g., RSVP-TE), then the
// associated sessions are maintained per protocol
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "tunnels/tunnel"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) TunnelMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"tunnels"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-protection-required"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidProtectionRequired
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath) State() ygnmi.SingletonQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewSingletonQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/state/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny) State() ygnmi.WildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewWildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath) Config() ygnmi.ConfigQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewConfigQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/config/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny) Config() ygnmi.WildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode] {
	return ygnmi.NewWildcardQuery[oc.E_NamedExplicitPath_SidSelectionMode](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "sid-selection-mode"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_NamedExplicitPath_SidSelectionMode, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).SidSelectionMode
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny struct {
	*ygnmi.NodePath
}

// ExplicitRouteObjectAny (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectAny (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectAny() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": "*"},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObject (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
//
//	Index: uint8
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObject(Index uint8) *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects", "explicit-route-object"},
			map[string]interface{}{"index": Index},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) ExplicitRouteObjectMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ExplicitRouteObjectMap (list): List of explicit route objects
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "explicit-route-objects/explicit-route-object"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) ExplicitRouteObjectMap() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"explicit-route-objects"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): A string name that uniquely identifies an explicit
// path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidProtectionRequired (leaf): When this value is set to true, only SIDs that are
// protected are to be selected by the calculating method
// when the explicit path is instantiated by a SR-TE LSP.
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-protection-required"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-protection-required"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidProtectionRequired() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidProtectionRequiredPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-protection-required"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SidSelectionMode (leaf): The restrictions placed on the SIDs to be selected by the
// calculation method for the explicit path when it is
// instantiated for a SR-TE LSP
//
//	Defining module:      "openconfig-mpls-sr"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/sid-selection-mode"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/*/sid-selection-mode"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) SidSelectionMode() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_SidSelectionModePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "sid-selection-mode"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPathPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).NamedExplicitPath
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:named-explicit-paths"},
			PostRelPath: []string{"openconfig-network-instance:named-explicit-path"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Address
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_MplsHopType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_MplsHopType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hop-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_MplsHopType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).HopType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/state/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/config/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "index"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject).Index
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny struct {
	*ygnmi.NodePath
}

// Address (leaf): router hop for the LSP path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Address (leaf): router hop for the LSP path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/address"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/address"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Address() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopType (leaf): strict or loose hop
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HopType (leaf): strict or loose hop
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hop-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/hop-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) HopType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_HopTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hop-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Index (leaf): Index of this explicit route object to express
// the order of hops in the path
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/index"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/named-explicit-paths/named-explicit-path/explicit-route-objects/explicit-route-object/*/index"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Index() *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject_IndexPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "index"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap) State() ygnmi.SingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewSingletonQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny) State() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMap) Config() ygnmi.ConfigQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewConfigQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObjectPathMapAny) Config() ygnmi.WildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject] {
	return ygnmi.NewWildcardQuery[map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[uint8]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath_ExplicitRouteObject, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath).ExplicitRouteObject
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_NamedExplicitPath)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:explicit-route-objects"},
			PostRelPath: []string{"openconfig-network-instance:explicit-route-object"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_ADMIN_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "admin-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_ADMIN_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AdminStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AutoGenerated
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).AutoGenerated
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "description"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Description
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hold-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).HoldPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath) State() ygnmi.SingletonQuery[int32] {
	return ygnmi.NewSingletonQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny) State() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath) Config() ygnmi.ConfigQuery[int32] {
	return ygnmi.NewConfigQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny) Config() ygnmi.WildcardQuery[int32] {
	return ygnmi.NewWildcardQuery[int32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (int32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Metric
			if ret == nil {
				var zero int32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_METRIC_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "metric-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_METRIC_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).MetricType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "name"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Name
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_OPER_STATUS] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_OPER_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_OPER_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_OPER_STATUS] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_OPER_STATUS](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_OPER_STATUS, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).OperStatus
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "preference"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Preference
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PROTECTION_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "protection-style-requested"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PROTECTION_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ProtectionStyleRequested
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath) State() ygnmi.SingletonQuery[uint16] {
	return ygnmi.NewSingletonQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny) State() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath) Config() ygnmi.ConfigQuery[uint16] {
	return ygnmi.NewConfigQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny) Config() ygnmi.WildcardQuery[uint16] {
	return ygnmi.NewWildcardQuery[uint16](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "reoptimize-timer"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint16, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ReoptimizeTimer
			if ret == nil {
				var zero uint16
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_LSP_ROLE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_LSP_ROLE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "role"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_LSP_ROLE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Role
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "setup-priority"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SetupPriority
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "shortcut-eligible"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).ShortcutEligible
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_PATH_SETUP_PROTOCOL](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "signaling-protocol"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_PATH_SETUP_PROTOCOL, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SignalingProtocol
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "soft-preemption"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).SoftPreemption
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "source"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Source
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath) State() ygnmi.SingletonQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewSingletonQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny) State() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath) Config() ygnmi.ConfigQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewConfigQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/config/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny) Config() ygnmi.WildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE] {
	return ygnmi.NewWildcardQuery[oc.E_MplsTypes_TUNNEL_TYPE](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_MplsTypes_TUNNEL_TYPE, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel).Type
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny struct {
	*ygnmi.NodePath
}

// AdminStatus (leaf): TE tunnel administrative state.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AdminStatus (leaf): TE tunnel administrative state.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/admin-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/admin-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AdminStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AdminStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "admin-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// AutoGenerated (leaf): If the LSP was auto-generated by the system this leaf
// should be set to true. Examples of auto-generated LSPs
// are dynamically created backup LSPs to meet a FRR
// policy.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/auto-generated"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/auto-generated"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) AutoGenerated() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_AutoGeneratedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "auto-generated"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Bandwidth (container): Bandwidth configuration for TE LSPs
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Bandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Counters (container): State data for MPLS label switched paths. This state
// data is specific to a single label switched path.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/counters"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/counters"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Counters() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_CountersPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "counters"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Description (leaf): optional text description for the tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Description (leaf): optional text description for the tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/description"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/description"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Description() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_DescriptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "description"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// HoldPriority (leaf): preemption priority once the LSP is established,
// lower is higher priority; default 0 indicates other LSPs
// will not preempt the LSPs once established
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/hold-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/hold-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) HoldPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_HoldPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hold-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Metric (leaf): The value of the metric that should be specified. The value
// supplied in this leaf is used in conjunction with the metric
// type to determine the value of the metric used by the system.
// Where the metric-type is set to LSP_METRIC_ABSOLUTE - the
// value of this leaf is used directly; where it is set to
// LSP_METRIC_RELATIVE, the relevant (positive or negative)
// offset is used to formulate the metric; where metric-type
// is LSP_METRIC_INHERITED, the value of this leaf is not
// utilised
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Metric() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MetricType (leaf): The type of metric specification that should be used to set
// the LSP(s) metric
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/metric-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/metric-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) MetricType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_MetricTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "metric-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The tunnel name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Name (leaf): The tunnel name
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/name"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/name"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Name() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_NamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "name"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The operational status of the TE tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// OperStatus (leaf): The operational status of the TE tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/oper-status"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/oper-status"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) OperStatus() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_OperStatusPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "oper-status"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-tunnel-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// P2PTunnelAttributes (container): Parameters related to LSPs of type P2P
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "p2p-tunnel-attributes"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/p2p-tunnel-attributes"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) P2PTunnelAttributes() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_P2PTunnelAttributesPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"p2p-tunnel-attributes"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Preference (leaf): Specifies a preference for this tunnel.
// A lower number signifies a better preference
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/preference"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/preference"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Preference() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_PreferencePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "preference"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ProtectionStyleRequested (leaf): style of mpls frr protection desired: can be
// link, link-node or unprotected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/protection-style-requested"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/protection-style-requested"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ProtectionStyleRequested() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ProtectionStyleRequestedPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "protection-style-requested"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ReoptimizeTimer (leaf): frequency of reoptimization of
// a traffic engineered LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/reoptimize-timer"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/reoptimize-timer"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ReoptimizeTimer() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ReoptimizeTimerPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "reoptimize-timer"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Role (leaf): The lsp role at the current node, whether it is headend,
// transit or tailend.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/role"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/state/role"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Role() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_RolePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "role"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetupPriority (leaf): RSVP-TE preemption priority during LSP setup, lower is
// higher priority; default 7 indicates that LSP will not
// preempt established LSPs during setup
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/setup-priority"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/setup-priority"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SetupPriority() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SetupPriorityPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "setup-priority"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ShortcutEligible (leaf): Whether this LSP is considered to be eligible for us as a
// shortcut in the IGP. In the case that this leaf is set to
// true, the IGP SPF calculation uses the metric specified to
// determine whether traffic should be carried over this LSP
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/shortcut-eligible"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/shortcut-eligible"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) ShortcutEligible() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_ShortcutEligiblePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "shortcut-eligible"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignalingProtocol (leaf): Signaling protocol used to set up this tunnel
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/signaling-protocol"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/signaling-protocol"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SignalingProtocol() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SignalingProtocolPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "signaling-protocol"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SoftPreemption (leaf): Enables RSVP soft-preemption on this LSP
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/soft-preemption"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/soft-preemption"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) SoftPreemption() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SoftPreemptionPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "soft-preemption"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): RSVP-TE tunnel source address
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Source (leaf): RSVP-TE tunnel source address
//
//	Defining module:      "openconfig-mpls-rsvp"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/source"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/source"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Source() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_SourcePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "source"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Tunnel type, p2p or p2mp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Type (leaf): Tunnel type, p2p or p2mp
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/*/type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Type() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_TypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap) State() ygnmi.SingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewSingletonQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewConfigQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_TunnelPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel] {
	return ygnmi.NewWildcardQuery[map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath",
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath).Tunnel
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-network-instance:tunnels"},
			PostRelPath: []string{"openconfig-network-instance:tunnel"},
		},
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "set-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SetBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SignaledBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SignaledBandwidth
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath) State() ygnmi.SingletonQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewSingletonQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny) State() ygnmi.WildcardQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath) Config() ygnmi.ConfigQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewConfigQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/config/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny) Config() ygnmi.WildcardQuery[oc.E_Mpls_TeBandwidthType] {
	return ygnmi.NewWildcardQuery[oc.E_Mpls_TeBandwidthType](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "specification-type"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Mpls_TeBandwidthType, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth).SpecificationType
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath struct {
	*ygnmi.NodePath
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny struct {
	*ygnmi.NodePath
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "auto-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// AutoBandwidth (container): Parameters related to auto-bandwidth
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "auto-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) AutoBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"auto-bandwidth"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SetBandwidth (leaf): set bandwidth explicitly, e.g., using
// offline calculation
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/set-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/set-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SetBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SetBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "set-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SignaledBandwidth (leaf): The currently signaled bandwidth of the LSP. In the case where
// the bandwidth is specified explicitly, then this will match the
// value of the set-bandwidth leaf; in cases where the bandwidth is
// dynamically computed by the system, the current value of the
// bandwidth should be reflected.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/signaled-bandwidth"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/state/signaled-bandwidth"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SignaledBandwidth() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SignaledBandwidthPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"state", "signaled-bandwidth"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "specification-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// SpecificationType (leaf): The method used for settign the bandwidth, either explicitly
// specified or configured
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "*/specification-type"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/*/specification-type"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) SpecificationType() *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny {
	ps := &NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_SpecificationTypePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "specification-type"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) State() ygnmi.SingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewSingletonQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) State() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPath) Config() ygnmi.ConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewConfigQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_BandwidthPathAny) Config() ygnmi.WildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth] {
	return ygnmi.NewWildcardQuery[*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth",
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath) State() ygnmi.SingletonQuery[uint32] {
	return ygnmi.NewSingletonQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny) State() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPath) Config() ygnmi.ConfigQuery[uint32] {
	return ygnmi.NewConfigQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-interval"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-interval"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustIntervalPathAny) Config() ygnmi.WildcardQuery[uint32] {
	return ygnmi.NewWildcardQuery[uint32](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint32, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustInterval
			if ret == nil {
				var zero uint32
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPath) Config() ygnmi.ConfigQuery[uint8] {
	return ygnmi.NewConfigQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/adjust-threshold"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/adjust-threshold"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_AdjustThresholdPathAny) Config() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "adjust-threshold"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).AdjustThreshold
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath) State() ygnmi.SingletonQuery[bool] {
	return ygnmi.NewSingletonQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny) State() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPath) Config() ygnmi.ConfigQuery[bool] {
	return ygnmi.NewConfigQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/enabled"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/enabled"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_EnabledPathAny) Config() ygnmi.WildcardQuery[bool] {
	return ygnmi.NewWildcardQuery[bool](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "enabled"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (bool, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).Enabled
			if ret == nil {
				var zero bool
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).IntervalHighBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/interval-high-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/interval-high-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_IntervalHighBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "interval-high-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).IntervalHighBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/max-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/max-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MaxBwPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "max-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MaxBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath represents the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny represents the wildcard version of the /openconfig-network-instance/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw YANG schema element.
type NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "state/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/state/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPath) Config() ygnmi.ConfigQuery[uint64] {
	return ygnmi.NewConfigQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-mpls-te"
//	Instantiating module: "openconfig-network-instance"
//	Path from parent:     "config/min-bw"
//	Path from root:       "/network-instances/network-instance/mpls/lsps/constrained-path/tunnels/tunnel/bandwidth/auto-bandwidth/config/min-bw"
func (n *NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth_MinBwPathAny) Config() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth",
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "min-bw"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth).MinBw
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct {
			return new(oc.NetworkInstance_Mpls_Lsps_ConstrainedPath_Tunnel_Bandwidth_AutoBandwidth)
		},
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
