/*
Package system is a generated package which contains definitions
of structs which generate gNMI paths for a YANG schema.

This package was generated by ygnmi version: v0.10.0: (ygot: v0.29.12)
using the following YANG input files:
  - gnsi/yang/gnsi-telemetry.yang
  - public/release/models/acl/openconfig-acl.yang
  - public/release/models/acl/openconfig-packet-match.yang
  - public/release/models/aft/openconfig-aft.yang
  - public/release/models/bfd/openconfig-bfd.yang
  - public/release/models/bgp/openconfig-bgp-policy.yang
  - public/release/models/bgp/openconfig-bgp-types.yang
  - public/release/models/interfaces/openconfig-if-aggregate.yang
  - public/release/models/interfaces/openconfig-if-ethernet.yang
  - public/release/models/interfaces/openconfig-if-ip-ext.yang
  - public/release/models/interfaces/openconfig-if-ip.yang
  - public/release/models/interfaces/openconfig-interfaces.yang
  - public/release/models/isis/openconfig-isis.yang
  - public/release/models/lacp/openconfig-lacp.yang
  - public/release/models/lldp/openconfig-lldp-types.yang
  - public/release/models/lldp/openconfig-lldp.yang
  - public/release/models/local-routing/openconfig-local-routing.yang
  - public/release/models/mpls/openconfig-mpls-types.yang
  - public/release/models/multicast/openconfig-pim.yang
  - public/release/models/network-instance/openconfig-network-instance.yang
  - public/release/models/openconfig-extensions.yang
  - public/release/models/optical-transport/openconfig-transport-types.yang
  - public/release/models/ospf/openconfig-ospfv2.yang
  - public/release/models/platform/openconfig-platform-cpu.yang
  - public/release/models/platform/openconfig-platform-integrated-circuit.yang
  - public/release/models/platform/openconfig-platform-software.yang
  - public/release/models/platform/openconfig-platform-transceiver.yang
  - public/release/models/platform/openconfig-platform.yang
  - public/release/models/policy-forwarding/openconfig-policy-forwarding.yang
  - public/release/models/policy/openconfig-policy-types.yang
  - public/release/models/qos/openconfig-qos-elements.yang
  - public/release/models/qos/openconfig-qos-interfaces.yang
  - public/release/models/qos/openconfig-qos-types.yang
  - public/release/models/qos/openconfig-qos.yang
  - public/release/models/rib/openconfig-rib-bgp.yang
  - public/release/models/segment-routing/openconfig-segment-routing-types.yang
  - public/release/models/system/openconfig-system.yang
  - public/release/models/types/openconfig-inet-types.yang
  - public/release/models/types/openconfig-types.yang
  - public/release/models/types/openconfig-yang-types.yang
  - public/release/models/vlan/openconfig-vlan.yang
  - public/third_party/ietf/iana-if-type.yang
  - public/third_party/ietf/ietf-inet-types.yang
  - public/third_party/ietf/ietf-interfaces.yang
  - public/third_party/ietf/ietf-yang-types.yang
  - yang/openconfig-bgp-gue.yang

Imported modules were sourced from:
  - public/release/models/...
  - public/third_party/ietf/...
  - gnsi/...
*/
package system

import (
	"reflect"

	oc "github.com/openconfig/lemming/gnmi/oc"
	"github.com/openconfig/ygnmi/ygnmi"
	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// System_Cpu_SoftwareInterrupt_InstantPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/instant YANG schema element.
type System_Cpu_SoftwareInterrupt_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterrupt_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/interval YANG schema element.
type System_Cpu_SoftwareInterrupt_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterrupt_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterrupt_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/max-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterrupt_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min YANG schema element.
type System_Cpu_SoftwareInterrupt_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterrupt_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterrupt_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_SoftwareInterrupt_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt/min-time YANG schema element.
type System_Cpu_SoftwareInterrupt_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterrupt_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_SoftwareInterrupt).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_SoftwareInterrupt) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_SoftwareInterruptPath represents the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPath struct {
	*ygnmi.NodePath
}

// System_Cpu_SoftwareInterruptPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/software-interrupt YANG schema element.
type System_Cpu_SoftwareInterruptPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPath) Avg() *System_Cpu_SoftwareInterrupt_AvgPath {
	ps := &System_Cpu_SoftwareInterrupt_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/avg"
func (n *System_Cpu_SoftwareInterruptPathAny) Avg() *System_Cpu_SoftwareInterrupt_AvgPathAny {
	ps := &System_Cpu_SoftwareInterrupt_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPath) Instant() *System_Cpu_SoftwareInterrupt_InstantPath {
	ps := &System_Cpu_SoftwareInterrupt_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/instant"
func (n *System_Cpu_SoftwareInterruptPathAny) Instant() *System_Cpu_SoftwareInterrupt_InstantPathAny {
	ps := &System_Cpu_SoftwareInterrupt_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPath) Interval() *System_Cpu_SoftwareInterrupt_IntervalPath {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/interval"
func (n *System_Cpu_SoftwareInterruptPathAny) Interval() *System_Cpu_SoftwareInterrupt_IntervalPathAny {
	ps := &System_Cpu_SoftwareInterrupt_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPath) Max() *System_Cpu_SoftwareInterrupt_MaxPath {
	ps := &System_Cpu_SoftwareInterrupt_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/max"
func (n *System_Cpu_SoftwareInterruptPathAny) Max() *System_Cpu_SoftwareInterrupt_MaxPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPath) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/max-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MaxTime() *System_Cpu_SoftwareInterrupt_MaxTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPath) Min() *System_Cpu_SoftwareInterrupt_MinPath {
	ps := &System_Cpu_SoftwareInterrupt_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/software-interrupt/min"
func (n *System_Cpu_SoftwareInterruptPathAny) Min() *System_Cpu_SoftwareInterrupt_MinPathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPath) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePath {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/software-interrupt/min-time"
func (n *System_Cpu_SoftwareInterruptPathAny) MinTime() *System_Cpu_SoftwareInterrupt_MinTimePathAny {
	ps := &System_Cpu_SoftwareInterrupt_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_SoftwareInterruptPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_SoftwareInterrupt] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_SoftwareInterrupt](
		"System_Cpu_SoftwareInterrupt",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_AvgPath represents the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/avg YANG schema element.
type System_Cpu_Total_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_Total_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_InstantPath represents the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/instant YANG schema element.
type System_Cpu_Total_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_Total_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/interval YANG schema element.
type System_Cpu_Total_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_Total_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxPath represents the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max YANG schema element.
type System_Cpu_Total_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_Total_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/max-time YANG schema element.
type System_Cpu_Total_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_Total_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinPath represents the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min YANG schema element.
type System_Cpu_Total_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_Total_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Total).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Total_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Total_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total/min-time YANG schema element.
type System_Cpu_Total_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_Total_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Total",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Total).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Total) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_TotalPath represents the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPath struct {
	*ygnmi.NodePath
}

// System_Cpu_TotalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/total YANG schema element.
type System_Cpu_TotalPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPath) Avg() *System_Cpu_Total_AvgPath {
	ps := &System_Cpu_Total_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/total/avg"
func (n *System_Cpu_TotalPathAny) Avg() *System_Cpu_Total_AvgPathAny {
	ps := &System_Cpu_Total_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPath) Instant() *System_Cpu_Total_InstantPath {
	ps := &System_Cpu_Total_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/total/instant"
func (n *System_Cpu_TotalPathAny) Instant() *System_Cpu_Total_InstantPathAny {
	ps := &System_Cpu_Total_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPath) Interval() *System_Cpu_Total_IntervalPath {
	ps := &System_Cpu_Total_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/total/interval"
func (n *System_Cpu_TotalPathAny) Interval() *System_Cpu_Total_IntervalPathAny {
	ps := &System_Cpu_Total_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPath) Max() *System_Cpu_Total_MaxPath {
	ps := &System_Cpu_Total_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/total/max"
func (n *System_Cpu_TotalPathAny) Max() *System_Cpu_Total_MaxPathAny {
	ps := &System_Cpu_Total_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPath) MaxTime() *System_Cpu_Total_MaxTimePath {
	ps := &System_Cpu_Total_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/total/max-time"
func (n *System_Cpu_TotalPathAny) MaxTime() *System_Cpu_Total_MaxTimePathAny {
	ps := &System_Cpu_Total_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPath) Min() *System_Cpu_Total_MinPath {
	ps := &System_Cpu_Total_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/total/min"
func (n *System_Cpu_TotalPathAny) Min() *System_Cpu_Total_MinPathAny {
	ps := &System_Cpu_Total_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPath) MinTime() *System_Cpu_Total_MinTimePath {
	ps := &System_Cpu_Total_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/total/min-time"
func (n *System_Cpu_TotalPathAny) MinTime() *System_Cpu_Total_MinTimePathAny {
	ps := &System_Cpu_Total_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_TotalPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Total] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Total](
		"System_Cpu_Total",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_AvgPath represents the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/avg YANG schema element.
type System_Cpu_User_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_User_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_InstantPath represents the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/instant YANG schema element.
type System_Cpu_User_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_User_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/interval YANG schema element.
type System_Cpu_User_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_User_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxPath represents the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max YANG schema element.
type System_Cpu_User_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_User_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/max-time YANG schema element.
type System_Cpu_User_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_User_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MinPath represents the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min YANG schema element.
type System_Cpu_User_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_User_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_User).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_User_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_User_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user/min-time YANG schema element.
type System_Cpu_User_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_User_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_User",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_User).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_User) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_UserPath represents the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPath struct {
	*ygnmi.NodePath
}

// System_Cpu_UserPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/user YANG schema element.
type System_Cpu_UserPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPath) Avg() *System_Cpu_User_AvgPath {
	ps := &System_Cpu_User_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/user/avg"
func (n *System_Cpu_UserPathAny) Avg() *System_Cpu_User_AvgPathAny {
	ps := &System_Cpu_User_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPath) Instant() *System_Cpu_User_InstantPath {
	ps := &System_Cpu_User_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/user/instant"
func (n *System_Cpu_UserPathAny) Instant() *System_Cpu_User_InstantPathAny {
	ps := &System_Cpu_User_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPath) Interval() *System_Cpu_User_IntervalPath {
	ps := &System_Cpu_User_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/user/interval"
func (n *System_Cpu_UserPathAny) Interval() *System_Cpu_User_IntervalPathAny {
	ps := &System_Cpu_User_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPath) Max() *System_Cpu_User_MaxPath {
	ps := &System_Cpu_User_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/user/max"
func (n *System_Cpu_UserPathAny) Max() *System_Cpu_User_MaxPathAny {
	ps := &System_Cpu_User_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPath) MaxTime() *System_Cpu_User_MaxTimePath {
	ps := &System_Cpu_User_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/user/max-time"
func (n *System_Cpu_UserPathAny) MaxTime() *System_Cpu_User_MaxTimePathAny {
	ps := &System_Cpu_User_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPath) Min() *System_Cpu_User_MinPath {
	ps := &System_Cpu_User_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/user/min"
func (n *System_Cpu_UserPathAny) Min() *System_Cpu_User_MinPathAny {
	ps := &System_Cpu_User_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPath) MinTime() *System_Cpu_User_MinTimePath {
	ps := &System_Cpu_User_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/user/min-time"
func (n *System_Cpu_UserPathAny) MinTime() *System_Cpu_User_MinTimePathAny {
	ps := &System_Cpu_User_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_User] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_UserPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_User] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_User](
		"System_Cpu_User",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_AvgPath represents the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_AvgPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/avg YANG schema element.
type System_Cpu_Wait_AvgPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_Wait_AvgPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"avg"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Avg
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_InstantPath represents the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_InstantPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/instant YANG schema element.
type System_Cpu_Wait_InstantPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_Wait_InstantPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instant"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Instant
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_IntervalPath represents the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_IntervalPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/interval YANG schema element.
type System_Cpu_Wait_IntervalPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_Wait_IntervalPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"interval"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Interval
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxPath represents the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max YANG schema element.
type System_Cpu_Wait_MaxPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_Wait_MaxPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Max
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MaxTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MaxTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/max-time YANG schema element.
type System_Cpu_Wait_MaxTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max-time"
//	Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_Wait_MaxTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"max-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MaxTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinPath represents the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min YANG schema element.
type System_Cpu_Wait_MinPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPath) State() ygnmi.SingletonQuery[uint8] {
	return ygnmi.NewSingletonQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_Wait_MinPathAny) State() ygnmi.WildcardQuery[uint8] {
	return ygnmi.NewWildcardQuery[uint8](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint8, bool) {
			ret := gs.(*oc.System_Cpu_Wait).Min
			if ret == nil {
				var zero uint8
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_Wait_MinTimePath represents the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Cpu_Wait_MinTimePathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait/min-time YANG schema element.
type System_Cpu_Wait_MinTimePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min-time"
//	Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_Wait_MinTimePathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_Cpu_Wait",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"min-time"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_Cpu_Wait).MinTime
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Cpu_Wait) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Cpu_WaitPath represents the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPath struct {
	*ygnmi.NodePath
}

// System_Cpu_WaitPathAny represents the wildcard version of the /openconfig-system/system/cpus/cpu/state/wait YANG schema element.
type System_Cpu_WaitPathAny struct {
	*ygnmi.NodePath
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPath) Avg() *System_Cpu_Wait_AvgPath {
	ps := &System_Cpu_Wait_AvgPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Avg (leaf): The arithmetic mean value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "avg"
//	Path from root:       "/system/cpus/cpu/state/wait/avg"
func (n *System_Cpu_WaitPathAny) Avg() *System_Cpu_Wait_AvgPathAny {
	ps := &System_Cpu_Wait_AvgPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"avg"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPath) Instant() *System_Cpu_Wait_InstantPath {
	ps := &System_Cpu_Wait_InstantPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Instant (leaf): The instantaneous percentage value.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "instant"
//	Path from root:       "/system/cpus/cpu/state/wait/instant"
func (n *System_Cpu_WaitPathAny) Instant() *System_Cpu_Wait_InstantPathAny {
	ps := &System_Cpu_Wait_InstantPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"instant"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPath) Interval() *System_Cpu_Wait_IntervalPath {
	ps := &System_Cpu_Wait_IntervalPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Interval (leaf): If supported by the system, this reports the time interval
// over which the min/max/average statistics are computed by
// the system.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "interval"
//	Path from root:       "/system/cpus/cpu/state/wait/interval"
func (n *System_Cpu_WaitPathAny) Interval() *System_Cpu_Wait_IntervalPathAny {
	ps := &System_Cpu_Wait_IntervalPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"interval"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPath) Max() *System_Cpu_Wait_MaxPath {
	ps := &System_Cpu_Wait_MaxPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Max (leaf): The maximum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "max"
//	Path from root:       "/system/cpus/cpu/state/wait/max"
func (n *System_Cpu_WaitPathAny) Max() *System_Cpu_Wait_MaxPathAny {
	ps := &System_Cpu_Wait_MaxPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPath) MaxTime() *System_Cpu_Wait_MaxTimePath {
	ps := &System_Cpu_Wait_MaxTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MaxTime (leaf): The absolute time at which the maximum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "max-time"
//		Path from root:       "/system/cpus/cpu/state/wait/max-time"
func (n *System_Cpu_WaitPathAny) MaxTime() *System_Cpu_Wait_MaxTimePathAny {
	ps := &System_Cpu_Wait_MaxTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"max-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPath) Min() *System_Cpu_Wait_MinPath {
	ps := &System_Cpu_Wait_MinPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Min (leaf): The minimum value of the percentage measure of the
// statistic over the time interval.
//
//	Defining module:      "openconfig-types"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "min"
//	Path from root:       "/system/cpus/cpu/state/wait/min"
func (n *System_Cpu_WaitPathAny) Min() *System_Cpu_Wait_MinPathAny {
	ps := &System_Cpu_Wait_MinPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPath) MinTime() *System_Cpu_Wait_MinTimePath {
	ps := &System_Cpu_Wait_MinTimePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// MinTime (leaf): The absolute time at which the minimum value occurred.
// The value is the timestamp in nanoseconds relative to
//
//	 the Unix Epoch (Jan 1, 1970 00:00:00 UTC).
//		Defining module:      "openconfig-types"
//		Instantiating module: "openconfig-system"
//		Path from parent:     "min-time"
//		Path from root:       "/system/cpus/cpu/state/wait/min-time"
func (n *System_Cpu_WaitPathAny) MinTime() *System_Cpu_Wait_MinTimePathAny {
	ps := &System_Cpu_Wait_MinTimePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"min-time"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPath) State() ygnmi.SingletonQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewSingletonQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Cpu_WaitPathAny) State() ygnmi.WildcardQuery[*oc.System_Cpu_Wait] {
	return ygnmi.NewWildcardQuery[*oc.System_Cpu_Wait](
		"System_Cpu_Wait",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_SearchPath represents the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_SearchPathAny represents the wildcard version of the /openconfig-system/system/dns/state/search YANG schema element.
type System_Dns_SearchPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/search"
//	Path from root:       "/system/dns/state/search"
func (n *System_Dns_SearchPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/search"
//	Path from root:       "/system/dns/config/search"
func (n *System_Dns_SearchPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "search"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns).Search
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_DnsPath represents the /openconfig-system/system/dns YANG schema element.
type System_DnsPath struct {
	*ygnmi.NodePath
}

// System_DnsPathAny represents the wildcard version of the /openconfig-system/system/dns YANG schema element.
type System_DnsPathAny struct {
	*ygnmi.NodePath
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntryAny (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryAny() *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": "*"},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPath) HostEntry(Hostname string) *System_Dns_HostEntryPath {
	ps := &System_Dns_HostEntryPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntry (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
//
//	Hostname: string
func (n *System_DnsPathAny) HostEntry(Hostname string) *System_Dns_HostEntryPathAny {
	ps := &System_Dns_HostEntryPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries", "host-entry"},
			map[string]interface{}{"hostname": Hostname},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPath) HostEntryMap() *System_Dns_HostEntryPathMap {
	ps := &System_Dns_HostEntryPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// HostEntryMap (list): List of static host entries
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "host-entries/host-entry"
//	Path from root:       "/system/dns/host-entries/host-entry"
func (n *System_DnsPathAny) HostEntryMap() *System_Dns_HostEntryPathMapAny {
	ps := &System_Dns_HostEntryPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"host-entries"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPath) Search() *System_Dns_SearchPath {
	ps := &System_Dns_SearchPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Search (leaf-list): An ordered list of domains to search when resolving
// a host name.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/search"
//	Path from root:       "/system/dns/*/search"
func (n *System_DnsPathAny) Search() *System_Dns_SearchPathAny {
	ps := &System_Dns_SearchPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "search"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPath) ServerMap() *System_Dns_ServerPathMap {
	ps := &System_Dns_ServerPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// ServerMap (list): List of the DNS servers that the resolver should query.
//
// When the resolver is invoked by a calling application, it
// sends the query to the first name server in this list.  If
// no response has been received within 'timeout' seconds,
// the resolver continues with the next server in the list.
// If no response is received from any server, the resolver
// continues with the first server again.  When the resolver
// has traversed the list 'attempts' times without receiving
// any response, it gives up and returns an error to the
// calling application.
//
// Implementations MAY limit the number of entries in this
// list.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "servers/server"
//	Path from root:       "/system/dns/servers/server"
func (n *System_DnsPathAny) ServerMap() *System_Dns_ServerPathMapAny {
	ps := &System_Dns_ServerPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"servers"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) State() ygnmi.SingletonQuery[*oc.System_Dns] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPath) Config() ygnmi.ConfigQuery[*oc.System_Dns] {
	return ygnmi.NewConfigQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_DnsPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_AliasPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_AliasPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/alias YANG schema element.
type System_Dns_HostEntry_AliasPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/state/alias"
func (n *System_Dns_HostEntry_AliasPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/config/alias"
func (n *System_Dns_HostEntry_AliasPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "alias"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Alias
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_HostnamePath represents the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_HostnamePathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/hostname YANG schema element.
type System_Dns_HostEntry_HostnamePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePath) State() ygnmi.SingletonQuery[string] {
	return ygnmi.NewSingletonQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/state/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) State() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePath) Config() ygnmi.ConfigQuery[string] {
	return ygnmi.NewConfigQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/config/hostname"
func (n *System_Dns_HostEntry_HostnamePathAny) Config() ygnmi.WildcardQuery[string] {
	return ygnmi.NewWildcardQuery[string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "hostname"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Hostname
			if ret == nil {
				var zero string
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv4AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv4AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv4-address YANG schema element.
type System_Dns_HostEntry_Ipv4AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv4-address"
func (n *System_Dns_HostEntry_Ipv4AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv4-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv4Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntry_Ipv6AddressPath represents the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_Dns_HostEntry_Ipv6AddressPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry/state/ipv6-address YANG schema element.
type System_Dns_HostEntry_Ipv6AddressPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) State() ygnmi.SingletonQuery[[]string] {
	return ygnmi.NewSingletonQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "state/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/state/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) State() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPath) Config() ygnmi.ConfigQuery[[]string] {
	return ygnmi.NewConfigQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "config/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/config/ipv6-address"
func (n *System_Dns_HostEntry_Ipv6AddressPathAny) Config() ygnmi.WildcardQuery[[]string] {
	return ygnmi.NewWildcardQuery[[]string](
		"System_Dns_HostEntry",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"config", "ipv6-address"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) ([]string, bool) {
			ret := gs.(*oc.System_Dns_HostEntry).Ipv6Address
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns_HostEntry) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_Dns_HostEntryPath represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPath struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMap represents the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_HostEntryPathMapAny represents the wildcard version of the /openconfig-system/system/dns/host-entries/host-entry YANG schema element.
type System_Dns_HostEntryPathMapAny struct {
	*ygnmi.NodePath
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPath) Alias() *System_Dns_HostEntry_AliasPath {
	ps := &System_Dns_HostEntry_AliasPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Alias (leaf-list): Additional aliases for the hostname
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/alias"
//	Path from root:       "/system/dns/host-entries/host-entry/*/alias"
func (n *System_Dns_HostEntryPathAny) Alias() *System_Dns_HostEntry_AliasPathAny {
	ps := &System_Dns_HostEntry_AliasPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "alias"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPath) Hostname() *System_Dns_HostEntry_HostnamePath {
	ps := &System_Dns_HostEntry_HostnamePath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Hostname (leaf): Hostname for the static DNS entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/hostname"
//	Path from root:       "/system/dns/host-entries/host-entry/*/hostname"
func (n *System_Dns_HostEntryPathAny) Hostname() *System_Dns_HostEntry_HostnamePathAny {
	ps := &System_Dns_HostEntry_HostnamePathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "hostname"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPath) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPath {
	ps := &System_Dns_HostEntry_Ipv4AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv4Address (leaf-list): List of IPv4 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv4-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv4-address"
func (n *System_Dns_HostEntryPathAny) Ipv4Address() *System_Dns_HostEntry_Ipv4AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv4AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv4-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPath) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPath {
	ps := &System_Dns_HostEntry_Ipv6AddressPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// Ipv6Address (leaf-list): List of IPv6 addresses for the host entry
//
//	Defining module:      "openconfig-system"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "*/ipv6-address"
//	Path from root:       "/system/dns/host-entries/host-entry/*/ipv6-address"
func (n *System_Dns_HostEntryPathAny) Ipv6Address() *System_Dns_HostEntry_Ipv6AddressPathAny {
	ps := &System_Dns_HostEntry_Ipv6AddressPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"*", "ipv6-address"},
			map[string]interface{}{},
			n,
		),
		parent: n,
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) State() ygnmi.SingletonQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) State() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPath) Config() ygnmi.ConfigQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_HostEntry](
		"System_Dns_HostEntry",
		false,
		true,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) State() ygnmi.SingletonQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewSingletonQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) State() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMap) Config() ygnmi.ConfigQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewConfigQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_HostEntryPathMapAny) Config() ygnmi.WildcardQuery[map[string]*oc.System_Dns_HostEntry] {
	return ygnmi.NewWildcardQuery[map[string]*oc.System_Dns_HostEntry](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (map[string]*oc.System_Dns_HostEntry, bool) {
			ret := gs.(*oc.System_Dns).HostEntry
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:host-entries"},
			PostRelPath: []string{"openconfig-system:host-entry"},
		},
	)
}

// System_Dns_ServerPath represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPath struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathAny struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMap represents the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMap struct {
	*ygnmi.NodePath
}

// System_Dns_ServerPathMapAny represents the wildcard version of the /openconfig-system/system/dns/servers/server YANG schema element.
type System_Dns_ServerPathMapAny struct {
	*ygnmi.NodePath
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) State() ygnmi.SingletonQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewSingletonQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) State() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		true,
		false,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMap) Config() ygnmi.ConfigQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewConfigQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// Config returns a Query that can be used in gNMI operations.
func (n *System_Dns_ServerPathMapAny) Config() ygnmi.WildcardQuery[*oc.System_Dns_Server_OrderedMap] {
	return ygnmi.NewWildcardQuery[*oc.System_Dns_Server_OrderedMap](
		"System_Dns",
		false,
		true,
		false,
		false,
		true,
		true,
		n,
		func(gs ygot.ValidatedGoStruct) (*oc.System_Dns_Server_OrderedMap, bool) {
			ret := gs.(*oc.System_Dns).Server
			return ret, ret != nil
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_Dns) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		&ygnmi.CompressionInfo{
			PreRelPath:  []string{"openconfig-system:servers"},
			PostRelPath: []string{"openconfig-system:server"},
		},
	)
}

// System_GnmiPathzPoliciesPath represents the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPath struct {
	*ygnmi.NodePath
}

// System_GnmiPathzPoliciesPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies YANG schema element.
type System_GnmiPathzPoliciesPathAny struct {
	*ygnmi.NodePath
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": "*"},
			n,
		),
	}
	return ps
}

// PolicyAny (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyAny() *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": "*"},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Instance: oc.E_Policy_Instance
func (n *System_GnmiPathzPoliciesPath) Policy(Instance oc.E_Policy_Instance) *System_GnmiPathzPolicies_PolicyPath {
	ps := &System_GnmiPathzPolicies_PolicyPath{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": Instance},
			n,
		),
	}
	return ps
}

// Policy (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
//
//	Instance: oc.E_Policy_Instance
func (n *System_GnmiPathzPoliciesPathAny) Policy(Instance oc.E_Policy_Instance) *System_GnmiPathzPolicies_PolicyPathAny {
	ps := &System_GnmiPathzPolicies_PolicyPathAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies", "policy"},
			map[string]interface{}{"instance": Instance},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPath) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMap {
	ps := &System_GnmiPathzPolicies_PolicyPathMap{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// PolicyMap (list): Information about the OpenConfig-path-based authorization
// policy that is identified by the `instance`.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "openconfig-system"
//	Path from parent:     "policies/policy"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy"
func (n *System_GnmiPathzPoliciesPathAny) PolicyMap() *System_GnmiPathzPolicies_PolicyPathMapAny {
	ps := &System_GnmiPathzPolicies_PolicyPathMapAny{
		NodePath: ygnmi.NewNodePath(
			[]string{"policies"},
			map[string]interface{}{},
			n,
		),
	}
	return ps
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPath) State() ygnmi.SingletonQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewSingletonQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
func (n *System_GnmiPathzPoliciesPathAny) State() ygnmi.WildcardQuery[*oc.System_GnmiPathzPolicies] {
	return ygnmi.NewWildcardQuery[*oc.System_GnmiPathzPolicies](
		"System_GnmiPathzPolicies",
		true,
		false,
		false,
		false,
		true,
		false,
		n,
		nil,
		nil,
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_CreatedOnPath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_CreatedOnPathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/created-on YANG schema element.
type System_GnmiPathzPolicies_Policy_CreatedOnPathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPath) State() ygnmi.SingletonQuery[uint64] {
	return ygnmi.NewSingletonQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/created-on"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/created-on"
func (n *System_GnmiPathzPolicies_Policy_CreatedOnPathAny) State() ygnmi.WildcardQuery[uint64] {
	return ygnmi.NewWildcardQuery[uint64](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		true,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "created-on"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (uint64, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).CreatedOn
			if ret == nil {
				var zero uint64
				return zero, false
			}
			return *ret, true
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// System_GnmiPathzPolicies_Policy_InstancePath represents the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/instance YANG schema element.
type System_GnmiPathzPolicies_Policy_InstancePath struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// System_GnmiPathzPolicies_Policy_InstancePathAny represents the wildcard version of the /openconfig-system/system/gnmi-pathz-policies/policies/policy/state/instance YANG schema element.
type System_GnmiPathzPolicies_Policy_InstancePathAny struct {
	*ygnmi.NodePath
	parent ygnmi.PathStruct
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/instance"
func (n *System_GnmiPathzPolicies_Policy_InstancePath) State() ygnmi.SingletonQuery[oc.E_Policy_Instance] {
	return ygnmi.NewSingletonQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// State returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "state/instance"
//	Path from root:       "/system/gnmi-pathz-policies/policies/policy/state/instance"
func (n *System_GnmiPathzPolicies_Policy_InstancePathAny) State() ygnmi.WildcardQuery[oc.E_Policy_Instance] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		true,
		false,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"state", "instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "instance"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_InstancePath) Config() ygnmi.ConfigQuery[oc.E_Policy_Instance] {
	return ygnmi.NewConfigQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}

// Config returns a Query that can be used in gNMI operations.
//
//	Defining module:      "gnsi-pathz"
//	Instantiating module: "gnsi-pathz"
//	Path from parent:     "instance"
//	Path from root:       ""
func (n *System_GnmiPathzPolicies_Policy_InstancePathAny) Config() ygnmi.WildcardQuery[oc.E_Policy_Instance] {
	return ygnmi.NewWildcardQuery[oc.E_Policy_Instance](
		"System_GnmiPathzPolicies_Policy",
		false,
		true,
		true,
		false,
		true,
		false,
		ygnmi.NewNodePath(
			[]string{"instance"},
			nil,
			n.parent,
		),
		func(gs ygot.ValidatedGoStruct) (oc.E_Policy_Instance, bool) {
			ret := gs.(*oc.System_GnmiPathzPolicies_Policy).Instance
			return ret, !reflect.ValueOf(ret).IsZero()
		},
		func() ygot.ValidatedGoStruct { return new(oc.System_GnmiPathzPolicies_Policy) },
		func() *ytypes.Schema {
			return &ytypes.Schema{
				Root:       &oc.Root{},
				SchemaTree: oc.SchemaTree,
				Unmarshal:  oc.Unmarshal,
			}
		},
		nil,
		nil,
	)
}
